// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._BranchProperties;
import ms.tfs.versioncontrol.clientservices._03._ItemIdentifier;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BranchProperties
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _ItemIdentifier rootItem;
    protected String description;
    protected String owner;
    protected String ownerDisplayName;
    protected String ownerUniqueName;
    protected _ItemIdentifier parentBranch;
    protected _Mapping[] branchMappings;

    public _BranchProperties()
    {
        super();
    }

    public _BranchProperties(
        final _ItemIdentifier rootItem,
        final String description,
        final String owner,
        final String ownerDisplayName,
        final String ownerUniqueName,
        final _ItemIdentifier parentBranch,
        final _Mapping[] branchMappings)
    {
        // TODO : Call super() instead of setting all fields directly?
        setRootItem(rootItem);
        setDescription(description);
        setOwner(owner);
        setOwnerDisplayName(ownerDisplayName);
        setOwnerUniqueName(ownerUniqueName);
        setParentBranch(parentBranch);
        setBranchMappings(branchMappings);
    }

    public _ItemIdentifier getRootItem()
    {
        return this.rootItem;
    }

    public void setRootItem(_ItemIdentifier value)
    {
        this.rootItem = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(String value)
    {
        this.owner = value;
    }

    public String getOwnerDisplayName()
    {
        return this.ownerDisplayName;
    }

    public void setOwnerDisplayName(String value)
    {
        this.ownerDisplayName = value;
    }

    public String getOwnerUniqueName()
    {
        return this.ownerUniqueName;
    }

    public void setOwnerUniqueName(String value)
    {
        this.ownerUniqueName = value;
    }

    public _ItemIdentifier getParentBranch()
    {
        return this.parentBranch;
    }

    public void setParentBranch(_ItemIdentifier value)
    {
        this.parentBranch = value;
    }

    public _Mapping[] getBranchMappings()
    {
        return this.branchMappings;
    }

    public void setBranchMappings(_Mapping[] value)
    {
        this.branchMappings = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.rootItem != null)
        {
            this.rootItem.writeAsElement(
                writer,
                "RootItem");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Owner",
            this.owner);
        XMLStreamWriterHelper.writeElement(
            writer,
            "OwnerDisplayName",
            this.ownerDisplayName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "OwnerUniqueName",
            this.ownerUniqueName);

        if (this.parentBranch != null)
        {
            this.parentBranch.writeAsElement(
                writer,
                "ParentBranch");
        }

        if (this.branchMappings != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("BranchMappings");

            for (int iterator0 = 0; iterator0 < this.branchMappings.length; iterator0++)
            {
                this.branchMappings[iterator0].writeAsElement(
                    writer,
                    "Mapping");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("RootItem"))
                {
                    this.rootItem = new _ItemIdentifier();
                    this.rootItem.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Owner"))
                {
                    this.owner = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("OwnerDisplayName"))
                {
                    this.ownerDisplayName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("OwnerUniqueName"))
                {
                    this.ownerUniqueName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ParentBranch"))
                {
                    this.parentBranch = new _ItemIdentifier();
                    this.parentBranch.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("BranchMappings"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _Mapping complexObject0 = new _Mapping();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.branchMappings = (_Mapping[]) list0.toArray(new _Mapping[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
