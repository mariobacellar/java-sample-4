// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._ActionDefinition;
import ms.ws._SecurityNamespaceDescription;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _SecurityNamespaceDescription
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String namespaceId;
    protected String name;
    protected String displayName;
    protected int separator;
    protected int elementLength;
    protected int writePermission;
    protected int readPermission;
    protected String databaseCategory;
    protected int structure;
    protected String extensionType;

    // Elements
    protected _ActionDefinition[] actions;

    public _SecurityNamespaceDescription()
    {
        super();
    }

    public _SecurityNamespaceDescription(
        final String namespaceId,
        final String name,
        final String displayName,
        final int separator,
        final int elementLength,
        final int writePermission,
        final int readPermission,
        final String databaseCategory,
        final int structure,
        final String extensionType,
        final _ActionDefinition[] actions)
    {
        // TODO : Call super() instead of setting all fields directly?
        setNamespaceId(namespaceId);
        setName(name);
        setDisplayName(displayName);
        setSeparator(separator);
        setElementLength(elementLength);
        setWritePermission(writePermission);
        setReadPermission(readPermission);
        setDatabaseCategory(databaseCategory);
        setStructure(structure);
        setExtensionType(extensionType);
        setActions(actions);
    }

    public String getNamespaceId()
    {
        return this.namespaceId;
    }

    public void setNamespaceId(final String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'namespaceId' is a required attribute, its value cannot be null");
        }

        this.namespaceId = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(final String value)
    {
        this.name = value;
    }

    public String getDisplayName()
    {
        return this.displayName;
    }

    public void setDisplayName(final String value)
    {
        this.displayName = value;
    }

    public int getSeparator()
    {
        return this.separator;
    }

    public void setSeparator(final int value)
    {
        this.separator = value;
    }

    public int getElementLength()
    {
        return this.elementLength;
    }

    public void setElementLength(final int value)
    {
        this.elementLength = value;
    }

    public int getWritePermission()
    {
        return this.writePermission;
    }

    public void setWritePermission(final int value)
    {
        this.writePermission = value;
    }

    public int getReadPermission()
    {
        return this.readPermission;
    }

    public void setReadPermission(final int value)
    {
        this.readPermission = value;
    }

    public String getDatabaseCategory()
    {
        return this.databaseCategory;
    }

    public void setDatabaseCategory(final String value)
    {
        this.databaseCategory = value;
    }

    public int getStructure()
    {
        return this.structure;
    }

    public void setStructure(final int value)
    {
        this.structure = value;
    }

    public String getExtensionType()
    {
        return this.extensionType;
    }

    public void setExtensionType(final String value)
    {
        this.extensionType = value;
    }

    public _ActionDefinition[] getActions()
    {
        return this.actions;
    }

    public void setActions(_ActionDefinition[] value)
    {
        this.actions = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "namespaceId",
            this.namespaceId);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "name",
            this.name);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "displayName",
            this.displayName);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "separator",
            this.separator);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "elementLength",
            this.elementLength);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "writePermission",
            this.writePermission);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "readPermission",
            this.readPermission);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "databaseCategory",
            this.databaseCategory);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "structure",
            this.structure);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "extensionType",
            this.extensionType);

        // Elements
        if (this.actions != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Actions");

            for (int iterator0 = 0; iterator0 < this.actions.length; iterator0++)
            {
                this.actions[iterator0].writeAsElement(
                    writer,
                    "ActionDefinition");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("namespaceId"))
            {
                this.namespaceId = attributeValue;
            }
            else if (localName.equalsIgnoreCase("name"))
            {
                this.name = attributeValue;
            }
            else if (localName.equalsIgnoreCase("displayName"))
            {
                this.displayName = attributeValue;
            }
            else if (localName.equalsIgnoreCase("separator"))
            {
                this.separator = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("elementLength"))
            {
                this.elementLength = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("writePermission"))
            {
                this.writePermission = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("readPermission"))
            {
                this.readPermission = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("databaseCategory"))
            {
                this.databaseCategory = attributeValue;
            }
            else if (localName.equalsIgnoreCase("structure"))
            {
                this.structure = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("extensionType"))
            {
                this.extensionType = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Actions"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ActionDefinition complexObject0 = new _ActionDefinition();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.actions = (_ActionDefinition[]) list0.toArray(new _ActionDefinition[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
