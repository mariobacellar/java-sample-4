// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ConflictInformation;
import ms.tfs.versioncontrol.clientservices._03._ConflictType;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ConflictInformation
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected _ConflictType ct;
    protected int vf;
    protected int pcid;
    protected String slocal;
    protected String tlocal;
    protected int re;

    // No elements    
    public _ConflictInformation()
    {
        super();
    }

    public _ConflictInformation(
        final _ConflictType ct,
        final int vf,
        final int pcid,
        final String slocal,
        final String tlocal,
        final int re)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCt(ct);
        setVf(vf);
        setPcid(pcid);
        setSlocal(slocal);
        setTlocal(tlocal);
        setRe(re);
    }

    public _ConflictType getCt()
    {
        return this.ct;
    }

    public void setCt(final _ConflictType value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'ct' is a required attribute, its value cannot be null");
        }

        this.ct = value;
    }

    public int getVf()
    {
        return this.vf;
    }

    public void setVf(final int value)
    {
        this.vf = value;
    }

    public int getPcid()
    {
        return this.pcid;
    }

    public void setPcid(final int value)
    {
        this.pcid = value;
    }

    public String getSlocal()
    {
        return this.slocal;
    }

    public void setSlocal(final String value)
    {
        this.slocal = value;
    }

    public String getTlocal()
    {
        return this.tlocal;
    }

    public void setTlocal(final String value)
    {
        this.tlocal = value;
    }

    public int getRe()
    {
        return this.re;
    }

    public void setRe(final int value)
    {
        this.re = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        this.ct.writeAsAttribute(
            writer,
            "ct");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "vf",
            this.vf);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "pcid",
            this.pcid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "slocal",
            this.slocal);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "tlocal",
            this.tlocal);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "re",
            this.re);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("ct"))
            {
                this.ct = _ConflictType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("vf"))
            {
                this.vf = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("pcid"))
            {
                this.pcid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("slocal"))
            {
                this.slocal = attributeValue;
            }
            else if (localName.equalsIgnoreCase("tlocal"))
            {
                this.tlocal = attributeValue;
            }
            else if (localName.equalsIgnoreCase("re"))
            {
                this.re = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
