// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangesetSummary;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ChangesetSummary
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected int changesetId;
    protected String owner;
    protected String ownerDisplayName;
    protected String committer;
    protected String committerDisplayName;
    protected String comment;
    protected Calendar creationDate;

    public _ChangesetSummary()
    {
        super();
    }

    public _ChangesetSummary(
        final int changesetId,
        final String owner,
        final String ownerDisplayName,
        final String committer,
        final String committerDisplayName,
        final String comment,
        final Calendar creationDate)
    {
        // TODO : Call super() instead of setting all fields directly?
        setChangesetId(changesetId);
        setOwner(owner);
        setOwnerDisplayName(ownerDisplayName);
        setCommitter(committer);
        setCommitterDisplayName(committerDisplayName);
        setComment(comment);
        setCreationDate(creationDate);
    }

    public int getChangesetId()
    {
        return this.changesetId;
    }

    public void setChangesetId(int value)
    {
        this.changesetId = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(String value)
    {
        this.owner = value;
    }

    public String getOwnerDisplayName()
    {
        return this.ownerDisplayName;
    }

    public void setOwnerDisplayName(String value)
    {
        this.ownerDisplayName = value;
    }

    public String getCommitter()
    {
        return this.committer;
    }

    public void setCommitter(String value)
    {
        this.committer = value;
    }

    public String getCommitterDisplayName()
    {
        return this.committerDisplayName;
    }

    public void setCommitterDisplayName(String value)
    {
        this.committerDisplayName = value;
    }

    public String getComment()
    {
        return this.comment;
    }

    public void setComment(String value)
    {
        this.comment = value;
    }

    public Calendar getCreationDate()
    {
        return this.creationDate;
    }

    public void setCreationDate(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'CreationDate' is a required element, its value cannot be null");
        }

        this.creationDate = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ChangesetId",
            this.changesetId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Owner",
            this.owner);
        XMLStreamWriterHelper.writeElement(
            writer,
            "OwnerDisplayName",
            this.ownerDisplayName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Committer",
            this.committer);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CommitterDisplayName",
            this.committerDisplayName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Comment",
            this.comment);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CreationDate",
            this.creationDate,
            true);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ChangesetId"))
                {
                    this.changesetId = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Owner"))
                {
                    this.owner = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("OwnerDisplayName"))
                {
                    this.ownerDisplayName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Committer"))
                {
                    this.committer = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("CommitterDisplayName"))
                {
                    this.committerDisplayName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Comment"))
                {
                    this.comment = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("CreationDate"))
                {
                    this.creationDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
