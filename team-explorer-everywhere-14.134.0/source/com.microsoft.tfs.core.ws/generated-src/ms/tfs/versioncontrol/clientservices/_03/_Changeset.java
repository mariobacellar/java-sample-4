// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._Change;
import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._Changeset;
import ms.tfs.versioncontrol.clientservices._03._CheckinNote;
import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldValue;
import ms.tfs.versioncontrol.clientservices._03._Item;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PolicyFailureInfo;
import ms.tfs.versioncontrol.clientservices._03._PolicyOverrideInfo;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Changeset
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String cmtr;
    protected String cmtrdisp;
    protected Calendar date;
    protected int cset;
    protected String owner;
    protected String ownerdisp;

    // Elements
    protected String comment;
    protected _CheckinNote checkinNote;
    protected _PolicyOverrideInfo policyOverride;
    protected _PropertyValue[] properties;
    protected _Change[] changes;

    public _Changeset()
    {
        super();
    }

    public _Changeset(
        final String cmtr,
        final String cmtrdisp,
        final Calendar date,
        final int cset,
        final String owner,
        final String ownerdisp,
        final String comment,
        final _CheckinNote checkinNote,
        final _PolicyOverrideInfo policyOverride,
        final _PropertyValue[] properties,
        final _Change[] changes)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCmtr(cmtr);
        setCmtrdisp(cmtrdisp);
        setDate(date);
        setCset(cset);
        setOwner(owner);
        setOwnerdisp(ownerdisp);
        setComment(comment);
        setCheckinNote(checkinNote);
        setPolicyOverride(policyOverride);
        setProperties(properties);
        setChanges(changes);
    }

    public String getCmtr()
    {
        return this.cmtr;
    }

    public void setCmtr(final String value)
    {
        this.cmtr = value;
    }

    public String getCmtrdisp()
    {
        return this.cmtrdisp;
    }

    public void setCmtrdisp(final String value)
    {
        this.cmtrdisp = value;
    }

    public Calendar getDate()
    {
        return this.date;
    }

    public void setDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'date' is a required attribute, its value cannot be null");
        }

        this.date = value;
    }

    public int getCset()
    {
        return this.cset;
    }

    public void setCset(final int value)
    {
        this.cset = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(final String value)
    {
        this.owner = value;
    }

    public String getOwnerdisp()
    {
        return this.ownerdisp;
    }

    public void setOwnerdisp(final String value)
    {
        this.ownerdisp = value;
    }

    public String getComment()
    {
        return this.comment;
    }

    public void setComment(String value)
    {
        this.comment = value;
    }

    public _CheckinNote getCheckinNote()
    {
        return this.checkinNote;
    }

    public void setCheckinNote(_CheckinNote value)
    {
        this.checkinNote = value;
    }

    public _PolicyOverrideInfo getPolicyOverride()
    {
        return this.policyOverride;
    }

    public void setPolicyOverride(_PolicyOverrideInfo value)
    {
        this.policyOverride = value;
    }

    public _PropertyValue[] getProperties()
    {
        return this.properties;
    }

    public void setProperties(_PropertyValue[] value)
    {
        this.properties = value;
    }

    public _Change[] getChanges()
    {
        return this.changes;
    }

    public void setChanges(_Change[] value)
    {
        this.changes = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "cmtr",
            this.cmtr);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "cmtrdisp",
            this.cmtrdisp);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "date",
            this.date,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "cset",
            this.cset);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "owner",
            this.owner);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ownerdisp",
            this.ownerdisp);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Comment",
            this.comment);

        if (this.checkinNote != null)
        {
            this.checkinNote.writeAsElement(
                writer,
                "CheckinNote");
        }

        if (this.policyOverride != null)
        {
            this.policyOverride.writeAsElement(
                writer,
                "PolicyOverride");
        }

        if (this.properties != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Properties");

            for (int iterator0 = 0; iterator0 < this.properties.length; iterator0++)
            {
                this.properties[iterator0].writeAsElement(
                    writer,
                    "PropertyValue");
            }

            writer.writeEndElement();
        }

        if (this.changes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Changes");

            for (int iterator0 = 0; iterator0 < this.changes.length; iterator0++)
            {
                this.changes[iterator0].writeAsElement(
                    writer,
                    "Change");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("cmtr"))
            {
                this.cmtr = attributeValue;
            }
            else if (localName.equalsIgnoreCase("cmtrdisp"))
            {
                this.cmtrdisp = attributeValue;
            }
            else if (localName.equalsIgnoreCase("date"))
            {
                this.date = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("cset"))
            {
                this.cset = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("owner"))
            {
                this.owner = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ownerdisp"))
            {
                this.ownerdisp = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Comment"))
                {
                    this.comment = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("CheckinNote"))
                {
                    this.checkinNote = new _CheckinNote();
                    this.checkinNote.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("PolicyOverride"))
                {
                    this.policyOverride = new _PolicyOverrideInfo();
                    this.policyOverride.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Properties"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PropertyValue complexObject0 = new _PropertyValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.properties = (_PropertyValue[]) list0.toArray(new _PropertyValue[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Changes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _Change complexObject0 = new _Change();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.changes = (_Change[]) list0.toArray(new _Change[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
