// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PendingChange;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _PendingChange
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int chgEx = 0;
    protected _ChangeType chg = new _ChangeType(
                new _ChangeType._ChangeType_Flag[] { _ChangeType._ChangeType_Flag.None });
    protected Calendar date;
    protected int did = 0;
    protected _ItemType type = _ItemType.Any;
    protected int enc = -2;
    protected int itemid = 0;
    protected String local;
    protected _LockLevel lock = _LockLevel.None;
    protected String item;
    protected String srclocal;
    protected String srcitem;
    protected int svrfm = 0;
    protected int sdi = 0;
    protected int ver = 0;
    protected byte[] hash;
    protected long len = -1;
    protected byte[] uhash;
    protected int pcid = 0;
    protected String durl;
    protected String shelvedurl;
    protected int ct;

    // Elements
    protected _MergeSource[] mergeSources;
    protected _PropertyValue[] propertyValues;

    public _PendingChange()
    {
        super();
    }

    public _PendingChange(
        final int chgEx,
        final _ChangeType chg,
        final Calendar date,
        final int did,
        final _ItemType type,
        final int enc,
        final int itemid,
        final String local,
        final _LockLevel lock,
        final String item,
        final String srclocal,
        final String srcitem,
        final int svrfm,
        final int sdi,
        final int ver,
        final byte[] hash,
        final long len,
        final byte[] uhash,
        final int pcid,
        final String durl,
        final String shelvedurl,
        final int ct,
        final _MergeSource[] mergeSources,
        final _PropertyValue[] propertyValues)
    {
        // TODO : Call super() instead of setting all fields directly?
        setChgEx(chgEx);
        setChg(chg);
        setDate(date);
        setDid(did);
        setType(type);
        setEnc(enc);
        setItemid(itemid);
        setLocal(local);
        setLock(lock);
        setItem(item);
        setSrclocal(srclocal);
        setSrcitem(srcitem);
        setSvrfm(svrfm);
        setSdi(sdi);
        setVer(ver);
        setHash(hash);
        setLen(len);
        setUhash(uhash);
        setPcid(pcid);
        setDurl(durl);
        setShelvedurl(shelvedurl);
        setCt(ct);
        setMergeSources(mergeSources);
        setPropertyValues(propertyValues);
    }

    public int getChgEx()
    {
        return this.chgEx;
    }

    public void setChgEx(final int value)
    {
        this.chgEx = value;
    }

    public _ChangeType getChg()
    {
        return this.chg;
    }

    public void setChg(final _ChangeType value)
    {
        this.chg = value;
    }

    public Calendar getDate()
    {
        return this.date;
    }

    public void setDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'date' is a required attribute, its value cannot be null");
        }

        this.date = value;
    }

    public int getDid()
    {
        return this.did;
    }

    public void setDid(final int value)
    {
        this.did = value;
    }

    public _ItemType getType()
    {
        return this.type;
    }

    public void setType(final _ItemType value)
    {
        this.type = value;
    }

    public int getEnc()
    {
        return this.enc;
    }

    public void setEnc(final int value)
    {
        this.enc = value;
    }

    public int getItemid()
    {
        return this.itemid;
    }

    public void setItemid(final int value)
    {
        this.itemid = value;
    }

    public String getLocal()
    {
        return this.local;
    }

    public void setLocal(final String value)
    {
        this.local = value;
    }

    public _LockLevel getLock()
    {
        return this.lock;
    }

    public void setLock(final _LockLevel value)
    {
        this.lock = value;
    }

    public String getItem()
    {
        return this.item;
    }

    public void setItem(final String value)
    {
        this.item = value;
    }

    public String getSrclocal()
    {
        return this.srclocal;
    }

    public void setSrclocal(final String value)
    {
        this.srclocal = value;
    }

    public String getSrcitem()
    {
        return this.srcitem;
    }

    public void setSrcitem(final String value)
    {
        this.srcitem = value;
    }

    public int getSvrfm()
    {
        return this.svrfm;
    }

    public void setSvrfm(final int value)
    {
        this.svrfm = value;
    }

    public int getSdi()
    {
        return this.sdi;
    }

    public void setSdi(final int value)
    {
        this.sdi = value;
    }

    public int getVer()
    {
        return this.ver;
    }

    public void setVer(final int value)
    {
        this.ver = value;
    }

    public byte[] getHash()
    {
        return this.hash;
    }

    public void setHash(final byte[] value)
    {
        this.hash = value;
    }

    public long getLen()
    {
        return this.len;
    }

    public void setLen(final long value)
    {
        this.len = value;
    }

    public byte[] getUhash()
    {
        return this.uhash;
    }

    public void setUhash(final byte[] value)
    {
        this.uhash = value;
    }

    public int getPcid()
    {
        return this.pcid;
    }

    public void setPcid(final int value)
    {
        this.pcid = value;
    }

    public String getDurl()
    {
        return this.durl;
    }

    public void setDurl(final String value)
    {
        this.durl = value;
    }

    public String getShelvedurl()
    {
        return this.shelvedurl;
    }

    public void setShelvedurl(final String value)
    {
        this.shelvedurl = value;
    }

    public int getCt()
    {
        return this.ct;
    }

    public void setCt(final int value)
    {
        this.ct = value;
    }

    public _MergeSource[] getMergeSources()
    {
        return this.mergeSources;
    }

    public void setMergeSources(_MergeSource[] value)
    {
        this.mergeSources = value;
    }

    public _PropertyValue[] getPropertyValues()
    {
        return this.propertyValues;
    }

    public void setPropertyValues(_PropertyValue[] value)
    {
        this.propertyValues = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "chgEx",
            this.chgEx);

        if (this.chg != null)
        {
            this.chg.writeAsAttribute(
                writer,
                "chg");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "date",
            this.date,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "did",
            this.did);

        if (this.type != null)
        {
            this.type.writeAsAttribute(
                writer,
                "type");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "enc",
            this.enc);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "itemid",
            this.itemid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "local",
            this.local);

        if (this.lock != null)
        {
            this.lock.writeAsAttribute(
                writer,
                "lock");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "item",
            this.item);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "srclocal",
            this.srclocal);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "srcitem",
            this.srcitem);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "svrfm",
            this.svrfm);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "sdi",
            this.sdi);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ver",
            this.ver);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "hash",
            this.hash);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "len",
            this.len);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "uhash",
            this.uhash);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "pcid",
            this.pcid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "durl",
            this.durl);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "shelvedurl",
            this.shelvedurl);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ct",
            this.ct);

        // Elements
        if (this.mergeSources != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("MergeSources");

            for (int iterator0 = 0; iterator0 < this.mergeSources.length; iterator0++)
            {
                this.mergeSources[iterator0].writeAsElement(
                    writer,
                    "MergeSource");
            }

            writer.writeEndElement();
        }

        if (this.propertyValues != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PropertyValues");

            for (int iterator0 = 0; iterator0 < this.propertyValues.length; iterator0++)
            {
                this.propertyValues[iterator0].writeAsElement(
                    writer,
                    "PropertyValue");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("chgEx"))
            {
                this.chgEx = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("chg"))
            {
                this.chg = new _ChangeType();
                this.chg.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("date"))
            {
                this.date = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("did"))
            {
                this.did = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("type"))
            {
                this.type = _ItemType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("enc"))
            {
                this.enc = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("itemid"))
            {
                this.itemid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("local"))
            {
                this.local = attributeValue;
            }
            else if (localName.equalsIgnoreCase("lock"))
            {
                this.lock = _LockLevel.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("item"))
            {
                this.item = attributeValue;
            }
            else if (localName.equalsIgnoreCase("srclocal"))
            {
                this.srclocal = attributeValue;
            }
            else if (localName.equalsIgnoreCase("srcitem"))
            {
                this.srcitem = attributeValue;
            }
            else if (localName.equalsIgnoreCase("svrfm"))
            {
                this.svrfm = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("sdi"))
            {
                this.sdi = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ver"))
            {
                this.ver = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("hash"))
            {
                this.hash = XMLConvert.toByteArray(attributeValue);
            }
            else if (localName.equalsIgnoreCase("len"))
            {
                this.len = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("uhash"))
            {
                this.uhash = XMLConvert.toByteArray(attributeValue);
            }
            else if (localName.equalsIgnoreCase("pcid"))
            {
                this.pcid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("durl"))
            {
                this.durl = attributeValue;
            }
            else if (localName.equalsIgnoreCase("shelvedurl"))
            {
                this.shelvedurl = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ct"))
            {
                this.ct = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("MergeSources"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _MergeSource complexObject0 = new _MergeSource();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.mergeSources = (_MergeSource[]) list0.toArray(new _MergeSource[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("PropertyValues"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PropertyValue complexObject0 = new _PropertyValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.propertyValues = (_PropertyValue[]) list0.toArray(new _PropertyValue[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
