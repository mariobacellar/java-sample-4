// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ExtensionParameter;
import ms.sql.reporting.reportingservices._ValidValue;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ExtensionParameter
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String name;
    protected String displayName;
    protected boolean required;
    protected boolean readOnly;
    protected String value;
    protected String error;
    protected boolean encrypted;
    protected boolean isPassword;
    protected _ValidValue[] validValues;

    public _ExtensionParameter()
    {
        super();
    }

    public _ExtensionParameter(
        final String name,
        final String displayName,
        final boolean required,
        final boolean readOnly,
        final String value,
        final String error,
        final boolean encrypted,
        final boolean isPassword,
        final _ValidValue[] validValues)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setDisplayName(displayName);
        setRequired(required);
        setReadOnly(readOnly);
        setValue(value);
        setError(error);
        setEncrypted(encrypted);
        setIsPassword(isPassword);
        setValidValues(validValues);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getDisplayName()
    {
        return this.displayName;
    }

    public void setDisplayName(String value)
    {
        this.displayName = value;
    }

    public boolean isRequired()
    {
        return this.required;
    }

    public void setRequired(boolean value)
    {
        this.required = value;
    }

    public boolean isReadOnly()
    {
        return this.readOnly;
    }

    public void setReadOnly(boolean value)
    {
        this.readOnly = value;
    }

    public String getValue()
    {
        return this.value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    public String getError()
    {
        return this.error;
    }

    public void setError(String value)
    {
        this.error = value;
    }

    public boolean isEncrypted()
    {
        return this.encrypted;
    }

    public void setEncrypted(boolean value)
    {
        this.encrypted = value;
    }

    public boolean isIsPassword()
    {
        return this.isPassword;
    }

    public void setIsPassword(boolean value)
    {
        this.isPassword = value;
    }

    public _ValidValue[] getValidValues()
    {
        return this.validValues;
    }

    public void setValidValues(_ValidValue[] value)
    {
        this.validValues = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "DisplayName",
            this.displayName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Required",
            this.required);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReadOnly",
            this.readOnly);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Value",
            this.value);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Error",
            this.error);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Encrypted",
            this.encrypted);
        XMLStreamWriterHelper.writeElement(
            writer,
            "IsPassword",
            this.isPassword);

        if (this.validValues != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ValidValues");

            for (int iterator0 = 0; iterator0 < this.validValues.length; iterator0++)
            {
                this.validValues[iterator0].writeAsElement(
                    writer,
                    "Value");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DisplayName"))
                {
                    this.displayName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Required"))
                {
                    this.required = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ReadOnly"))
                {
                    this.readOnly = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Value"))
                {
                    this.value = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Error"))
                {
                    this.error = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Encrypted"))
                {
                    this.encrypted = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("IsPassword"))
                {
                    this.isPassword = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ValidValues"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ValidValue complexObject0 = new _ValidValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.validValues = (_ValidValue[]) list0.toArray(new _ValidValue[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
