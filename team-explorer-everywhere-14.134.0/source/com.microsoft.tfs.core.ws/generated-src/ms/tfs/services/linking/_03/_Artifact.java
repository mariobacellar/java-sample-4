// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.linking._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.linking._03._Artifact;
import ms.tfs.services.linking._03._ExtendedAttribute;
import ms.tfs.services.linking._03._OutboundLink;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Artifact
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String uri;
    protected String artifactTitle;
    protected String externalId;
    protected _ExtendedAttribute[] extendedAttributes;
    protected _OutboundLink[] outboundLinks;

    public _Artifact()
    {
        super();
    }

    public _Artifact(
        final String uri,
        final String artifactTitle,
        final String externalId,
        final _ExtendedAttribute[] extendedAttributes,
        final _OutboundLink[] outboundLinks)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setArtifactTitle(artifactTitle);
        setExternalId(externalId);
        setExtendedAttributes(extendedAttributes);
        setOutboundLinks(outboundLinks);
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(String value)
    {
        this.uri = value;
    }

    public String getArtifactTitle()
    {
        return this.artifactTitle;
    }

    public void setArtifactTitle(String value)
    {
        this.artifactTitle = value;
    }

    public String getExternalId()
    {
        return this.externalId;
    }

    public void setExternalId(String value)
    {
        this.externalId = value;
    }

    public _ExtendedAttribute[] getExtendedAttributes()
    {
        return this.extendedAttributes;
    }

    public void setExtendedAttributes(_ExtendedAttribute[] value)
    {
        this.extendedAttributes = value;
    }

    public _OutboundLink[] getOutboundLinks()
    {
        return this.outboundLinks;
    }

    public void setOutboundLinks(_OutboundLink[] value)
    {
        this.outboundLinks = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ArtifactTitle",
            this.artifactTitle);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ExternalId",
            this.externalId);

        if (this.extendedAttributes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ExtendedAttributes");

            for (int iterator0 = 0; iterator0 < this.extendedAttributes.length; iterator0++)
            {
                this.extendedAttributes[iterator0].writeAsElement(
                    writer,
                    "ExtendedAttribute");
            }

            writer.writeEndElement();
        }

        if (this.outboundLinks != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("OutboundLinks");

            for (int iterator0 = 0; iterator0 < this.outboundLinks.length; iterator0++)
            {
                this.outboundLinks[iterator0].writeAsElement(
                    writer,
                    "OutboundLink");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Uri"))
                {
                    this.uri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ArtifactTitle"))
                {
                    this.artifactTitle = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ExternalId"))
                {
                    this.externalId = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ExtendedAttributes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ExtendedAttribute complexObject0 = new _ExtendedAttribute();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.extendedAttributes = (_ExtendedAttribute[]) list0.toArray(
                            new _ExtendedAttribute[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("OutboundLinks"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _OutboundLink complexObject0 = new _OutboundLink();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.outboundLinks = (_OutboundLink[]) list0.toArray(new _OutboundLink[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
