// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._AccessEntry;
import ms.tfs.versioncontrol.clientservices._03._ItemSecurity;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ItemSecurity
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected boolean inherit = true;
    protected String item;
    protected boolean mod = true;

    // Elements
    protected _AccessEntry[] entries;

    public _ItemSecurity()
    {
        super();
    }

    public _ItemSecurity(
        final boolean inherit,
        final String item,
        final boolean mod,
        final _AccessEntry[] entries)
    {
        // TODO : Call super() instead of setting all fields directly?
        setInherit(inherit);
        setItem(item);
        setMod(mod);
        setEntries(entries);
    }

    public boolean isInherit()
    {
        return this.inherit;
    }

    public void setInherit(final boolean value)
    {
        this.inherit = value;
    }

    public String getItem()
    {
        return this.item;
    }

    public void setItem(final String value)
    {
        this.item = value;
    }

    public boolean isMod()
    {
        return this.mod;
    }

    public void setMod(final boolean value)
    {
        this.mod = value;
    }

    public _AccessEntry[] getEntries()
    {
        return this.entries;
    }

    public void setEntries(_AccessEntry[] value)
    {
        this.entries = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "inherit",
            this.inherit);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "item",
            this.item);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "mod",
            this.mod);

        // Elements
        if (this.entries != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Entries");

            for (int iterator0 = 0; iterator0 < this.entries.length; iterator0++)
            {
                this.entries[iterator0].writeAsElement(
                    writer,
                    "AccessEntry");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("inherit"))
            {
                this.inherit = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("item"))
            {
                this.item = attributeValue;
            }
            else if (localName.equalsIgnoreCase("mod"))
            {
                this.mod = XMLConvert.toBoolean(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Entries"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _AccessEntry complexObject0 = new _AccessEntry();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.entries = (_AccessEntry[]) list0.toArray(new _AccessEntry[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
