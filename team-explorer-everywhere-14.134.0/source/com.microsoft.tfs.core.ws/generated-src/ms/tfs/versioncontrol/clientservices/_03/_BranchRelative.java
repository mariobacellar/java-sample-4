// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._BranchRelative;
import ms.tfs.versioncontrol.clientservices._03._Item;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BranchRelative
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int reltoid;
    protected int relfromid;
    protected boolean reqstd = false;
    protected int bctype;

    // Elements
    protected _Item branchFromItem;
    protected _Item branchToItem;

    public _BranchRelative()
    {
        super();
    }

    public _BranchRelative(
        final int reltoid,
        final int relfromid,
        final boolean reqstd,
        final int bctype,
        final _Item branchFromItem,
        final _Item branchToItem)
    {
        // TODO : Call super() instead of setting all fields directly?
        setReltoid(reltoid);
        setRelfromid(relfromid);
        setReqstd(reqstd);
        setBctype(bctype);
        setBranchFromItem(branchFromItem);
        setBranchToItem(branchToItem);
    }

    public int getReltoid()
    {
        return this.reltoid;
    }

    public void setReltoid(final int value)
    {
        this.reltoid = value;
    }

    public int getRelfromid()
    {
        return this.relfromid;
    }

    public void setRelfromid(final int value)
    {
        this.relfromid = value;
    }

    public boolean isReqstd()
    {
        return this.reqstd;
    }

    public void setReqstd(final boolean value)
    {
        this.reqstd = value;
    }

    public int getBctype()
    {
        return this.bctype;
    }

    public void setBctype(final int value)
    {
        this.bctype = value;
    }

    public _Item getBranchFromItem()
    {
        return this.branchFromItem;
    }

    public void setBranchFromItem(_Item value)
    {
        this.branchFromItem = value;
    }

    public _Item getBranchToItem()
    {
        return this.branchToItem;
    }

    public void setBranchToItem(_Item value)
    {
        this.branchToItem = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "reltoid",
            this.reltoid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "relfromid",
            this.relfromid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "reqstd",
            this.reqstd);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "bctype",
            this.bctype);

        // Elements
        if (this.branchFromItem != null)
        {
            this.branchFromItem.writeAsElement(
                writer,
                "BranchFromItem");
        }

        if (this.branchToItem != null)
        {
            this.branchToItem.writeAsElement(
                writer,
                "BranchToItem");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("reltoid"))
            {
                this.reltoid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("relfromid"))
            {
                this.relfromid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("reqstd"))
            {
                this.reqstd = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("bctype"))
            {
                this.bctype = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("BranchFromItem"))
                {
                    this.branchFromItem = new _Item();
                    this.branchFromItem.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("BranchToItem"))
                {
                    this.branchToItem = new _Item();
                    this.branchToItem.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
