// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildDeletionResult;
import ms.tfs.build.buildservice._04._Failure;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDeletionResult
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _Failure labelFailure;
    protected _Failure dropLocationFailure;
    protected _Failure testResultFailure;
    protected _Failure symbolsFailure;

    public _BuildDeletionResult()
    {
        super();
    }

    public _BuildDeletionResult(
        final _Failure labelFailure,
        final _Failure dropLocationFailure,
        final _Failure testResultFailure,
        final _Failure symbolsFailure)
    {
        // TODO : Call super() instead of setting all fields directly?
        setLabelFailure(labelFailure);
        setDropLocationFailure(dropLocationFailure);
        setTestResultFailure(testResultFailure);
        setSymbolsFailure(symbolsFailure);
    }

    public _Failure getLabelFailure()
    {
        return this.labelFailure;
    }

    public void setLabelFailure(_Failure value)
    {
        this.labelFailure = value;
    }

    public _Failure getDropLocationFailure()
    {
        return this.dropLocationFailure;
    }

    public void setDropLocationFailure(_Failure value)
    {
        this.dropLocationFailure = value;
    }

    public _Failure getTestResultFailure()
    {
        return this.testResultFailure;
    }

    public void setTestResultFailure(_Failure value)
    {
        this.testResultFailure = value;
    }

    public _Failure getSymbolsFailure()
    {
        return this.symbolsFailure;
    }

    public void setSymbolsFailure(_Failure value)
    {
        this.symbolsFailure = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.labelFailure != null)
        {
            this.labelFailure.writeAsElement(
                writer,
                "LabelFailure");
        }

        if (this.dropLocationFailure != null)
        {
            this.dropLocationFailure.writeAsElement(
                writer,
                "DropLocationFailure");
        }

        if (this.testResultFailure != null)
        {
            this.testResultFailure.writeAsElement(
                writer,
                "TestResultFailure");
        }

        if (this.symbolsFailure != null)
        {
            this.symbolsFailure.writeAsElement(
                writer,
                "SymbolsFailure");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("LabelFailure"))
                {
                    this.labelFailure = new _Failure();
                    this.labelFailure.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DropLocationFailure"))
                {
                    this.dropLocationFailure = new _Failure();
                    this.dropLocationFailure.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("TestResultFailure"))
                {
                    this.testResultFailure = new _Failure();
                    this.testResultFailure.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("SymbolsFailure"))
                {
                    this.symbolsFailure = new _Failure();
                    this.symbolsFailure.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
