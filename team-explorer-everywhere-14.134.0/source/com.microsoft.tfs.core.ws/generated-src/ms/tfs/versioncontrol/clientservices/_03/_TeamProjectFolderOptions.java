// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldDefinition;
import ms.tfs.versioncontrol.clientservices._03._TeamProjectFolderOptions;
import ms.tfs.versioncontrol.clientservices._03._TeamProjectFolderPermission;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _TeamProjectFolderOptions
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected boolean exc = false;
    protected boolean gloc = false;

    // Elements
    protected String teamProject;
    protected String sourceProject;
    protected String comment;
    protected _TeamProjectFolderPermission[] permissions;
    protected _CheckinNoteFieldDefinition[] checkinNoteDefinition;

    public _TeamProjectFolderOptions()
    {
        super();
    }

    public _TeamProjectFolderOptions(
        final boolean exc,
        final boolean gloc,
        final String teamProject,
        final String sourceProject,
        final String comment,
        final _TeamProjectFolderPermission[] permissions,
        final _CheckinNoteFieldDefinition[] checkinNoteDefinition)
    {
        // TODO : Call super() instead of setting all fields directly?
        setExc(exc);
        setGloc(gloc);
        setTeamProject(teamProject);
        setSourceProject(sourceProject);
        setComment(comment);
        setPermissions(permissions);
        setCheckinNoteDefinition(checkinNoteDefinition);
    }

    public boolean isExc()
    {
        return this.exc;
    }

    public void setExc(final boolean value)
    {
        this.exc = value;
    }

    public boolean isGloc()
    {
        return this.gloc;
    }

    public void setGloc(final boolean value)
    {
        this.gloc = value;
    }

    public String getTeamProject()
    {
        return this.teamProject;
    }

    public void setTeamProject(String value)
    {
        this.teamProject = value;
    }

    public String getSourceProject()
    {
        return this.sourceProject;
    }

    public void setSourceProject(String value)
    {
        this.sourceProject = value;
    }

    public String getComment()
    {
        return this.comment;
    }

    public void setComment(String value)
    {
        this.comment = value;
    }

    public _TeamProjectFolderPermission[] getPermissions()
    {
        return this.permissions;
    }

    public void setPermissions(_TeamProjectFolderPermission[] value)
    {
        this.permissions = value;
    }

    public _CheckinNoteFieldDefinition[] getCheckinNoteDefinition()
    {
        return this.checkinNoteDefinition;
    }

    public void setCheckinNoteDefinition(_CheckinNoteFieldDefinition[] value)
    {
        this.checkinNoteDefinition = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "exc",
            this.exc);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "gloc",
            this.gloc);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamProject",
            this.teamProject);
        XMLStreamWriterHelper.writeElement(
            writer,
            "SourceProject",
            this.sourceProject);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Comment",
            this.comment);

        if (this.permissions != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Permissions");

            for (int iterator0 = 0; iterator0 < this.permissions.length; iterator0++)
            {
                this.permissions[iterator0].writeAsElement(
                    writer,
                    "TeamProjectFolderPermission");
            }

            writer.writeEndElement();
        }

        if (this.checkinNoteDefinition != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("CheckinNoteDefinition");

            for (int iterator0 = 0; iterator0 < this.checkinNoteDefinition.length; iterator0++)
            {
                this.checkinNoteDefinition[iterator0].writeAsElement(
                    writer,
                    "CheckinNoteFieldDefinition");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("exc"))
            {
                this.exc = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("gloc"))
            {
                this.gloc = XMLConvert.toBoolean(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("TeamProject"))
                {
                    this.teamProject = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("SourceProject"))
                {
                    this.sourceProject = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Comment"))
                {
                    this.comment = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Permissions"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _TeamProjectFolderPermission complexObject0 = new _TeamProjectFolderPermission();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissions = (_TeamProjectFolderPermission[]) list0.toArray(
                                new _TeamProjectFolderPermission[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("CheckinNoteDefinition"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CheckinNoteFieldDefinition complexObject0 = new _CheckinNoteFieldDefinition();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.checkinNoteDefinition = (_CheckinNoteFieldDefinition[]) list0.toArray(
                                new _CheckinNoteFieldDefinition[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
