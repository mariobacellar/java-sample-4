// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._BranchObject;
import ms.tfs.versioncontrol.clientservices._03._BranchProperties;
import ms.tfs.versioncontrol.clientservices._03._ItemIdentifier;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BranchObject
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _BranchProperties properties;
    protected Calendar dateCreated;
    protected _ItemIdentifier[] childBranches;
    protected _ItemIdentifier[] relatedBranches;

    public _BranchObject()
    {
        super();
    }

    public _BranchObject(
        final _BranchProperties properties,
        final Calendar dateCreated,
        final _ItemIdentifier[] childBranches,
        final _ItemIdentifier[] relatedBranches)
    {
        // TODO : Call super() instead of setting all fields directly?
        setProperties(properties);
        setDateCreated(dateCreated);
        setChildBranches(childBranches);
        setRelatedBranches(relatedBranches);
    }

    public _BranchProperties getProperties()
    {
        return this.properties;
    }

    public void setProperties(_BranchProperties value)
    {
        this.properties = value;
    }

    public Calendar getDateCreated()
    {
        return this.dateCreated;
    }

    public void setDateCreated(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'DateCreated' is a required element, its value cannot be null");
        }

        this.dateCreated = value;
    }

    public _ItemIdentifier[] getChildBranches()
    {
        return this.childBranches;
    }

    public void setChildBranches(_ItemIdentifier[] value)
    {
        this.childBranches = value;
    }

    public _ItemIdentifier[] getRelatedBranches()
    {
        return this.relatedBranches;
    }

    public void setRelatedBranches(_ItemIdentifier[] value)
    {
        this.relatedBranches = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.properties != null)
        {
            this.properties.writeAsElement(
                writer,
                "Properties");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "DateCreated",
            this.dateCreated,
            true);

        if (this.childBranches != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ChildBranches");

            for (int iterator0 = 0; iterator0 < this.childBranches.length; iterator0++)
            {
                this.childBranches[iterator0].writeAsElement(
                    writer,
                    "ItemIdentifier");
            }

            writer.writeEndElement();
        }

        if (this.relatedBranches != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("RelatedBranches");

            for (int iterator0 = 0; iterator0 < this.relatedBranches.length; iterator0++)
            {
                this.relatedBranches[iterator0].writeAsElement(
                    writer,
                    "ItemIdentifier");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Properties"))
                {
                    this.properties = new _BranchProperties();
                    this.properties.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DateCreated"))
                {
                    this.dateCreated = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("ChildBranches"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ItemIdentifier complexObject0 = new _ItemIdentifier();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.childBranches = (_ItemIdentifier[]) list0.toArray(new _ItemIdentifier[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("RelatedBranches"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ItemIdentifier complexObject0 = new _ItemIdentifier();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.relatedBranches = (_ItemIdentifier[]) list0.toArray(new _ItemIdentifier[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
