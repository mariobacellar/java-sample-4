// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildinfo._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildinfo._03._BuildData;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String buildTypeFileUri;
    protected String buildMachine;
    protected String dropLocation;
    protected String buildStatus;
    protected Calendar startTime;
    protected String buildType;
    protected String requestedBy;
    protected String teamProject;
    protected String buildNumber;
    protected String buildQuality;
    protected String buildUri;
    protected Calendar finishTime;
    protected String logLocation;
    protected String lastChangedBy;
    protected Calendar lastChangedOn;
    protected int buildStatusId;
    protected boolean goodBuild;

    public _BuildData()
    {
        super();
    }

    public _BuildData(
        final String buildTypeFileUri,
        final String buildMachine,
        final String dropLocation,
        final String buildStatus,
        final Calendar startTime,
        final String buildType,
        final String requestedBy,
        final String teamProject,
        final String buildNumber,
        final String buildQuality,
        final String buildUri,
        final Calendar finishTime,
        final String logLocation,
        final String lastChangedBy,
        final Calendar lastChangedOn,
        final int buildStatusId,
        final boolean goodBuild)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBuildTypeFileUri(buildTypeFileUri);
        setBuildMachine(buildMachine);
        setDropLocation(dropLocation);
        setBuildStatus(buildStatus);
        setStartTime(startTime);
        setBuildType(buildType);
        setRequestedBy(requestedBy);
        setTeamProject(teamProject);
        setBuildNumber(buildNumber);
        setBuildQuality(buildQuality);
        setBuildUri(buildUri);
        setFinishTime(finishTime);
        setLogLocation(logLocation);
        setLastChangedBy(lastChangedBy);
        setLastChangedOn(lastChangedOn);
        setBuildStatusId(buildStatusId);
        setGoodBuild(goodBuild);
    }

    public String getBuildTypeFileUri()
    {
        return this.buildTypeFileUri;
    }

    public void setBuildTypeFileUri(String value)
    {
        this.buildTypeFileUri = value;
    }

    public String getBuildMachine()
    {
        return this.buildMachine;
    }

    public void setBuildMachine(String value)
    {
        this.buildMachine = value;
    }

    public String getDropLocation()
    {
        return this.dropLocation;
    }

    public void setDropLocation(String value)
    {
        this.dropLocation = value;
    }

    public String getBuildStatus()
    {
        return this.buildStatus;
    }

    public void setBuildStatus(String value)
    {
        this.buildStatus = value;
    }

    public Calendar getStartTime()
    {
        return this.startTime;
    }

    public void setStartTime(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'StartTime' is a required element, its value cannot be null");
        }

        this.startTime = value;
    }

    public String getBuildType()
    {
        return this.buildType;
    }

    public void setBuildType(String value)
    {
        this.buildType = value;
    }

    public String getRequestedBy()
    {
        return this.requestedBy;
    }

    public void setRequestedBy(String value)
    {
        this.requestedBy = value;
    }

    public String getTeamProject()
    {
        return this.teamProject;
    }

    public void setTeamProject(String value)
    {
        this.teamProject = value;
    }

    public String getBuildNumber()
    {
        return this.buildNumber;
    }

    public void setBuildNumber(String value)
    {
        this.buildNumber = value;
    }

    public String getBuildQuality()
    {
        return this.buildQuality;
    }

    public void setBuildQuality(String value)
    {
        this.buildQuality = value;
    }

    public String getBuildUri()
    {
        return this.buildUri;
    }

    public void setBuildUri(String value)
    {
        this.buildUri = value;
    }

    public Calendar getFinishTime()
    {
        return this.finishTime;
    }

    public void setFinishTime(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'FinishTime' is a required element, its value cannot be null");
        }

        this.finishTime = value;
    }

    public String getLogLocation()
    {
        return this.logLocation;
    }

    public void setLogLocation(String value)
    {
        this.logLocation = value;
    }

    public String getLastChangedBy()
    {
        return this.lastChangedBy;
    }

    public void setLastChangedBy(String value)
    {
        this.lastChangedBy = value;
    }

    public Calendar getLastChangedOn()
    {
        return this.lastChangedOn;
    }

    public void setLastChangedOn(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'LastChangedOn' is a required element, its value cannot be null");
        }

        this.lastChangedOn = value;
    }

    public int getBuildStatusId()
    {
        return this.buildStatusId;
    }

    public void setBuildStatusId(int value)
    {
        this.buildStatusId = value;
    }

    public boolean isGoodBuild()
    {
        return this.goodBuild;
    }

    public void setGoodBuild(boolean value)
    {
        this.goodBuild = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildTypeFileUri",
            this.buildTypeFileUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildMachine",
            this.buildMachine);
        XMLStreamWriterHelper.writeElement(
            writer,
            "DropLocation",
            this.dropLocation);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildStatus",
            this.buildStatus);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StartTime",
            this.startTime,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildType",
            this.buildType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "RequestedBy",
            this.requestedBy);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamProject",
            this.teamProject);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildNumber",
            this.buildNumber);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildQuality",
            this.buildQuality);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildUri",
            this.buildUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "FinishTime",
            this.finishTime,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LogLocation",
            this.logLocation);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LastChangedBy",
            this.lastChangedBy);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LastChangedOn",
            this.lastChangedOn,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildStatusId",
            this.buildStatusId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "GoodBuild",
            this.goodBuild);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("BuildTypeFileUri"))
                {
                    this.buildTypeFileUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildMachine"))
                {
                    this.buildMachine = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DropLocation"))
                {
                    this.dropLocation = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildStatus"))
                {
                    this.buildStatus = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("StartTime"))
                {
                    this.startTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("BuildType"))
                {
                    this.buildType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("RequestedBy"))
                {
                    this.requestedBy = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TeamProject"))
                {
                    this.teamProject = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildNumber"))
                {
                    this.buildNumber = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildQuality"))
                {
                    this.buildQuality = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildUri"))
                {
                    this.buildUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("FinishTime"))
                {
                    this.finishTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("LogLocation"))
                {
                    this.logLocation = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("LastChangedBy"))
                {
                    this.lastChangedBy = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("LastChangedOn"))
                {
                    this.lastChangedOn = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("BuildStatusId"))
                {
                    this.buildStatusId = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("GoodBuild"))
                {
                    this.goodBuild = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
