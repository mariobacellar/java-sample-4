// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_QueryPendingChangesById;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _RepositorySoap_QueryPendingChangesById
    implements ElementSerializable
{
    // No attributes    

    // Elements
    protected int[] pendingChangeIds;
    protected boolean generateDownloadUrls;

    public _RepositorySoap_QueryPendingChangesById()
    {
        super();
    }

    public _RepositorySoap_QueryPendingChangesById(
        final int[] pendingChangeIds,
        final boolean generateDownloadUrls)
    {
        // TODO : Call super() instead of setting all fields directly?
        setPendingChangeIds(pendingChangeIds);
        setGenerateDownloadUrls(generateDownloadUrls);
    }

    public int[] getPendingChangeIds()
    {
        return this.pendingChangeIds;
    }

    public void setPendingChangeIds(int[] value)
    {
        this.pendingChangeIds = value;
    }

    public boolean isGenerateDownloadUrls()
    {
        return this.generateDownloadUrls;
    }

    public void setGenerateDownloadUrls(boolean value)
    {
        this.generateDownloadUrls = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.pendingChangeIds != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("pendingChangeIds");

            for (int iterator0 = 0; iterator0 < this.pendingChangeIds.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "int",
                    this.pendingChangeIds[iterator0]);
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "generateDownloadUrls",
            this.generateDownloadUrls);

        writer.writeEndElement();
    }
}
