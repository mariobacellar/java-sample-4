// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildDefinitionSpec;
import ms.tfs.build.buildservice._03._ContinuousIntegrationType;
import ms.tfs.build.buildservice._03._QueryOptions;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDefinitionSpec
    extends _BuildGroupItemSpec
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _ContinuousIntegrationType continuousIntegrationType = new _ContinuousIntegrationType(
                new _ContinuousIntegrationType._ContinuousIntegrationType_Flag[]
                {
                    _ContinuousIntegrationType._ContinuousIntegrationType_Flag.All
                });
    protected _QueryOptions options = new _QueryOptions(
                new _QueryOptions._QueryOptions_Flag[] { _QueryOptions._QueryOptions_Flag.All });

    public _BuildDefinitionSpec()
    {
        super();
    }

    public _BuildDefinitionSpec(
        final String fullPath,
        final _ContinuousIntegrationType continuousIntegrationType,
        final _QueryOptions options)
    {
        // TODO : Call super() instead of setting all fields directly?
        setFullPath(fullPath);
        setContinuousIntegrationType(continuousIntegrationType);
        setOptions(options);
    }

    public _ContinuousIntegrationType getContinuousIntegrationType()
    {
        return this.continuousIntegrationType;
    }

    public void setContinuousIntegrationType(_ContinuousIntegrationType value)
    {
        this.continuousIntegrationType = value;
    }

    public _QueryOptions getOptions()
    {
        return this.options;
    }

    public void setOptions(_QueryOptions value)
    {
        this.options = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "BuildDefinitionSpec");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FullPath",
            this.fullPath);

        // Elements
        if (this.continuousIntegrationType != null)
        {
            this.continuousIntegrationType.writeAsElement(
                writer,
                "ContinuousIntegrationType");
        }

        if (this.options != null)
        {
            this.options.writeAsElement(
                writer,
                "Options");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("FullPath"))
            {
                this.fullPath = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ContinuousIntegrationType"))
                {
                    this.continuousIntegrationType = new _ContinuousIntegrationType();
                    this.continuousIntegrationType.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Options"))
                {
                    this.options = new _QueryOptions();
                    this.options.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
