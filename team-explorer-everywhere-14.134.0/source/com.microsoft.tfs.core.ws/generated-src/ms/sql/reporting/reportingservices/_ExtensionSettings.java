// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ArrayOfChoice1;
import ms.sql.reporting.reportingservices._ExtensionSettings;
import ms.sql.reporting.reportingservices._ParameterFieldReference;
import ms.sql.reporting.reportingservices._ParameterValue;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ExtensionSettings
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String extension;
    protected _ArrayOfChoice1 parameterValues;

    public _ExtensionSettings()
    {
        super();
    }

    public _ExtensionSettings(
        final String extension,
        final _ArrayOfChoice1 parameterValues)
    {
        // TODO : Call super() instead of setting all fields directly?
        setExtension(extension);
        setParameterValues(parameterValues);
    }

    public String getExtension()
    {
        return this.extension;
    }

    public void setExtension(String value)
    {
        this.extension = value;
    }

    public _ArrayOfChoice1 getParameterValues()
    {
        return this.parameterValues;
    }

    public void setParameterValues(_ArrayOfChoice1 value)
    {
        this.parameterValues = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Extension",
            this.extension);

        if (this.parameterValues != null)
        {
            this.parameterValues.writeAsElement(
                writer,
                "ParameterValues");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Extension"))
                {
                    this.extension = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ParameterValues"))
                {
                    this.parameterValues = new _ArrayOfChoice1();
                    this.parameterValues.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
