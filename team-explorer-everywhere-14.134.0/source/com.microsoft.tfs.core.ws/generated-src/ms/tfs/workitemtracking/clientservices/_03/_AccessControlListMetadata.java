// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.workitemtracking.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.workitemtracking.clientservices._03._AccessControlListMetadata;
import ms.tfs.workitemtracking.clientservices._03._RequiredPermissions;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _AccessControlListMetadata
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String objectClassId;
    protected String[] permissionNames;
    protected String[] permissionDisplayStrings;
    protected String[] permissionDescriptions;
    protected _RequiredPermissions[] permissionRequirements;
    protected String fullSelectionPermission;
    protected String[] irrevocableAdminPermissions;

    public _AccessControlListMetadata()
    {
        super();
    }

    public _AccessControlListMetadata(
        final String objectClassId,
        final String[] permissionNames,
        final String[] permissionDisplayStrings,
        final String[] permissionDescriptions,
        final _RequiredPermissions[] permissionRequirements,
        final String fullSelectionPermission,
        final String[] irrevocableAdminPermissions)
    {
        // TODO : Call super() instead of setting all fields directly?
        setObjectClassId(objectClassId);
        setPermissionNames(permissionNames);
        setPermissionDisplayStrings(permissionDisplayStrings);
        setPermissionDescriptions(permissionDescriptions);
        setPermissionRequirements(permissionRequirements);
        setFullSelectionPermission(fullSelectionPermission);
        setIrrevocableAdminPermissions(irrevocableAdminPermissions);
    }

    public String getObjectClassId()
    {
        return this.objectClassId;
    }

    public void setObjectClassId(String value)
    {
        this.objectClassId = value;
    }

    public String[] getPermissionNames()
    {
        return this.permissionNames;
    }

    public void setPermissionNames(String[] value)
    {
        this.permissionNames = value;
    }

    public String[] getPermissionDisplayStrings()
    {
        return this.permissionDisplayStrings;
    }

    public void setPermissionDisplayStrings(String[] value)
    {
        this.permissionDisplayStrings = value;
    }

    public String[] getPermissionDescriptions()
    {
        return this.permissionDescriptions;
    }

    public void setPermissionDescriptions(String[] value)
    {
        this.permissionDescriptions = value;
    }

    public _RequiredPermissions[] getPermissionRequirements()
    {
        return this.permissionRequirements;
    }

    public void setPermissionRequirements(_RequiredPermissions[] value)
    {
        this.permissionRequirements = value;
    }

    public String getFullSelectionPermission()
    {
        return this.fullSelectionPermission;
    }

    public void setFullSelectionPermission(String value)
    {
        this.fullSelectionPermission = value;
    }

    public String[] getIrrevocableAdminPermissions()
    {
        return this.irrevocableAdminPermissions;
    }

    public void setIrrevocableAdminPermissions(String[] value)
    {
        this.irrevocableAdminPermissions = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ObjectClassId",
            this.objectClassId);

        if (this.permissionNames != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PermissionNames");

            for (int iterator0 = 0; iterator0 < this.permissionNames.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.permissionNames[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.permissionDisplayStrings != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PermissionDisplayStrings");

            for (int iterator0 = 0; iterator0 < this.permissionDisplayStrings.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.permissionDisplayStrings[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.permissionDescriptions != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PermissionDescriptions");

            for (int iterator0 = 0; iterator0 < this.permissionDescriptions.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.permissionDescriptions[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.permissionRequirements != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PermissionRequirements");

            for (int iterator0 = 0; iterator0 < this.permissionRequirements.length; iterator0++)
            {
                this.permissionRequirements[iterator0].writeAsElement(
                    writer,
                    "RequiredPermissions");
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "FullSelectionPermission",
            this.fullSelectionPermission);

        if (this.irrevocableAdminPermissions != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("IrrevocableAdminPermissions");

            for (int iterator0 = 0; iterator0 < this.irrevocableAdminPermissions.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.irrevocableAdminPermissions[iterator0]);
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ObjectClassId"))
                {
                    this.objectClassId = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("PermissionNames"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissionNames = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("PermissionDisplayStrings"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissionDisplayStrings = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("PermissionDescriptions"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissionDescriptions = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("PermissionRequirements"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RequiredPermissions complexObject0 = new _RequiredPermissions();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissionRequirements = (_RequiredPermissions[]) list0.toArray(
                                new _RequiredPermissions[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("FullSelectionPermission"))
                {
                    this.fullSelectionPermission = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("IrrevocableAdminPermissions"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.irrevocableAdminPermissions = (String[]) list0.toArray(new String[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
