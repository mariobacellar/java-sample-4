// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildDetail;
import ms.tfs.build.buildservice._03._BuildInformationNode;
import ms.tfs.build.buildservice._03._BuildPhaseStatus;
import ms.tfs.build.buildservice._03._BuildReason;
import ms.tfs.build.buildservice._03._BuildStatus;
import ms.tfs.build.buildservice._03._GetOption;
import ms.tfs.build.buildservice._03._InformationField;
import ms.tfs.build.buildservice._03._QueuePriority;
import ms.tfs.build.buildservice._03._QueueStatus;
import ms.tfs.build.buildservice._03._QueuedBuild2008;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _QueuedBuild2008
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int id;
    protected String buildAgentUri;
    protected String buildDefinitionUri;
    protected String dropLocation;
    protected Calendar queueTime;
    protected int queuePosition;
    protected _QueuePriority priority;
    protected _QueueStatus status;
    protected _GetOption getOption;
    protected String customGetVersion;
    protected String requestedFor;
    protected String requestedBy;

    // Elements
    protected String commandLineArguments;
    protected _BuildDetail build;

    public _QueuedBuild2008()
    {
        super();
    }

    public _QueuedBuild2008(
        final int id,
        final String buildAgentUri,
        final String buildDefinitionUri,
        final String dropLocation,
        final Calendar queueTime,
        final int queuePosition,
        final _QueuePriority priority,
        final _QueueStatus status,
        final _GetOption getOption,
        final String customGetVersion,
        final String requestedFor,
        final String requestedBy,
        final String commandLineArguments,
        final _BuildDetail build)
    {
        // TODO : Call super() instead of setting all fields directly?
        setId(id);
        setBuildAgentUri(buildAgentUri);
        setBuildDefinitionUri(buildDefinitionUri);
        setDropLocation(dropLocation);
        setQueueTime(queueTime);
        setQueuePosition(queuePosition);
        setPriority(priority);
        setStatus(status);
        setGetOption(getOption);
        setCustomGetVersion(customGetVersion);
        setRequestedFor(requestedFor);
        setRequestedBy(requestedBy);
        setCommandLineArguments(commandLineArguments);
        setBuild(build);
    }

    public int getId()
    {
        return this.id;
    }

    public void setId(final int value)
    {
        this.id = value;
    }

    public String getBuildAgentUri()
    {
        return this.buildAgentUri;
    }

    public void setBuildAgentUri(final String value)
    {
        this.buildAgentUri = value;
    }

    public String getBuildDefinitionUri()
    {
        return this.buildDefinitionUri;
    }

    public void setBuildDefinitionUri(final String value)
    {
        this.buildDefinitionUri = value;
    }

    public String getDropLocation()
    {
        return this.dropLocation;
    }

    public void setDropLocation(final String value)
    {
        this.dropLocation = value;
    }

    public Calendar getQueueTime()
    {
        return this.queueTime;
    }

    public void setQueueTime(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'QueueTime' is a required attribute, its value cannot be null");
        }

        this.queueTime = value;
    }

    public int getQueuePosition()
    {
        return this.queuePosition;
    }

    public void setQueuePosition(final int value)
    {
        this.queuePosition = value;
    }

    public _QueuePriority getPriority()
    {
        return this.priority;
    }

    public void setPriority(final _QueuePriority value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Priority' is a required attribute, its value cannot be null");
        }

        this.priority = value;
    }

    public _QueueStatus getStatus()
    {
        return this.status;
    }

    public void setStatus(final _QueueStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required attribute, its value cannot be null");
        }

        this.status = value;
    }

    public _GetOption getGetOption()
    {
        return this.getOption;
    }

    public void setGetOption(final _GetOption value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'GetOption' is a required attribute, its value cannot be null");
        }

        this.getOption = value;
    }

    public String getCustomGetVersion()
    {
        return this.customGetVersion;
    }

    public void setCustomGetVersion(final String value)
    {
        this.customGetVersion = value;
    }

    public String getRequestedFor()
    {
        return this.requestedFor;
    }

    public void setRequestedFor(final String value)
    {
        this.requestedFor = value;
    }

    public String getRequestedBy()
    {
        return this.requestedBy;
    }

    public void setRequestedBy(final String value)
    {
        this.requestedBy = value;
    }

    public String getCommandLineArguments()
    {
        return this.commandLineArguments;
    }

    public void setCommandLineArguments(String value)
    {
        this.commandLineArguments = value;
    }

    public _BuildDetail getBuild()
    {
        return this.build;
    }

    public void setBuild(_BuildDetail value)
    {
        this.build = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Id",
            this.id);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildAgentUri",
            this.buildAgentUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildDefinitionUri",
            this.buildDefinitionUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DropLocation",
            this.dropLocation);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "QueueTime",
            this.queueTime,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "QueuePosition",
            this.queuePosition);
        this.priority.writeAsAttribute(
            writer,
            "Priority");
        this.status.writeAsAttribute(
            writer,
            "Status");
        this.getOption.writeAsAttribute(
            writer,
            "GetOption");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "CustomGetVersion",
            this.customGetVersion);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequestedFor",
            this.requestedFor);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequestedBy",
            this.requestedBy);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "CommandLineArguments",
            this.commandLineArguments);

        if (this.build != null)
        {
            this.build.writeAsElement(
                writer,
                "Build");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Id"))
            {
                this.id = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildAgentUri"))
            {
                this.buildAgentUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("BuildDefinitionUri"))
            {
                this.buildDefinitionUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DropLocation"))
            {
                this.dropLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("QueueTime"))
            {
                this.queueTime = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("QueuePosition"))
            {
                this.queuePosition = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Priority"))
            {
                this.priority = _QueuePriority.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Status"))
            {
                this.status = new _QueueStatus();
                this.status.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("GetOption"))
            {
                this.getOption = _GetOption.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("CustomGetVersion"))
            {
                this.customGetVersion = attributeValue;
            }
            else if (localName.equalsIgnoreCase("RequestedFor"))
            {
                this.requestedFor = attributeValue;
            }
            else if (localName.equalsIgnoreCase("RequestedBy"))
            {
                this.requestedBy = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("CommandLineArguments"))
                {
                    this.commandLineArguments = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Build"))
                {
                    this.build = new _BuildDetail();
                    this.build.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
