// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.admin._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.admin._03._AdminRepositoryInfo;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _AdminRepositoryInfo
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int userCount;
    protected int groupCount;
    protected int workspaceCount;
    protected int shelvesetCount;
    protected int fileCount;
    protected int folderCount;
    protected int maxChangesetID;
    protected int pendingChangeCount;
    protected int shelvesetDeletedCount;

    // No elements    
    public _AdminRepositoryInfo()
    {
        super();
    }

    public _AdminRepositoryInfo(
        final int userCount,
        final int groupCount,
        final int workspaceCount,
        final int shelvesetCount,
        final int fileCount,
        final int folderCount,
        final int maxChangesetID,
        final int pendingChangeCount,
        final int shelvesetDeletedCount)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUserCount(userCount);
        setGroupCount(groupCount);
        setWorkspaceCount(workspaceCount);
        setShelvesetCount(shelvesetCount);
        setFileCount(fileCount);
        setFolderCount(folderCount);
        setMaxChangesetID(maxChangesetID);
        setPendingChangeCount(pendingChangeCount);
        setShelvesetDeletedCount(shelvesetDeletedCount);
    }

    public int getUserCount()
    {
        return this.userCount;
    }

    public void setUserCount(final int value)
    {
        this.userCount = value;
    }

    public int getGroupCount()
    {
        return this.groupCount;
    }

    public void setGroupCount(final int value)
    {
        this.groupCount = value;
    }

    public int getWorkspaceCount()
    {
        return this.workspaceCount;
    }

    public void setWorkspaceCount(final int value)
    {
        this.workspaceCount = value;
    }

    public int getShelvesetCount()
    {
        return this.shelvesetCount;
    }

    public void setShelvesetCount(final int value)
    {
        this.shelvesetCount = value;
    }

    public int getFileCount()
    {
        return this.fileCount;
    }

    public void setFileCount(final int value)
    {
        this.fileCount = value;
    }

    public int getFolderCount()
    {
        return this.folderCount;
    }

    public void setFolderCount(final int value)
    {
        this.folderCount = value;
    }

    public int getMaxChangesetID()
    {
        return this.maxChangesetID;
    }

    public void setMaxChangesetID(final int value)
    {
        this.maxChangesetID = value;
    }

    public int getPendingChangeCount()
    {
        return this.pendingChangeCount;
    }

    public void setPendingChangeCount(final int value)
    {
        this.pendingChangeCount = value;
    }

    public int getShelvesetDeletedCount()
    {
        return this.shelvesetDeletedCount;
    }

    public void setShelvesetDeletedCount(final int value)
    {
        this.shelvesetDeletedCount = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "UserCount",
            this.userCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "GroupCount",
            this.groupCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "WorkspaceCount",
            this.workspaceCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ShelvesetCount",
            this.shelvesetCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FileCount",
            this.fileCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FolderCount",
            this.folderCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "MaxChangesetID",
            this.maxChangesetID);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "PendingChangeCount",
            this.pendingChangeCount);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ShelvesetDeletedCount",
            this.shelvesetDeletedCount);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("UserCount"))
            {
                this.userCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("GroupCount"))
            {
                this.groupCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("WorkspaceCount"))
            {
                this.workspaceCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ShelvesetCount"))
            {
                this.shelvesetCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("FileCount"))
            {
                this.fileCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("FolderCount"))
            {
                this.folderCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("MaxChangesetID"))
            {
                this.maxChangesetID = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("PendingChangeCount"))
            {
                this.pendingChangeCount = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ShelvesetDeletedCount"))
            {
                this.shelvesetDeletedCount = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
