// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildinfo._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildinfo._03._ProjectData;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ProjectData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String projectFile;
    protected String parentProjectFile;
    protected String platformName;
    protected String flavourName;
    protected int compileErrors;
    protected int compileWarnings;
    protected int codeAnalysisErrors;
    protected int codeAnalysisWarnings;

    public _ProjectData()
    {
        super();
    }

    public _ProjectData(
        final String projectFile,
        final String parentProjectFile,
        final String platformName,
        final String flavourName,
        final int compileErrors,
        final int compileWarnings,
        final int codeAnalysisErrors,
        final int codeAnalysisWarnings)
    {
        // TODO : Call super() instead of setting all fields directly?
        setProjectFile(projectFile);
        setParentProjectFile(parentProjectFile);
        setPlatformName(platformName);
        setFlavourName(flavourName);
        setCompileErrors(compileErrors);
        setCompileWarnings(compileWarnings);
        setCodeAnalysisErrors(codeAnalysisErrors);
        setCodeAnalysisWarnings(codeAnalysisWarnings);
    }

    public String getProjectFile()
    {
        return this.projectFile;
    }

    public void setProjectFile(String value)
    {
        this.projectFile = value;
    }

    public String getParentProjectFile()
    {
        return this.parentProjectFile;
    }

    public void setParentProjectFile(String value)
    {
        this.parentProjectFile = value;
    }

    public String getPlatformName()
    {
        return this.platformName;
    }

    public void setPlatformName(String value)
    {
        this.platformName = value;
    }

    public String getFlavourName()
    {
        return this.flavourName;
    }

    public void setFlavourName(String value)
    {
        this.flavourName = value;
    }

    public int getCompileErrors()
    {
        return this.compileErrors;
    }

    public void setCompileErrors(int value)
    {
        this.compileErrors = value;
    }

    public int getCompileWarnings()
    {
        return this.compileWarnings;
    }

    public void setCompileWarnings(int value)
    {
        this.compileWarnings = value;
    }

    public int getCodeAnalysisErrors()
    {
        return this.codeAnalysisErrors;
    }

    public void setCodeAnalysisErrors(int value)
    {
        this.codeAnalysisErrors = value;
    }

    public int getCodeAnalysisWarnings()
    {
        return this.codeAnalysisWarnings;
    }

    public void setCodeAnalysisWarnings(int value)
    {
        this.codeAnalysisWarnings = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ProjectFile",
            this.projectFile);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ParentProjectFile",
            this.parentProjectFile);
        XMLStreamWriterHelper.writeElement(
            writer,
            "PlatformName",
            this.platformName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "FlavourName",
            this.flavourName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CompileErrors",
            this.compileErrors);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CompileWarnings",
            this.compileWarnings);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CodeAnalysisErrors",
            this.codeAnalysisErrors);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CodeAnalysisWarnings",
            this.codeAnalysisWarnings);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ProjectFile"))
                {
                    this.projectFile = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ParentProjectFile"))
                {
                    this.parentProjectFile = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("PlatformName"))
                {
                    this.platformName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("FlavourName"))
                {
                    this.flavourName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("CompileErrors"))
                {
                    this.compileErrors = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("CompileWarnings"))
                {
                    this.compileWarnings = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("CodeAnalysisErrors"))
                {
                    this.codeAnalysisErrors = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("CodeAnalysisWarnings"))
                {
                    this.codeAnalysisWarnings = XMLConvert.toInt(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
