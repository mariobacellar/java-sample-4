// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.classification._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.classification._03._NodeInfo;
import ms.tfs.services.classification._03._Property;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _NodeInfo
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String uri;
    protected String name;
    protected String path;
    protected String structureType;
    protected _Property[] properties;
    protected String parentUri;
    protected String projectUri;
    protected Calendar startDate;
    protected Calendar finishDate;

    public _NodeInfo()
    {
        super();
    }

    public _NodeInfo(
        final String uri,
        final String name,
        final String path,
        final String structureType,
        final _Property[] properties,
        final String parentUri,
        final String projectUri,
        final Calendar startDate,
        final Calendar finishDate)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setName(name);
        setPath(path);
        setStructureType(structureType);
        setProperties(properties);
        setParentUri(parentUri);
        setProjectUri(projectUri);
        setStartDate(startDate);
        setFinishDate(finishDate);
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(String value)
    {
        this.uri = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getPath()
    {
        return this.path;
    }

    public void setPath(String value)
    {
        this.path = value;
    }

    public String getStructureType()
    {
        return this.structureType;
    }

    public void setStructureType(String value)
    {
        this.structureType = value;
    }

    public _Property[] getProperties()
    {
        return this.properties;
    }

    public void setProperties(_Property[] value)
    {
        this.properties = value;
    }

    public String getParentUri()
    {
        return this.parentUri;
    }

    public void setParentUri(String value)
    {
        this.parentUri = value;
    }

    public String getProjectUri()
    {
        return this.projectUri;
    }

    public void setProjectUri(String value)
    {
        this.projectUri = value;
    }

    public Calendar getStartDate()
    {
        return this.startDate;
    }

    public void setStartDate(Calendar value)
    {
        this.startDate = value;
    }

    public Calendar getFinishDate()
    {
        return this.finishDate;
    }

    public void setFinishDate(Calendar value)
    {
        this.finishDate = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Path",
            this.path);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StructureType",
            this.structureType);

        if (this.properties != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Properties");

            for (int iterator0 = 0; iterator0 < this.properties.length; iterator0++)
            {
                this.properties[iterator0].writeAsElement(
                    writer,
                    "Property");
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "ParentUri",
            this.parentUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ProjectUri",
            this.projectUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StartDate",
            this.startDate,
            false);
        XMLStreamWriterHelper.writeElement(
            writer,
            "FinishDate",
            this.finishDate,
            false);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Uri"))
                {
                    this.uri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Path"))
                {
                    this.path = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("StructureType"))
                {
                    this.structureType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Properties"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _Property complexObject0 = new _Property();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.properties = (_Property[]) list0.toArray(new _Property[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("ParentUri"))
                {
                    this.parentUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ProjectUri"))
                {
                    this.projectUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("StartDate"))
                {
                    this.startDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            false);
                }
                else if (localName.equalsIgnoreCase("FinishDate"))
                {
                    this.finishDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            false);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
