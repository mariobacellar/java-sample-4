// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildinfo._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildinfo._03._BuildStepData;
import ms.tfs.build.buildinfo._03._BuildStepStatus;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildStepData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected long buildStepId;
    protected long parentBuildStepId;
    protected String buildStepName;
    protected String buildStepMessage;
    protected Calendar startTime;
    protected Calendar finishTime;
    protected _BuildStepStatus status;

    public _BuildStepData()
    {
        super();
    }

    public _BuildStepData(
        final long buildStepId,
        final long parentBuildStepId,
        final String buildStepName,
        final String buildStepMessage,
        final Calendar startTime,
        final Calendar finishTime,
        final _BuildStepStatus status)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBuildStepId(buildStepId);
        setParentBuildStepId(parentBuildStepId);
        setBuildStepName(buildStepName);
        setBuildStepMessage(buildStepMessage);
        setStartTime(startTime);
        setFinishTime(finishTime);
        setStatus(status);
    }

    public long getBuildStepId()
    {
        return this.buildStepId;
    }

    public void setBuildStepId(long value)
    {
        this.buildStepId = value;
    }

    public long getParentBuildStepId()
    {
        return this.parentBuildStepId;
    }

    public void setParentBuildStepId(long value)
    {
        this.parentBuildStepId = value;
    }

    public String getBuildStepName()
    {
        return this.buildStepName;
    }

    public void setBuildStepName(String value)
    {
        this.buildStepName = value;
    }

    public String getBuildStepMessage()
    {
        return this.buildStepMessage;
    }

    public void setBuildStepMessage(String value)
    {
        this.buildStepMessage = value;
    }

    public Calendar getStartTime()
    {
        return this.startTime;
    }

    public void setStartTime(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'StartTime' is a required element, its value cannot be null");
        }

        this.startTime = value;
    }

    public Calendar getFinishTime()
    {
        return this.finishTime;
    }

    public void setFinishTime(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'FinishTime' is a required element, its value cannot be null");
        }

        this.finishTime = value;
    }

    public _BuildStepStatus getStatus()
    {
        return this.status;
    }

    public void setStatus(_BuildStepStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required element, its value cannot be null");
        }

        this.status = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildStepId",
            this.buildStepId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ParentBuildStepId",
            this.parentBuildStepId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildStepName",
            this.buildStepName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildStepMessage",
            this.buildStepMessage);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StartTime",
            this.startTime,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "FinishTime",
            this.finishTime,
            true);
        this.status.writeAsElement(
            writer,
            "Status");

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("BuildStepId"))
                {
                    this.buildStepId = XMLConvert.toLong(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ParentBuildStepId"))
                {
                    this.parentBuildStepId = XMLConvert.toLong(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("BuildStepName"))
                {
                    this.buildStepName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildStepMessage"))
                {
                    this.buildStepMessage = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("StartTime"))
                {
                    this.startTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("FinishTime"))
                {
                    this.finishTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("Status"))
                {
                    this.status = _BuildStepStatus.fromString(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
