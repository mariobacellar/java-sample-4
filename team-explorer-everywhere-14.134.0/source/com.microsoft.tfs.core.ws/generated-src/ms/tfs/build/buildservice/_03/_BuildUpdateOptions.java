// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildPhaseStatus;
import ms.tfs.build.buildservice._03._BuildStatus;
import ms.tfs.build.buildservice._03._BuildUpdate;
import ms.tfs.build.buildservice._03._BuildUpdateOptions;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildUpdateOptions
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String uri;
    protected _BuildUpdate fields;
    protected String buildNumber;
    protected String dropLocation;
    protected String labelName;
    protected String logLocation;
    protected _BuildStatus status;
    protected String quality;
    protected _BuildPhaseStatus compilationStatus;
    protected _BuildPhaseStatus testStatus;
    protected boolean keepForever;
    protected String sourceGetVersion;

    // No elements    
    public _BuildUpdateOptions()
    {
        super();
    }

    public _BuildUpdateOptions(
        final String uri,
        final _BuildUpdate fields,
        final String buildNumber,
        final String dropLocation,
        final String labelName,
        final String logLocation,
        final _BuildStatus status,
        final String quality,
        final _BuildPhaseStatus compilationStatus,
        final _BuildPhaseStatus testStatus,
        final boolean keepForever,
        final String sourceGetVersion)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setFields(fields);
        setBuildNumber(buildNumber);
        setDropLocation(dropLocation);
        setLabelName(labelName);
        setLogLocation(logLocation);
        setStatus(status);
        setQuality(quality);
        setCompilationStatus(compilationStatus);
        setTestStatus(testStatus);
        setKeepForever(keepForever);
        setSourceGetVersion(sourceGetVersion);
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(final String value)
    {
        this.uri = value;
    }

    public _BuildUpdate getFields()
    {
        return this.fields;
    }

    public void setFields(final _BuildUpdate value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Fields' is a required attribute, its value cannot be null");
        }

        this.fields = value;
    }

    public String getBuildNumber()
    {
        return this.buildNumber;
    }

    public void setBuildNumber(final String value)
    {
        this.buildNumber = value;
    }

    public String getDropLocation()
    {
        return this.dropLocation;
    }

    public void setDropLocation(final String value)
    {
        this.dropLocation = value;
    }

    public String getLabelName()
    {
        return this.labelName;
    }

    public void setLabelName(final String value)
    {
        this.labelName = value;
    }

    public String getLogLocation()
    {
        return this.logLocation;
    }

    public void setLogLocation(final String value)
    {
        this.logLocation = value;
    }

    public _BuildStatus getStatus()
    {
        return this.status;
    }

    public void setStatus(final _BuildStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required attribute, its value cannot be null");
        }

        this.status = value;
    }

    public String getQuality()
    {
        return this.quality;
    }

    public void setQuality(final String value)
    {
        this.quality = value;
    }

    public _BuildPhaseStatus getCompilationStatus()
    {
        return this.compilationStatus;
    }

    public void setCompilationStatus(final _BuildPhaseStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'CompilationStatus' is a required attribute, its value cannot be null");
        }

        this.compilationStatus = value;
    }

    public _BuildPhaseStatus getTestStatus()
    {
        return this.testStatus;
    }

    public void setTestStatus(final _BuildPhaseStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'TestStatus' is a required attribute, its value cannot be null");
        }

        this.testStatus = value;
    }

    public boolean isKeepForever()
    {
        return this.keepForever;
    }

    public void setKeepForever(final boolean value)
    {
        this.keepForever = value;
    }

    public String getSourceGetVersion()
    {
        return this.sourceGetVersion;
    }

    public void setSourceGetVersion(final String value)
    {
        this.sourceGetVersion = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);
        this.fields.writeAsAttribute(
            writer,
            "Fields");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildNumber",
            this.buildNumber);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DropLocation",
            this.dropLocation);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LabelName",
            this.labelName);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LogLocation",
            this.logLocation);
        this.status.writeAsAttribute(
            writer,
            "Status");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Quality",
            this.quality);
        this.compilationStatus.writeAsAttribute(
            writer,
            "CompilationStatus");
        this.testStatus.writeAsAttribute(
            writer,
            "TestStatus");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "KeepForever",
            this.keepForever);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "SourceGetVersion",
            this.sourceGetVersion);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Fields"))
            {
                this.fields = new _BuildUpdate();
                this.fields.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildNumber"))
            {
                this.buildNumber = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DropLocation"))
            {
                this.dropLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LabelName"))
            {
                this.labelName = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LogLocation"))
            {
                this.logLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Status"))
            {
                this.status = new _BuildStatus();
                this.status.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Quality"))
            {
                this.quality = attributeValue;
            }
            else if (localName.equalsIgnoreCase("CompilationStatus"))
            {
                this.compilationStatus = _BuildPhaseStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("TestStatus"))
            {
                this.testStatus = _BuildPhaseStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("KeepForever"))
            {
                this.keepForever = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("SourceGetVersion"))
            {
                this.sourceGetVersion = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
