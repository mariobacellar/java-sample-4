// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.groupsecurity._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.authorization._03._SearchFactor;
import ms.tfs.services.groupsecurity._03._GroupSecurityServiceSoap_ReadIdentityFromSource;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _GroupSecurityServiceSoap_ReadIdentityFromSource
    implements ElementSerializable
{
    // No attributes    

    // Elements
    protected _SearchFactor factor;
    protected String factorValue;

    public _GroupSecurityServiceSoap_ReadIdentityFromSource()
    {
        super();
    }

    public _GroupSecurityServiceSoap_ReadIdentityFromSource(
        final _SearchFactor factor,
        final String factorValue)
    {
        // TODO : Call super() instead of setting all fields directly?
        setFactor(factor);
        setFactorValue(factorValue);
    }

    public _SearchFactor getFactor()
    {
        return this.factor;
    }

    public void setFactor(_SearchFactor value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'factor' is a required element, its value cannot be null");
        }

        this.factor = value;
    }

    public String getFactorValue()
    {
        return this.factorValue;
    }

    public void setFactorValue(String value)
    {
        this.factorValue = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        this.factor.writeAsElement(
            writer,
            "factor");
        XMLStreamWriterHelper.writeElement(
            writer,
            "factorValue",
            this.factorValue);

        writer.writeEndElement();
    }
}
