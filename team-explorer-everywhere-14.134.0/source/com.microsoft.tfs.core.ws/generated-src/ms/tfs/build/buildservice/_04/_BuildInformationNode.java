// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildInformationNode;
import ms.tfs.build.buildservice._04._InformationField;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildInformationNode
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int nodeId;
    protected int parentId;
    protected String type;
    protected Calendar lastModifiedDate;
    protected String lastModifiedBy;

    // Elements
    protected _InformationField[] fields;

    public _BuildInformationNode()
    {
        super();
    }

    public _BuildInformationNode(
        final int nodeId,
        final int parentId,
        final String type,
        final Calendar lastModifiedDate,
        final String lastModifiedBy,
        final _InformationField[] fields)
    {
        // TODO : Call super() instead of setting all fields directly?
        setNodeId(nodeId);
        setParentId(parentId);
        setType(type);
        setLastModifiedDate(lastModifiedDate);
        setLastModifiedBy(lastModifiedBy);
        setFields(fields);
    }

    public int getNodeId()
    {
        return this.nodeId;
    }

    public void setNodeId(final int value)
    {
        this.nodeId = value;
    }

    public int getParentId()
    {
        return this.parentId;
    }

    public void setParentId(final int value)
    {
        this.parentId = value;
    }

    public String getType()
    {
        return this.type;
    }

    public void setType(final String value)
    {
        this.type = value;
    }

    public Calendar getLastModifiedDate()
    {
        return this.lastModifiedDate;
    }

    public void setLastModifiedDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'LastModifiedDate' is a required attribute, its value cannot be null");
        }

        this.lastModifiedDate = value;
    }

    public String getLastModifiedBy()
    {
        return this.lastModifiedBy;
    }

    public void setLastModifiedBy(final String value)
    {
        this.lastModifiedBy = value;
    }

    public _InformationField[] getFields()
    {
        return this.fields;
    }

    public void setFields(_InformationField[] value)
    {
        this.fields = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "NodeId",
            this.nodeId);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ParentId",
            this.parentId);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Type",
            this.type);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastModifiedDate",
            this.lastModifiedDate,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastModifiedBy",
            this.lastModifiedBy);

        // Elements
        if (this.fields != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Fields");

            for (int iterator0 = 0; iterator0 < this.fields.length; iterator0++)
            {
                this.fields[iterator0].writeAsElement(
                    writer,
                    "InformationField");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("NodeId"))
            {
                this.nodeId = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ParentId"))
            {
                this.parentId = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Type"))
            {
                this.type = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastModifiedDate"))
            {
                this.lastModifiedDate = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("LastModifiedBy"))
            {
                this.lastModifiedBy = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Fields"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _InformationField complexObject0 = new _InformationField();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.fields = (_InformationField[]) list0.toArray(new _InformationField[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
