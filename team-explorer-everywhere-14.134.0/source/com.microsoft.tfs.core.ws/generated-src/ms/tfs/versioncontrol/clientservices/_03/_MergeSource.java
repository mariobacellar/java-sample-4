// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._MergeSource;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _MergeSource
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String s;
    protected int vf;
    protected int vt;
    protected boolean r = false;

    // No elements    
    public _MergeSource()
    {
        super();
    }

    public _MergeSource(
        final String s,
        final int vf,
        final int vt,
        final boolean r)
    {
        // TODO : Call super() instead of setting all fields directly?
        setS(s);
        setVf(vf);
        setVt(vt);
        setR(r);
    }

    public String getS()
    {
        return this.s;
    }

    public void setS(final String value)
    {
        this.s = value;
    }

    public int getVf()
    {
        return this.vf;
    }

    public void setVf(final int value)
    {
        this.vf = value;
    }

    public int getVt()
    {
        return this.vt;
    }

    public void setVt(final int value)
    {
        this.vt = value;
    }

    public boolean isR()
    {
        return this.r;
    }

    public void setR(final boolean value)
    {
        this.r = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "s",
            this.s);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "vf",
            this.vf);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "vt",
            this.vt);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "r",
            this.r);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("s"))
            {
                this.s = attributeValue;
            }
            else if (localName.equalsIgnoreCase("vf"))
            {
                this.vf = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("vt"))
            {
                this.vt = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("r"))
            {
                this.r = XMLConvert.toBoolean(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
