// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildcontroller._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildcontroller._03._BuildParameters;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildParameters
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String teamFoundationServer;
    protected String teamProject;
    protected String buildType;
    protected String buildDirectory;
    protected String buildNumber;
    protected String lastBuildNumber;
    protected String lastGoodBuildNumber;
    protected String buildUri;
    protected String buildMachine;
    protected String dropLocation;
    protected String requestedBy;

    public _BuildParameters()
    {
        super();
    }

    public _BuildParameters(
        final String teamFoundationServer,
        final String teamProject,
        final String buildType,
        final String buildDirectory,
        final String buildNumber,
        final String lastBuildNumber,
        final String lastGoodBuildNumber,
        final String buildUri,
        final String buildMachine,
        final String dropLocation,
        final String requestedBy)
    {
        // TODO : Call super() instead of setting all fields directly?
        setTeamFoundationServer(teamFoundationServer);
        setTeamProject(teamProject);
        setBuildType(buildType);
        setBuildDirectory(buildDirectory);
        setBuildNumber(buildNumber);
        setLastBuildNumber(lastBuildNumber);
        setLastGoodBuildNumber(lastGoodBuildNumber);
        setBuildUri(buildUri);
        setBuildMachine(buildMachine);
        setDropLocation(dropLocation);
        setRequestedBy(requestedBy);
    }

    public String getTeamFoundationServer()
    {
        return this.teamFoundationServer;
    }

    public void setTeamFoundationServer(String value)
    {
        this.teamFoundationServer = value;
    }

    public String getTeamProject()
    {
        return this.teamProject;
    }

    public void setTeamProject(String value)
    {
        this.teamProject = value;
    }

    public String getBuildType()
    {
        return this.buildType;
    }

    public void setBuildType(String value)
    {
        this.buildType = value;
    }

    public String getBuildDirectory()
    {
        return this.buildDirectory;
    }

    public void setBuildDirectory(String value)
    {
        this.buildDirectory = value;
    }

    public String getBuildNumber()
    {
        return this.buildNumber;
    }

    public void setBuildNumber(String value)
    {
        this.buildNumber = value;
    }

    public String getLastBuildNumber()
    {
        return this.lastBuildNumber;
    }

    public void setLastBuildNumber(String value)
    {
        this.lastBuildNumber = value;
    }

    public String getLastGoodBuildNumber()
    {
        return this.lastGoodBuildNumber;
    }

    public void setLastGoodBuildNumber(String value)
    {
        this.lastGoodBuildNumber = value;
    }

    public String getBuildUri()
    {
        return this.buildUri;
    }

    public void setBuildUri(String value)
    {
        this.buildUri = value;
    }

    public String getBuildMachine()
    {
        return this.buildMachine;
    }

    public void setBuildMachine(String value)
    {
        this.buildMachine = value;
    }

    public String getDropLocation()
    {
        return this.dropLocation;
    }

    public void setDropLocation(String value)
    {
        this.dropLocation = value;
    }

    public String getRequestedBy()
    {
        return this.requestedBy;
    }

    public void setRequestedBy(String value)
    {
        this.requestedBy = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamFoundationServer",
            this.teamFoundationServer);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamProject",
            this.teamProject);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildType",
            this.buildType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildDirectory",
            this.buildDirectory);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildNumber",
            this.buildNumber);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LastBuildNumber",
            this.lastBuildNumber);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LastGoodBuildNumber",
            this.lastGoodBuildNumber);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildUri",
            this.buildUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "BuildMachine",
            this.buildMachine);
        XMLStreamWriterHelper.writeElement(
            writer,
            "DropLocation",
            this.dropLocation);
        XMLStreamWriterHelper.writeElement(
            writer,
            "RequestedBy",
            this.requestedBy);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("TeamFoundationServer"))
                {
                    this.teamFoundationServer = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TeamProject"))
                {
                    this.teamProject = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildType"))
                {
                    this.buildType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildDirectory"))
                {
                    this.buildDirectory = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildNumber"))
                {
                    this.buildNumber = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("LastBuildNumber"))
                {
                    this.lastBuildNumber = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("LastGoodBuildNumber"))
                {
                    this.lastGoodBuildNumber = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildUri"))
                {
                    this.buildUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("BuildMachine"))
                {
                    this.buildMachine = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DropLocation"))
                {
                    this.dropLocation = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("RequestedBy"))
                {
                    this.requestedBy = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
