// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ServerInfoHeader;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ServerInfoHeader
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String reportServerVersionNumber;
    protected String reportServerEdition;
    protected String reportServerVersion;
    protected String reportServerDateTime;

    public _ServerInfoHeader()
    {
        super();
    }

    public _ServerInfoHeader(
        final String reportServerVersionNumber,
        final String reportServerEdition,
        final String reportServerVersion,
        final String reportServerDateTime)
    {
        // TODO : Call super() instead of setting all fields directly?
        setReportServerVersionNumber(reportServerVersionNumber);
        setReportServerEdition(reportServerEdition);
        setReportServerVersion(reportServerVersion);
        setReportServerDateTime(reportServerDateTime);
    }

    public String getReportServerVersionNumber()
    {
        return this.reportServerVersionNumber;
    }

    public void setReportServerVersionNumber(String value)
    {
        this.reportServerVersionNumber = value;
    }

    public String getReportServerEdition()
    {
        return this.reportServerEdition;
    }

    public void setReportServerEdition(String value)
    {
        this.reportServerEdition = value;
    }

    public String getReportServerVersion()
    {
        return this.reportServerVersion;
    }

    public void setReportServerVersion(String value)
    {
        this.reportServerVersion = value;
    }

    public String getReportServerDateTime()
    {
        return this.reportServerDateTime;
    }

    public void setReportServerDateTime(String value)
    {
        this.reportServerDateTime = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReportServerVersionNumber",
            this.reportServerVersionNumber);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReportServerEdition",
            this.reportServerEdition);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReportServerVersion",
            this.reportServerVersion);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReportServerDateTime",
            this.reportServerDateTime);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ReportServerVersionNumber"))
                {
                    this.reportServerVersionNumber = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ReportServerEdition"))
                {
                    this.reportServerEdition = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ReportServerVersion"))
                {
                    this.reportServerVersion = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ReportServerDateTime"))
                {
                    this.reportServerDateTime = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
