// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._WorkspaceVersionSpec;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _WorkspaceVersionSpec
    extends _VersionSpec
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String name;
    protected String owner;
    protected String ownerUniq;
    protected String ownerDisp;

    // No elements    
    public _WorkspaceVersionSpec()
    {
        super();
    }

    public _WorkspaceVersionSpec(
        final String name,
        final String owner,
        final String ownerUniq,
        final String ownerDisp)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setOwner(owner);
        setOwnerUniq(ownerUniq);
        setOwnerDisp(ownerDisp);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(final String value)
    {
        this.name = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(final String value)
    {
        this.owner = value;
    }

    public String getOwnerUniq()
    {
        return this.ownerUniq;
    }

    public void setOwnerUniq(final String value)
    {
        this.ownerUniq = value;
    }

    public String getOwnerDisp()
    {
        return this.ownerDisp;
    }

    public void setOwnerDisp(final String value)
    {
        this.ownerDisp = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "WorkspaceVersionSpec");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "name",
            this.name);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "owner",
            this.owner);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ownerUniq",
            this.ownerUniq);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ownerDisp",
            this.ownerDisp);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("name"))
            {
                this.name = attributeValue;
            }
            else if (localName.equalsIgnoreCase("owner"))
            {
                this.owner = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ownerUniq"))
            {
                this.ownerUniq = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ownerDisp"))
            {
                this.ownerDisp = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
