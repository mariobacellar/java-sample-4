// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.classification._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.classification._03._Classification4Soap_GetProjectPropertiesResponse;
import ms.tfs.services.classification._03._ProjectProperty;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Classification4Soap_GetProjectPropertiesResponse
    implements ElementDeserializable
{
    // No attributes    

    // Elements
    protected String name;
    protected String state;
    protected int templateId;
    protected _ProjectProperty[] properties;

    public _Classification4Soap_GetProjectPropertiesResponse()
    {
        super();
    }

    public _Classification4Soap_GetProjectPropertiesResponse(
        final String name,
        final String state,
        final int templateId,
        final _ProjectProperty[] properties)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setState(state);
        setTemplateId(templateId);
        setProperties(properties);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getState()
    {
        return this.state;
    }

    public void setState(String value)
    {
        this.state = value;
    }

    public int getTemplateId()
    {
        return this.templateId;
    }

    public void setTemplateId(int value)
    {
        this.templateId = value;
    }

    public _ProjectProperty[] getProperties()
    {
        return this.properties;
    }

    public void setProperties(_ProjectProperty[] value)
    {
        this.properties = value;
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("state"))
                {
                    this.state = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("templateId"))
                {
                    this.templateId = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("properties"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ProjectProperty complexObject0 = new _ProjectProperty();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.properties = (_ProjectProperty[]) list0.toArray(new _ProjectProperty[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
