// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildServiceHost;
import ms.tfs.build.buildservice._04._ServiceHostStatus;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildServiceHost
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String baseUrl;
    protected boolean isVirtual;
    protected String messageQueueUrl;
    protected String name;
    protected boolean requireClientCertificates;
    protected _ServiceHostStatus status = _ServiceHostStatus.Offline;
    protected Calendar statusChangedOn;
    protected Calendar acquiredOn;
    protected Calendar connectedOn;
    protected String uri;

    // No elements    
    public _BuildServiceHost()
    {
        super();
    }

    public _BuildServiceHost(
        final String baseUrl,
        final boolean isVirtual,
        final String messageQueueUrl,
        final String name,
        final boolean requireClientCertificates,
        final _ServiceHostStatus status,
        final Calendar statusChangedOn,
        final Calendar acquiredOn,
        final Calendar connectedOn,
        final String uri)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBaseUrl(baseUrl);
        setIsVirtual(isVirtual);
        setMessageQueueUrl(messageQueueUrl);
        setName(name);
        setRequireClientCertificates(requireClientCertificates);
        setStatus(status);
        setStatusChangedOn(statusChangedOn);
        setAcquiredOn(acquiredOn);
        setConnectedOn(connectedOn);
        setUri(uri);
    }

    public String getBaseUrl()
    {
        return this.baseUrl;
    }

    public void setBaseUrl(final String value)
    {
        this.baseUrl = value;
    }

    public boolean isIsVirtual()
    {
        return this.isVirtual;
    }

    public void setIsVirtual(final boolean value)
    {
        this.isVirtual = value;
    }

    public String getMessageQueueUrl()
    {
        return this.messageQueueUrl;
    }

    public void setMessageQueueUrl(final String value)
    {
        this.messageQueueUrl = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(final String value)
    {
        this.name = value;
    }

    public boolean isRequireClientCertificates()
    {
        return this.requireClientCertificates;
    }

    public void setRequireClientCertificates(final boolean value)
    {
        this.requireClientCertificates = value;
    }

    public _ServiceHostStatus getStatus()
    {
        return this.status;
    }

    public void setStatus(final _ServiceHostStatus value)
    {
        this.status = value;
    }

    public Calendar getStatusChangedOn()
    {
        return this.statusChangedOn;
    }

    public void setStatusChangedOn(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'StatusChangedOn' is a required attribute, its value cannot be null");
        }

        this.statusChangedOn = value;
    }

    public Calendar getAcquiredOn()
    {
        return this.acquiredOn;
    }

    public void setAcquiredOn(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'AcquiredOn' is a required attribute, its value cannot be null");
        }

        this.acquiredOn = value;
    }

    public Calendar getConnectedOn()
    {
        return this.connectedOn;
    }

    public void setConnectedOn(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'ConnectedOn' is a required attribute, its value cannot be null");
        }

        this.connectedOn = value;
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(final String value)
    {
        this.uri = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BaseUrl",
            this.baseUrl);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "IsVirtual",
            this.isVirtual);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "MessageQueueUrl",
            this.messageQueueUrl);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequireClientCertificates",
            this.requireClientCertificates);

        if (this.status != null)
        {
            this.status.writeAsAttribute(
                writer,
                "Status");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "StatusChangedOn",
            this.statusChangedOn,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "AcquiredOn",
            this.acquiredOn,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ConnectedOn",
            this.connectedOn,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("BaseUrl"))
            {
                this.baseUrl = attributeValue;
            }
            else if (localName.equalsIgnoreCase("IsVirtual"))
            {
                this.isVirtual = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("MessageQueueUrl"))
            {
                this.messageQueueUrl = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Name"))
            {
                this.name = attributeValue;
            }
            else if (localName.equalsIgnoreCase("RequireClientCertificates"))
            {
                this.requireClientCertificates = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Status"))
            {
                this.status = _ServiceHostStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("StatusChangedOn"))
            {
                this.statusChangedOn = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("AcquiredOn"))
            {
                this.acquiredOn = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("ConnectedOn"))
            {
                this.connectedOn = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
