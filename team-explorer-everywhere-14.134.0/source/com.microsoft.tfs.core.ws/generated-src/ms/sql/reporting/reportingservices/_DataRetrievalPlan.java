// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._CredentialRetrievalEnum;
import ms.sql.reporting.reportingservices._DataRetrievalPlan;
import ms.sql.reporting.reportingservices._DataSetDefinition;
import ms.sql.reporting.reportingservices._DataSourceDefinition;
import ms.sql.reporting.reportingservices._DataSourceReference;
import ms.sql.reporting.reportingservices._Field;
import ms.sql.reporting.reportingservices._InvalidDataSourceReference;
import ms.sql.reporting.reportingservices._QueryDefinition;
import ms.sql.reporting.reportingservices._SensitivityEnum;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _DataRetrievalPlan
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    protected _DataSourceDefinition dataSourceDefinition;

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    protected _DataSourceReference dataSourceReference;

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    protected _InvalidDataSourceReference invalidDataSourceReference;
    protected _DataSetDefinition dataSet;

    public _DataRetrievalPlan()
    {
        super();
    }

    public _DataRetrievalPlan(
        final _DataSourceDefinition dataSourceDefinition,
        final _DataSourceReference dataSourceReference,
        final _InvalidDataSourceReference invalidDataSourceReference,
        final _DataSetDefinition dataSet)
    {
        // TODO : Call super() instead of setting all fields directly?
        setDataSourceDefinition(dataSourceDefinition);
        setDataSourceReference(dataSourceReference);
        setInvalidDataSourceReference(invalidDataSourceReference);
        setDataSet(dataSet);
    }

    public _DataSourceDefinition getDataSourceDefinition()
    {
        return this.dataSourceDefinition;
    }

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    public void setDataSourceDefinition(_DataSourceDefinition value)
    {
        this.dataSourceDefinition = value;
    }

    public _DataSourceReference getDataSourceReference()
    {
        return this.dataSourceReference;
    }

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    public void setDataSourceReference(_DataSourceReference value)
    {
        this.dataSourceReference = value;
    }

    public _InvalidDataSourceReference getInvalidDataSourceReference()
    {
        return this.invalidDataSourceReference;
    }

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DataSourceDefinition</code></li>
     * <li><code>DataSourceReference</code></li>
     * <li><code>InvalidDataSourceReference</code></li>
     * </ul>
     * </p>
     */
    public void setInvalidDataSourceReference(_InvalidDataSourceReference value)
    {
        this.invalidDataSourceReference = value;
    }

    public _DataSetDefinition getDataSet()
    {
        return this.dataSet;
    }

    public void setDataSet(_DataSetDefinition value)
    {
        this.dataSet = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.dataSourceDefinition != null)
        {
            this.dataSourceDefinition.writeAsElement(
                writer,
                "DataSourceDefinition");
        }

        if (this.dataSourceReference != null)
        {
            this.dataSourceReference.writeAsElement(
                writer,
                "DataSourceReference");
        }

        if (this.invalidDataSourceReference != null)
        {
            this.invalidDataSourceReference.writeAsElement(
                writer,
                "InvalidDataSourceReference");
        }

        if (this.dataSet != null)
        {
            this.dataSet.writeAsElement(
                writer,
                "DataSet");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("DataSourceDefinition"))
                {
                    this.dataSourceDefinition = new _DataSourceDefinition();
                    this.dataSourceDefinition.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DataSourceReference"))
                {
                    this.dataSourceReference = new _DataSourceReference();
                    this.dataSourceReference.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("InvalidDataSourceReference"))
                {
                    this.invalidDataSourceReference = new _InvalidDataSourceReference();
                    this.invalidDataSourceReference.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DataSet"))
                {
                    this.dataSet = new _DataSetDefinition();
                    this.dataSet.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
