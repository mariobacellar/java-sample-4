// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.registration._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.registration._03._FrameworkRegistrationEntry;
import ms.tfs.services.registration._03._OutboundLinkType;
import ms.tfs.services.registration._03._RegistrationArtifactType;
import ms.tfs.services.registration._03._RegistrationDatabase;
import ms.tfs.services.registration._03._RegistrationEventType;
import ms.tfs.services.registration._03._RegistrationExtendedAttribute2;
import ms.tfs.services.registration._03._RegistrationServiceInterface;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _FrameworkRegistrationEntry
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String type;
    protected _RegistrationServiceInterface[] serviceInterfaces;
    protected _RegistrationDatabase[] databases;
    protected _RegistrationEventType[] eventTypes;
    protected _RegistrationArtifactType[] artifactTypes;
    protected _RegistrationExtendedAttribute2[] registrationExtendedAttributes;

    public _FrameworkRegistrationEntry()
    {
        super();
    }

    public _FrameworkRegistrationEntry(
        final String type,
        final _RegistrationServiceInterface[] serviceInterfaces,
        final _RegistrationDatabase[] databases,
        final _RegistrationEventType[] eventTypes,
        final _RegistrationArtifactType[] artifactTypes,
        final _RegistrationExtendedAttribute2[] registrationExtendedAttributes)
    {
        // TODO : Call super() instead of setting all fields directly?
        setType(type);
        setServiceInterfaces(serviceInterfaces);
        setDatabases(databases);
        setEventTypes(eventTypes);
        setArtifactTypes(artifactTypes);
        setRegistrationExtendedAttributes(registrationExtendedAttributes);
    }

    public String getType()
    {
        return this.type;
    }

    public void setType(String value)
    {
        this.type = value;
    }

    public _RegistrationServiceInterface[] getServiceInterfaces()
    {
        return this.serviceInterfaces;
    }

    public void setServiceInterfaces(_RegistrationServiceInterface[] value)
    {
        this.serviceInterfaces = value;
    }

    public _RegistrationDatabase[] getDatabases()
    {
        return this.databases;
    }

    public void setDatabases(_RegistrationDatabase[] value)
    {
        this.databases = value;
    }

    public _RegistrationEventType[] getEventTypes()
    {
        return this.eventTypes;
    }

    public void setEventTypes(_RegistrationEventType[] value)
    {
        this.eventTypes = value;
    }

    public _RegistrationArtifactType[] getArtifactTypes()
    {
        return this.artifactTypes;
    }

    public void setArtifactTypes(_RegistrationArtifactType[] value)
    {
        this.artifactTypes = value;
    }

    public _RegistrationExtendedAttribute2[] getRegistrationExtendedAttributes()
    {
        return this.registrationExtendedAttributes;
    }

    public void setRegistrationExtendedAttributes(_RegistrationExtendedAttribute2[] value)
    {
        this.registrationExtendedAttributes = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Type",
            this.type);

        if (this.serviceInterfaces != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ServiceInterfaces");

            for (int iterator0 = 0; iterator0 < this.serviceInterfaces.length; iterator0++)
            {
                this.serviceInterfaces[iterator0].writeAsElement(
                    writer,
                    "ServiceInterface");
            }

            writer.writeEndElement();
        }

        if (this.databases != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Databases");

            for (int iterator0 = 0; iterator0 < this.databases.length; iterator0++)
            {
                this.databases[iterator0].writeAsElement(
                    writer,
                    "Database");
            }

            writer.writeEndElement();
        }

        if (this.eventTypes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("EventTypes");

            for (int iterator0 = 0; iterator0 < this.eventTypes.length; iterator0++)
            {
                this.eventTypes[iterator0].writeAsElement(
                    writer,
                    "EventType");
            }

            writer.writeEndElement();
        }

        if (this.artifactTypes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ArtifactTypes");

            for (int iterator0 = 0; iterator0 < this.artifactTypes.length; iterator0++)
            {
                this.artifactTypes[iterator0].writeAsElement(
                    writer,
                    "ArtifactType");
            }

            writer.writeEndElement();
        }

        if (this.registrationExtendedAttributes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("RegistrationExtendedAttributes");

            for (int iterator0 = 0; iterator0 < this.registrationExtendedAttributes.length; iterator0++)
            {
                this.registrationExtendedAttributes[iterator0].writeAsElement(
                    writer,
                    "RegistrationExtendedAttribute");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Type"))
                {
                    this.type = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ServiceInterfaces"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RegistrationServiceInterface complexObject0 = new _RegistrationServiceInterface();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.serviceInterfaces = (_RegistrationServiceInterface[]) list0.toArray(
                                new _RegistrationServiceInterface[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Databases"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RegistrationDatabase complexObject0 = new _RegistrationDatabase();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.databases = (_RegistrationDatabase[]) list0.toArray(new _RegistrationDatabase[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("EventTypes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RegistrationEventType complexObject0 = new _RegistrationEventType();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.eventTypes = (_RegistrationEventType[]) list0.toArray(
                            new _RegistrationEventType[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("ArtifactTypes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RegistrationArtifactType complexObject0 = new _RegistrationArtifactType();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.artifactTypes = (_RegistrationArtifactType[]) list0.toArray(
                                new _RegistrationArtifactType[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("RegistrationExtendedAttributes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RegistrationExtendedAttribute2 complexObject0 = new _RegistrationExtendedAttribute2();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.registrationExtendedAttributes = (_RegistrationExtendedAttribute2[]) list0.toArray(
                                new _RegistrationExtendedAttribute2[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
