// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._CatalogItem;
import ms.sql.reporting.reportingservices._ItemTypeEnum;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CatalogItem
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String iD;
    protected String name;
    protected String path;
    protected String virtualPath;
    protected _ItemTypeEnum type;
    protected int size;
    protected String description;
    protected boolean hidden;
    protected Calendar creationDate;
    protected Calendar modifiedDate;
    protected String createdBy;
    protected String modifiedBy;
    protected String mimeType;
    protected Calendar executionDate;

    public _CatalogItem()
    {
        super();
    }

    public _CatalogItem(
        final String iD,
        final String name,
        final String path,
        final String virtualPath,
        final _ItemTypeEnum type,
        final int size,
        final String description,
        final boolean hidden,
        final Calendar creationDate,
        final Calendar modifiedDate,
        final String createdBy,
        final String modifiedBy,
        final String mimeType,
        final Calendar executionDate)
    {
        // TODO : Call super() instead of setting all fields directly?
        setID(iD);
        setName(name);
        setPath(path);
        setVirtualPath(virtualPath);
        setType(type);
        setSize(size);
        setDescription(description);
        setHidden(hidden);
        setCreationDate(creationDate);
        setModifiedDate(modifiedDate);
        setCreatedBy(createdBy);
        setModifiedBy(modifiedBy);
        setMimeType(mimeType);
        setExecutionDate(executionDate);
    }

    public String getID()
    {
        return this.iD;
    }

    public void setID(String value)
    {
        this.iD = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getPath()
    {
        return this.path;
    }

    public void setPath(String value)
    {
        this.path = value;
    }

    public String getVirtualPath()
    {
        return this.virtualPath;
    }

    public void setVirtualPath(String value)
    {
        this.virtualPath = value;
    }

    public _ItemTypeEnum getType()
    {
        return this.type;
    }

    public void setType(_ItemTypeEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Type' is a required element, its value cannot be null");
        }

        this.type = value;
    }

    public int getSize()
    {
        return this.size;
    }

    public void setSize(int value)
    {
        this.size = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public boolean isHidden()
    {
        return this.hidden;
    }

    public void setHidden(boolean value)
    {
        this.hidden = value;
    }

    public Calendar getCreationDate()
    {
        return this.creationDate;
    }

    public void setCreationDate(Calendar value)
    {
        this.creationDate = value;
    }

    public Calendar getModifiedDate()
    {
        return this.modifiedDate;
    }

    public void setModifiedDate(Calendar value)
    {
        this.modifiedDate = value;
    }

    public String getCreatedBy()
    {
        return this.createdBy;
    }

    public void setCreatedBy(String value)
    {
        this.createdBy = value;
    }

    public String getModifiedBy()
    {
        return this.modifiedBy;
    }

    public void setModifiedBy(String value)
    {
        this.modifiedBy = value;
    }

    public String getMimeType()
    {
        return this.mimeType;
    }

    public void setMimeType(String value)
    {
        this.mimeType = value;
    }

    public Calendar getExecutionDate()
    {
        return this.executionDate;
    }

    public void setExecutionDate(Calendar value)
    {
        this.executionDate = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ID",
            this.iD);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Path",
            this.path);
        XMLStreamWriterHelper.writeElement(
            writer,
            "VirtualPath",
            this.virtualPath);
        this.type.writeAsElement(
            writer,
            "Type");
        XMLStreamWriterHelper.writeElement(
            writer,
            "Size",
            this.size);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Hidden",
            this.hidden);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CreationDate",
            this.creationDate,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ModifiedDate",
            this.modifiedDate,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CreatedBy",
            this.createdBy);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ModifiedBy",
            this.modifiedBy);
        XMLStreamWriterHelper.writeElement(
            writer,
            "MimeType",
            this.mimeType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ExecutionDate",
            this.executionDate,
            true);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ID"))
                {
                    this.iD = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Path"))
                {
                    this.path = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("VirtualPath"))
                {
                    this.virtualPath = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Type"))
                {
                    this.type = _ItemTypeEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Size"))
                {
                    this.size = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Hidden"))
                {
                    this.hidden = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("CreationDate"))
                {
                    this.creationDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("ModifiedDate"))
                {
                    this.modifiedDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("CreatedBy"))
                {
                    this.createdBy = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ModifiedBy"))
                {
                    this.modifiedBy = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("MimeType"))
                {
                    this.mimeType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ExecutionDate"))
                {
                    this.executionDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
