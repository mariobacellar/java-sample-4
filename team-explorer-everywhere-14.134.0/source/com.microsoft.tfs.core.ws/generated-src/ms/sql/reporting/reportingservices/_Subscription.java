// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ActiveState;
import ms.sql.reporting.reportingservices._ArrayOfChoice1;
import ms.sql.reporting.reportingservices._ExtensionSettings;
import ms.sql.reporting.reportingservices._ParameterFieldReference;
import ms.sql.reporting.reportingservices._ParameterValue;
import ms.sql.reporting.reportingservices._Subscription;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Subscription
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String subscriptionID;
    protected String owner;
    protected String path;
    protected String virtualPath;
    protected String report;
    protected _ExtensionSettings deliverySettings;
    protected String description;
    protected String status;
    protected _ActiveState active;
    protected Calendar lastExecuted;
    protected String modifiedBy;
    protected Calendar modifiedDate;
    protected String eventType;
    protected boolean isDataDriven;

    public _Subscription()
    {
        super();
    }

    public _Subscription(
        final String subscriptionID,
        final String owner,
        final String path,
        final String virtualPath,
        final String report,
        final _ExtensionSettings deliverySettings,
        final String description,
        final String status,
        final _ActiveState active,
        final Calendar lastExecuted,
        final String modifiedBy,
        final Calendar modifiedDate,
        final String eventType,
        final boolean isDataDriven)
    {
        // TODO : Call super() instead of setting all fields directly?
        setSubscriptionID(subscriptionID);
        setOwner(owner);
        setPath(path);
        setVirtualPath(virtualPath);
        setReport(report);
        setDeliverySettings(deliverySettings);
        setDescription(description);
        setStatus(status);
        setActive(active);
        setLastExecuted(lastExecuted);
        setModifiedBy(modifiedBy);
        setModifiedDate(modifiedDate);
        setEventType(eventType);
        setIsDataDriven(isDataDriven);
    }

    public String getSubscriptionID()
    {
        return this.subscriptionID;
    }

    public void setSubscriptionID(String value)
    {
        this.subscriptionID = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(String value)
    {
        this.owner = value;
    }

    public String getPath()
    {
        return this.path;
    }

    public void setPath(String value)
    {
        this.path = value;
    }

    public String getVirtualPath()
    {
        return this.virtualPath;
    }

    public void setVirtualPath(String value)
    {
        this.virtualPath = value;
    }

    public String getReport()
    {
        return this.report;
    }

    public void setReport(String value)
    {
        this.report = value;
    }

    public _ExtensionSettings getDeliverySettings()
    {
        return this.deliverySettings;
    }

    public void setDeliverySettings(_ExtensionSettings value)
    {
        this.deliverySettings = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public String getStatus()
    {
        return this.status;
    }

    public void setStatus(String value)
    {
        this.status = value;
    }

    public _ActiveState getActive()
    {
        return this.active;
    }

    public void setActive(_ActiveState value)
    {
        this.active = value;
    }

    public Calendar getLastExecuted()
    {
        return this.lastExecuted;
    }

    public void setLastExecuted(Calendar value)
    {
        this.lastExecuted = value;
    }

    public String getModifiedBy()
    {
        return this.modifiedBy;
    }

    public void setModifiedBy(String value)
    {
        this.modifiedBy = value;
    }

    public Calendar getModifiedDate()
    {
        return this.modifiedDate;
    }

    public void setModifiedDate(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'ModifiedDate' is a required element, its value cannot be null");
        }

        this.modifiedDate = value;
    }

    public String getEventType()
    {
        return this.eventType;
    }

    public void setEventType(String value)
    {
        this.eventType = value;
    }

    public boolean isIsDataDriven()
    {
        return this.isDataDriven;
    }

    public void setIsDataDriven(boolean value)
    {
        this.isDataDriven = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "SubscriptionID",
            this.subscriptionID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Owner",
            this.owner);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Path",
            this.path);
        XMLStreamWriterHelper.writeElement(
            writer,
            "VirtualPath",
            this.virtualPath);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Report",
            this.report);

        if (this.deliverySettings != null)
        {
            this.deliverySettings.writeAsElement(
                writer,
                "DeliverySettings");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Status",
            this.status);

        if (this.active != null)
        {
            this.active.writeAsElement(
                writer,
                "Active");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "LastExecuted",
            this.lastExecuted,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ModifiedBy",
            this.modifiedBy);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ModifiedDate",
            this.modifiedDate,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "EventType",
            this.eventType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "IsDataDriven",
            this.isDataDriven);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("SubscriptionID"))
                {
                    this.subscriptionID = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Owner"))
                {
                    this.owner = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Path"))
                {
                    this.path = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("VirtualPath"))
                {
                    this.virtualPath = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Report"))
                {
                    this.report = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DeliverySettings"))
                {
                    this.deliverySettings = new _ExtensionSettings();
                    this.deliverySettings.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Status"))
                {
                    this.status = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Active"))
                {
                    this.active = new _ActiveState();
                    this.active.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("LastExecuted"))
                {
                    this.lastExecuted = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("ModifiedBy"))
                {
                    this.modifiedBy = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ModifiedDate"))
                {
                    this.modifiedDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("EventType"))
                {
                    this.eventType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("IsDataDriven"))
                {
                    this.isDataDriven = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
