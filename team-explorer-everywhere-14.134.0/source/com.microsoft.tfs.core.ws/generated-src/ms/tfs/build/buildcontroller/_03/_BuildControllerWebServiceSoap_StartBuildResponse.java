// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildcontroller._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildcontroller._03._BuildControllerWebServiceSoap_StartBuildResponse;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildControllerWebServiceSoap_StartBuildResponse
    implements ElementDeserializable
{
    // No attributes    

    // Elements
    protected String startBuildResult;

    public _BuildControllerWebServiceSoap_StartBuildResponse()
    {
        super();
    }

    public _BuildControllerWebServiceSoap_StartBuildResponse(final String startBuildResult)
    {
        // TODO : Call super() instead of setting all fields directly?
        setStartBuildResult(startBuildResult);
    }

    public String getStartBuildResult()
    {
        return this.startBuildResult;
    }

    public void setStartBuildResult(String value)
    {
        this.startBuildResult = value;
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("StartBuildResult"))
                {
                    this.startBuildResult = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
