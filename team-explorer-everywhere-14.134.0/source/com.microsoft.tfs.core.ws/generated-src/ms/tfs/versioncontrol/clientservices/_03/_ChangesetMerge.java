// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangesetMerge;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ChangesetMerge
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int srcver;
    protected int tgtver;
    protected boolean part = false;

    // No elements    
    public _ChangesetMerge()
    {
        super();
    }

    public _ChangesetMerge(
        final int srcver,
        final int tgtver,
        final boolean part)
    {
        // TODO : Call super() instead of setting all fields directly?
        setSrcver(srcver);
        setTgtver(tgtver);
        setPart(part);
    }

    public int getSrcver()
    {
        return this.srcver;
    }

    public void setSrcver(final int value)
    {
        this.srcver = value;
    }

    public int getTgtver()
    {
        return this.tgtver;
    }

    public void setTgtver(final int value)
    {
        this.tgtver = value;
    }

    public boolean isPart()
    {
        return this.part;
    }

    public void setPart(final boolean value)
    {
        this.part = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "srcver",
            this.srcver);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "tgtver",
            this.tgtver);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "part",
            this.part);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("srcver"))
            {
                this.srcver = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("tgtver"))
            {
                this.tgtver = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("part"))
            {
                this.part = XMLConvert.toBoolean(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
