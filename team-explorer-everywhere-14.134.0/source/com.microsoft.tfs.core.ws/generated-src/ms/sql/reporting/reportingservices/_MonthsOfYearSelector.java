// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._MonthsOfYearSelector;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _MonthsOfYearSelector
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected boolean january;
    protected boolean february;
    protected boolean march;
    protected boolean april;
    protected boolean may;
    protected boolean june;
    protected boolean july;
    protected boolean august;
    protected boolean september;
    protected boolean october;
    protected boolean november;
    protected boolean december;

    public _MonthsOfYearSelector()
    {
        super();
    }

    public _MonthsOfYearSelector(
        final boolean january,
        final boolean february,
        final boolean march,
        final boolean april,
        final boolean may,
        final boolean june,
        final boolean july,
        final boolean august,
        final boolean september,
        final boolean october,
        final boolean november,
        final boolean december)
    {
        // TODO : Call super() instead of setting all fields directly?
        setJanuary(january);
        setFebruary(february);
        setMarch(march);
        setApril(april);
        setMay(may);
        setJune(june);
        setJuly(july);
        setAugust(august);
        setSeptember(september);
        setOctober(october);
        setNovember(november);
        setDecember(december);
    }

    public boolean isJanuary()
    {
        return this.january;
    }

    public void setJanuary(boolean value)
    {
        this.january = value;
    }

    public boolean isFebruary()
    {
        return this.february;
    }

    public void setFebruary(boolean value)
    {
        this.february = value;
    }

    public boolean isMarch()
    {
        return this.march;
    }

    public void setMarch(boolean value)
    {
        this.march = value;
    }

    public boolean isApril()
    {
        return this.april;
    }

    public void setApril(boolean value)
    {
        this.april = value;
    }

    public boolean isMay()
    {
        return this.may;
    }

    public void setMay(boolean value)
    {
        this.may = value;
    }

    public boolean isJune()
    {
        return this.june;
    }

    public void setJune(boolean value)
    {
        this.june = value;
    }

    public boolean isJuly()
    {
        return this.july;
    }

    public void setJuly(boolean value)
    {
        this.july = value;
    }

    public boolean isAugust()
    {
        return this.august;
    }

    public void setAugust(boolean value)
    {
        this.august = value;
    }

    public boolean isSeptember()
    {
        return this.september;
    }

    public void setSeptember(boolean value)
    {
        this.september = value;
    }

    public boolean isOctober()
    {
        return this.october;
    }

    public void setOctober(boolean value)
    {
        this.october = value;
    }

    public boolean isNovember()
    {
        return this.november;
    }

    public void setNovember(boolean value)
    {
        this.november = value;
    }

    public boolean isDecember()
    {
        return this.december;
    }

    public void setDecember(boolean value)
    {
        this.december = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "January",
            this.january);
        XMLStreamWriterHelper.writeElement(
            writer,
            "February",
            this.february);
        XMLStreamWriterHelper.writeElement(
            writer,
            "March",
            this.march);
        XMLStreamWriterHelper.writeElement(
            writer,
            "April",
            this.april);
        XMLStreamWriterHelper.writeElement(
            writer,
            "May",
            this.may);
        XMLStreamWriterHelper.writeElement(
            writer,
            "June",
            this.june);
        XMLStreamWriterHelper.writeElement(
            writer,
            "July",
            this.july);
        XMLStreamWriterHelper.writeElement(
            writer,
            "August",
            this.august);
        XMLStreamWriterHelper.writeElement(
            writer,
            "September",
            this.september);
        XMLStreamWriterHelper.writeElement(
            writer,
            "October",
            this.october);
        XMLStreamWriterHelper.writeElement(
            writer,
            "November",
            this.november);
        XMLStreamWriterHelper.writeElement(
            writer,
            "December",
            this.december);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("January"))
                {
                    this.january = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("February"))
                {
                    this.february = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("March"))
                {
                    this.march = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("April"))
                {
                    this.april = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("May"))
                {
                    this.may = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("June"))
                {
                    this.june = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("July"))
                {
                    this.july = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("August"))
                {
                    this.august = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("September"))
                {
                    this.september = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("October"))
                {
                    this.october = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("November"))
                {
                    this.november = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("December"))
                {
                    this.december = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
