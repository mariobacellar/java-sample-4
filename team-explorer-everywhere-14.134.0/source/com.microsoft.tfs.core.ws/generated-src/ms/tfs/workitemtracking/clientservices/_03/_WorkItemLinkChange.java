// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.workitemtracking.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.workitemtracking.clientservices._03._WorkItemLinkChange;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _WorkItemLinkChange
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected int sourceID;
    protected int targetID;
    protected String linkType;
    protected boolean isActive;
    protected Calendar changedDate;
    protected long rowVersion;

    public _WorkItemLinkChange()
    {
        super();
    }

    public _WorkItemLinkChange(
        final int sourceID,
        final int targetID,
        final String linkType,
        final boolean isActive,
        final Calendar changedDate,
        final long rowVersion)
    {
        // TODO : Call super() instead of setting all fields directly?
        setSourceID(sourceID);
        setTargetID(targetID);
        setLinkType(linkType);
        setIsActive(isActive);
        setChangedDate(changedDate);
        setRowVersion(rowVersion);
    }

    public int getSourceID()
    {
        return this.sourceID;
    }

    public void setSourceID(int value)
    {
        this.sourceID = value;
    }

    public int getTargetID()
    {
        return this.targetID;
    }

    public void setTargetID(int value)
    {
        this.targetID = value;
    }

    public String getLinkType()
    {
        return this.linkType;
    }

    public void setLinkType(String value)
    {
        this.linkType = value;
    }

    public boolean isIsActive()
    {
        return this.isActive;
    }

    public void setIsActive(boolean value)
    {
        this.isActive = value;
    }

    public Calendar getChangedDate()
    {
        return this.changedDate;
    }

    public void setChangedDate(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'ChangedDate' is a required element, its value cannot be null");
        }

        this.changedDate = value;
    }

    public long getRowVersion()
    {
        return this.rowVersion;
    }

    public void setRowVersion(long value)
    {
        this.rowVersion = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "SourceID",
            this.sourceID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TargetID",
            this.targetID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LinkType",
            this.linkType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "IsActive",
            this.isActive);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ChangedDate",
            this.changedDate,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "RowVersion",
            this.rowVersion);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("SourceID"))
                {
                    this.sourceID = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("TargetID"))
                {
                    this.targetID = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("LinkType"))
                {
                    this.linkType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("IsActive"))
                {
                    this.isActive = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ChangedDate"))
                {
                    this.changedDate = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("RowVersion"))
                {
                    this.rowVersion = XMLConvert.toLong(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
