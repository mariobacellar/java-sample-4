// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._Warning;
import ms.tfs.versioncontrol.clientservices._03._WarningType;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Warning
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected _WarningType wrn = _WarningType.ResourcePendingChangeWarning;
    protected int chgEx = 0;
    protected _ChangeType chg = new _ChangeType(
                new _ChangeType._ChangeType_Flag[] { _ChangeType._ChangeType_Flag.None });
    protected String user;
    protected String userdisp;
    protected String cpp;
    protected String ws;

    // No elements    
    public _Warning()
    {
        super();
    }

    public _Warning(
        final _WarningType wrn,
        final int chgEx,
        final _ChangeType chg,
        final String user,
        final String userdisp,
        final String cpp,
        final String ws)
    {
        // TODO : Call super() instead of setting all fields directly?
        setWrn(wrn);
        setChgEx(chgEx);
        setChg(chg);
        setUser(user);
        setUserdisp(userdisp);
        setCpp(cpp);
        setWs(ws);
    }

    public _WarningType getWrn()
    {
        return this.wrn;
    }

    public void setWrn(final _WarningType value)
    {
        this.wrn = value;
    }

    public int getChgEx()
    {
        return this.chgEx;
    }

    public void setChgEx(final int value)
    {
        this.chgEx = value;
    }

    public _ChangeType getChg()
    {
        return this.chg;
    }

    public void setChg(final _ChangeType value)
    {
        this.chg = value;
    }

    public String getUser()
    {
        return this.user;
    }

    public void setUser(final String value)
    {
        this.user = value;
    }

    public String getUserdisp()
    {
        return this.userdisp;
    }

    public void setUserdisp(final String value)
    {
        this.userdisp = value;
    }

    public String getCpp()
    {
        return this.cpp;
    }

    public void setCpp(final String value)
    {
        this.cpp = value;
    }

    public String getWs()
    {
        return this.ws;
    }

    public void setWs(final String value)
    {
        this.ws = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        if (this.wrn != null)
        {
            this.wrn.writeAsAttribute(
                writer,
                "wrn");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "chgEx",
            this.chgEx);

        if (this.chg != null)
        {
            this.chg.writeAsAttribute(
                writer,
                "chg");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "user",
            this.user);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "userdisp",
            this.userdisp);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "cpp",
            this.cpp);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ws",
            this.ws);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("wrn"))
            {
                this.wrn = _WarningType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("chgEx"))
            {
                this.chgEx = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("chg"))
            {
                this.chg = new _ChangeType();
                this.chg.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("user"))
            {
                this.user = attributeValue;
            }
            else if (localName.equalsIgnoreCase("userdisp"))
            {
                this.userdisp = attributeValue;
            }
            else if (localName.equalsIgnoreCase("cpp"))
            {
                this.cpp = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ws"))
            {
                this.ws = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
