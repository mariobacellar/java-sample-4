// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.linking._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.linking._03._OutboundLink;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _OutboundLink
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String linkType;
    protected String referencedUri;

    public _OutboundLink()
    {
        super();
    }

    public _OutboundLink(
        final String linkType,
        final String referencedUri)
    {
        // TODO : Call super() instead of setting all fields directly?
        setLinkType(linkType);
        setReferencedUri(referencedUri);
    }

    public String getLinkType()
    {
        return this.linkType;
    }

    public void setLinkType(String value)
    {
        this.linkType = value;
    }

    public String getReferencedUri()
    {
        return this.referencedUri;
    }

    public void setReferencedUri(String value)
    {
        this.referencedUri = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "LinkType",
            this.linkType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReferencedUri",
            this.referencedUri);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("LinkType"))
                {
                    this.linkType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ReferencedUri"))
                {
                    this.referencedUri = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
