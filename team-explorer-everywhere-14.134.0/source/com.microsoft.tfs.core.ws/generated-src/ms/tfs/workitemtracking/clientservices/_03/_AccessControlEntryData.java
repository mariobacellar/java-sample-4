// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.workitemtracking.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.workitemtracking.clientservices._03._AccessControlEntryData;
import ms.tfs.workitemtracking.clientservices._03._AccessControlEntryExtendedData;
import ms.tfs.workitemtracking.clientservices._03._IdentityDescriptorData;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _AccessControlEntryData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected int allow;
    protected int deny;
    protected _IdentityDescriptorData descriptor;
    protected _AccessControlEntryExtendedData extendedInfo;

    public _AccessControlEntryData()
    {
        super();
    }

    public _AccessControlEntryData(
        final int allow,
        final int deny,
        final _IdentityDescriptorData descriptor,
        final _AccessControlEntryExtendedData extendedInfo)
    {
        // TODO : Call super() instead of setting all fields directly?
        setAllow(allow);
        setDeny(deny);
        setDescriptor(descriptor);
        setExtendedInfo(extendedInfo);
    }

    public int getAllow()
    {
        return this.allow;
    }

    public void setAllow(int value)
    {
        this.allow = value;
    }

    public int getDeny()
    {
        return this.deny;
    }

    public void setDeny(int value)
    {
        this.deny = value;
    }

    public _IdentityDescriptorData getDescriptor()
    {
        return this.descriptor;
    }

    public void setDescriptor(_IdentityDescriptorData value)
    {
        this.descriptor = value;
    }

    public _AccessControlEntryExtendedData getExtendedInfo()
    {
        return this.extendedInfo;
    }

    public void setExtendedInfo(_AccessControlEntryExtendedData value)
    {
        this.extendedInfo = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Allow",
            this.allow);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Deny",
            this.deny);

        if (this.descriptor != null)
        {
            this.descriptor.writeAsElement(
                writer,
                "Descriptor");
        }

        if (this.extendedInfo != null)
        {
            this.extendedInfo.writeAsElement(
                writer,
                "ExtendedInfo");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Allow"))
                {
                    this.allow = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Deny"))
                {
                    this.deny = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Descriptor"))
                {
                    this.descriptor = new _IdentityDescriptorData();
                    this.descriptor.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("ExtendedInfo"))
                {
                    this.extendedInfo = new _AccessControlEntryExtendedData();
                    this.extendedInfo.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
