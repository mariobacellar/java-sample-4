// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /flagSet.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import java.util.HashMap;
import java.util.Map;

/**
 * Automatically generated flag set class.
 */
public final class _ChangeType
    extends FlagSet
{
    /**
     * Constructs a _ChangeType with no flags initially set.
     */
    public _ChangeType()
    {
        super();
    }

    /**
     * Constructs a _ChangeType with the given flags initially set.
     *
     * @param flags
     *        the flags initially contained in this set.
     */
    public _ChangeType(final _ChangeType_Flag[] flags)
    {
        super(flags);
    }

    /**
     * Constructs a _ChangeType with the given flags initially set.
     *
     * @param flagStrings
     *        the flags initially contained in this set.
     */
    public _ChangeType(final String[] flagStrings)
    {
        super(flagStrings);
    }

    /*
     * (non-Javadoc)
     *
     * @see
     * com.microsoft.tfs.core.ws.runtime.types.FlagSet\#findFlagInstance(java.lang
     * .String)
     */
    protected Flag findFlagInstance(final String value)
        throws SOAPSerializationException
    {
        return _ChangeType_Flag.fromString(
            value,
            _ChangeType_Flag.VALUES_TO_INSTANCES);
    }

    /**
     * Gets the flags this flag set contains.
     *
     * @return the flags this flag set contains.
     */
    public _ChangeType_Flag[] getFlags()
    {
        return (_ChangeType_Flag[]) this.toArray(new _ChangeType_Flag[this.size()]);
    }

    public boolean add(_ChangeType_Flag o)
    {
        return super.add(o);
    }

    public boolean contains(_ChangeType_Flag o)
    {
        return super.contains(o);
    }

    public boolean remove(_ChangeType_Flag o)
    {
        return super.remove(o);
    }

    /**
     * Defines the valid flag values that can be contained in _ChangeType.
     *
     * This class is non-final for the rare occasion where custom values must be
     * defined because the web service accepts values not publicly defined in its
     * web service definition.
     */
    public static class _ChangeType_Flag
        extends Flag
    {
        /**
         * This map lets static methods in this class map strings to the correct
         * instance type at deserialization time.
         */
        private final static Map VALUES_TO_INSTANCES = new HashMap();
        public static final _ChangeType_Flag None = new _ChangeType_Flag("None");
        public static final _ChangeType_Flag Add = new _ChangeType_Flag("Add");
        public static final _ChangeType_Flag Edit = new _ChangeType_Flag("Edit");
        public static final _ChangeType_Flag Encoding = new _ChangeType_Flag("Encoding");
        public static final _ChangeType_Flag Rename = new _ChangeType_Flag("Rename");
        public static final _ChangeType_Flag Delete = new _ChangeType_Flag("Delete");
        public static final _ChangeType_Flag Undelete = new _ChangeType_Flag("Undelete");
        public static final _ChangeType_Flag Branch = new _ChangeType_Flag("Branch");
        public static final _ChangeType_Flag Merge = new _ChangeType_Flag("Merge");
        public static final _ChangeType_Flag Lock = new _ChangeType_Flag("Lock");
        public static final _ChangeType_Flag Rollback = new _ChangeType_Flag("Rollback");
        public static final _ChangeType_Flag SourceRename = new _ChangeType_Flag("SourceRename");
        public static final _ChangeType_Flag Property = new _ChangeType_Flag("Property");

        protected _ChangeType_Flag(final String name)
        {
            super(name, _ChangeType_Flag.VALUES_TO_INSTANCES);
        }
    }
}
