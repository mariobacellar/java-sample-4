// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildDefinitionSpec;
import ms.tfs.build.buildservice._04._DefinitionTriggerType;
import ms.tfs.build.buildservice._04._QueryOptions;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDefinitionSpec
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String fullPath;

    // Elements
    protected _DefinitionTriggerType triggerType = new _DefinitionTriggerType(
                new _DefinitionTriggerType._DefinitionTriggerType_Flag[]
                {
                    _DefinitionTriggerType._DefinitionTriggerType_Flag.All
                });
    protected String[] propertyNameFilters;
    protected _QueryOptions options = new _QueryOptions(
                new _QueryOptions._QueryOptions_Flag[] { _QueryOptions._QueryOptions_Flag.All });

    public _BuildDefinitionSpec()
    {
        super();
    }

    public _BuildDefinitionSpec(
        final String fullPath,
        final _DefinitionTriggerType triggerType,
        final String[] propertyNameFilters,
        final _QueryOptions options)
    {
        // TODO : Call super() instead of setting all fields directly?
        setFullPath(fullPath);
        setTriggerType(triggerType);
        setPropertyNameFilters(propertyNameFilters);
        setOptions(options);
    }

    public String getFullPath()
    {
        return this.fullPath;
    }

    public void setFullPath(final String value)
    {
        this.fullPath = value;
    }

    public _DefinitionTriggerType getTriggerType()
    {
        return this.triggerType;
    }

    public void setTriggerType(_DefinitionTriggerType value)
    {
        this.triggerType = value;
    }

    public String[] getPropertyNameFilters()
    {
        return this.propertyNameFilters;
    }

    public void setPropertyNameFilters(String[] value)
    {
        this.propertyNameFilters = value;
    }

    public _QueryOptions getOptions()
    {
        return this.options;
    }

    public void setOptions(_QueryOptions value)
    {
        this.options = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FullPath",
            this.fullPath);

        // Elements
        if (this.triggerType != null)
        {
            this.triggerType.writeAsElement(
                writer,
                "TriggerType");
        }

        if (this.propertyNameFilters != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PropertyNameFilters");

            for (int iterator0 = 0; iterator0 < this.propertyNameFilters.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.propertyNameFilters[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.options != null)
        {
            this.options.writeAsElement(
                writer,
                "Options");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("FullPath"))
            {
                this.fullPath = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("TriggerType"))
                {
                    this.triggerType = new _DefinitionTriggerType();
                    this.triggerType.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("PropertyNameFilters"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.propertyNameFilters = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Options"))
                {
                    this.options = new _QueryOptions();
                    this.options.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
