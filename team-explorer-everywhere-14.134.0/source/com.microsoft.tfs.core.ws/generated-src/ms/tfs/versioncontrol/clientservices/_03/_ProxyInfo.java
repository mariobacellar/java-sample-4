// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ProxyInfo;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ProxyInfo
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String url;
    protected String fn;
    protected String site;
    protected String desc;
    protected int flags = 0;

    // No elements    
    public _ProxyInfo()
    {
        super();
    }

    public _ProxyInfo(
        final String url,
        final String fn,
        final String site,
        final String desc,
        final int flags)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUrl(url);
        setFn(fn);
        setSite(site);
        setDesc(desc);
        setFlags(flags);
    }

    public String getUrl()
    {
        return this.url;
    }

    public void setUrl(final String value)
    {
        this.url = value;
    }

    public String getFn()
    {
        return this.fn;
    }

    public void setFn(final String value)
    {
        this.fn = value;
    }

    public String getSite()
    {
        return this.site;
    }

    public void setSite(final String value)
    {
        this.site = value;
    }

    public String getDesc()
    {
        return this.desc;
    }

    public void setDesc(final String value)
    {
        this.desc = value;
    }

    public int getFlags()
    {
        return this.flags;
    }

    public void setFlags(final int value)
    {
        this.flags = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "url",
            this.url);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "fn",
            this.fn);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "site",
            this.site);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "desc",
            this.desc);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "flags",
            this.flags);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("url"))
            {
                this.url = attributeValue;
            }
            else if (localName.equalsIgnoreCase("fn"))
            {
                this.fn = attributeValue;
            }
            else if (localName.equalsIgnoreCase("site"))
            {
                this.site = attributeValue;
            }
            else if (localName.equalsIgnoreCase("desc"))
            {
                this.desc = attributeValue;
            }
            else if (localName.equalsIgnoreCase("flags"))
            {
                this.flags = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
