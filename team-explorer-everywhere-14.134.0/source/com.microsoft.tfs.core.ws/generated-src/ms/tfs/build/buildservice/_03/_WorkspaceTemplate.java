// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._WorkspaceMapping;
import ms.tfs.build.buildservice._03._WorkspaceMappingType;
import ms.tfs.build.buildservice._03._WorkspaceTemplate;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _WorkspaceTemplate
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String definitionUri;
    protected Calendar lastModifiedDate;
    protected String lastModifiedBy;

    // Elements
    protected _WorkspaceMapping[] mappings;

    public _WorkspaceTemplate()
    {
        super();
    }

    public _WorkspaceTemplate(
        final String definitionUri,
        final Calendar lastModifiedDate,
        final String lastModifiedBy,
        final _WorkspaceMapping[] mappings)
    {
        // TODO : Call super() instead of setting all fields directly?
        setDefinitionUri(definitionUri);
        setLastModifiedDate(lastModifiedDate);
        setLastModifiedBy(lastModifiedBy);
        setMappings(mappings);
    }

    public String getDefinitionUri()
    {
        return this.definitionUri;
    }

    public void setDefinitionUri(final String value)
    {
        this.definitionUri = value;
    }

    public Calendar getLastModifiedDate()
    {
        return this.lastModifiedDate;
    }

    public void setLastModifiedDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'LastModifiedDate' is a required attribute, its value cannot be null");
        }

        this.lastModifiedDate = value;
    }

    public String getLastModifiedBy()
    {
        return this.lastModifiedBy;
    }

    public void setLastModifiedBy(final String value)
    {
        this.lastModifiedBy = value;
    }

    public _WorkspaceMapping[] getMappings()
    {
        return this.mappings;
    }

    public void setMappings(_WorkspaceMapping[] value)
    {
        this.mappings = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DefinitionUri",
            this.definitionUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastModifiedDate",
            this.lastModifiedDate,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastModifiedBy",
            this.lastModifiedBy);

        // Elements
        if (this.mappings != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Mappings");

            for (int iterator0 = 0; iterator0 < this.mappings.length; iterator0++)
            {
                this.mappings[iterator0].writeAsElement(
                    writer,
                    "WorkspaceMapping");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("DefinitionUri"))
            {
                this.definitionUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastModifiedDate"))
            {
                this.lastModifiedDate = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("LastModifiedBy"))
            {
                this.lastModifiedBy = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Mappings"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _WorkspaceMapping complexObject0 = new _WorkspaceMapping();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.mappings = (_WorkspaceMapping[]) list0.toArray(new _WorkspaceMapping[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
