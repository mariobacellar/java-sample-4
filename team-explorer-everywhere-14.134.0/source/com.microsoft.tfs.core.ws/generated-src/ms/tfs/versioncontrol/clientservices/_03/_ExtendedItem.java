// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._ExtendedItem;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ExtendedItem
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int lver = 0;
    protected int did = 0;
    protected int latest = 0;
    protected _ItemType type = _ItemType.Any;
    protected int enc = -3;
    protected int itemid = 0;
    protected String local;
    protected String titem;
    protected String sitem;
    protected _ChangeType chg = new _ChangeType(
                new _ChangeType._ChangeType_Flag[] { _ChangeType._ChangeType_Flag.None });
    protected int chgEx = 0;
    protected boolean ochg = false;
    protected _LockLevel lock = _LockLevel.None;
    protected String lowner;
    protected String lownerdisp;
    protected Calendar date;

    // Elements
    protected boolean isBranch = false;
    protected _PropertyValue[] propertyValues;

    public _ExtendedItem()
    {
        super();
    }

    public _ExtendedItem(
        final int lver,
        final int did,
        final int latest,
        final _ItemType type,
        final int enc,
        final int itemid,
        final String local,
        final String titem,
        final String sitem,
        final _ChangeType chg,
        final int chgEx,
        final boolean ochg,
        final _LockLevel lock,
        final String lowner,
        final String lownerdisp,
        final Calendar date,
        final boolean isBranch,
        final _PropertyValue[] propertyValues)
    {
        // TODO : Call super() instead of setting all fields directly?
        setLver(lver);
        setDid(did);
        setLatest(latest);
        setType(type);
        setEnc(enc);
        setItemid(itemid);
        setLocal(local);
        setTitem(titem);
        setSitem(sitem);
        setChg(chg);
        setChgEx(chgEx);
        setOchg(ochg);
        setLock(lock);
        setLowner(lowner);
        setLownerdisp(lownerdisp);
        setDate(date);
        setIsBranch(isBranch);
        setPropertyValues(propertyValues);
    }

    public int getLver()
    {
        return this.lver;
    }

    public void setLver(final int value)
    {
        this.lver = value;
    }

    public int getDid()
    {
        return this.did;
    }

    public void setDid(final int value)
    {
        this.did = value;
    }

    public int getLatest()
    {
        return this.latest;
    }

    public void setLatest(final int value)
    {
        this.latest = value;
    }

    public _ItemType getType()
    {
        return this.type;
    }

    public void setType(final _ItemType value)
    {
        this.type = value;
    }

    public int getEnc()
    {
        return this.enc;
    }

    public void setEnc(final int value)
    {
        this.enc = value;
    }

    public int getItemid()
    {
        return this.itemid;
    }

    public void setItemid(final int value)
    {
        this.itemid = value;
    }

    public String getLocal()
    {
        return this.local;
    }

    public void setLocal(final String value)
    {
        this.local = value;
    }

    public String getTitem()
    {
        return this.titem;
    }

    public void setTitem(final String value)
    {
        this.titem = value;
    }

    public String getSitem()
    {
        return this.sitem;
    }

    public void setSitem(final String value)
    {
        this.sitem = value;
    }

    public _ChangeType getChg()
    {
        return this.chg;
    }

    public void setChg(final _ChangeType value)
    {
        this.chg = value;
    }

    public int getChgEx()
    {
        return this.chgEx;
    }

    public void setChgEx(final int value)
    {
        this.chgEx = value;
    }

    public boolean isOchg()
    {
        return this.ochg;
    }

    public void setOchg(final boolean value)
    {
        this.ochg = value;
    }

    public _LockLevel getLock()
    {
        return this.lock;
    }

    public void setLock(final _LockLevel value)
    {
        this.lock = value;
    }

    public String getLowner()
    {
        return this.lowner;
    }

    public void setLowner(final String value)
    {
        this.lowner = value;
    }

    public String getLownerdisp()
    {
        return this.lownerdisp;
    }

    public void setLownerdisp(final String value)
    {
        this.lownerdisp = value;
    }

    public Calendar getDate()
    {
        return this.date;
    }

    public void setDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'date' is a required attribute, its value cannot be null");
        }

        this.date = value;
    }

    public boolean isIsBranch()
    {
        return this.isBranch;
    }

    public void setIsBranch(boolean value)
    {
        this.isBranch = value;
    }

    public _PropertyValue[] getPropertyValues()
    {
        return this.propertyValues;
    }

    public void setPropertyValues(_PropertyValue[] value)
    {
        this.propertyValues = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "lver",
            this.lver);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "did",
            this.did);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "latest",
            this.latest);

        if (this.type != null)
        {
            this.type.writeAsAttribute(
                writer,
                "type");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "enc",
            this.enc);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "itemid",
            this.itemid);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "local",
            this.local);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "titem",
            this.titem);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "sitem",
            this.sitem);

        if (this.chg != null)
        {
            this.chg.writeAsAttribute(
                writer,
                "chg");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "chgEx",
            this.chgEx);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ochg",
            this.ochg);

        if (this.lock != null)
        {
            this.lock.writeAsAttribute(
                writer,
                "lock");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "lowner",
            this.lowner);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "lownerdisp",
            this.lownerdisp);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "date",
            this.date,
            true);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "IsBranch",
            this.isBranch);

        if (this.propertyValues != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PropertyValues");

            for (int iterator0 = 0; iterator0 < this.propertyValues.length; iterator0++)
            {
                this.propertyValues[iterator0].writeAsElement(
                    writer,
                    "PropertyValue");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("lver"))
            {
                this.lver = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("did"))
            {
                this.did = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("latest"))
            {
                this.latest = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("type"))
            {
                this.type = _ItemType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("enc"))
            {
                this.enc = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("itemid"))
            {
                this.itemid = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("local"))
            {
                this.local = attributeValue;
            }
            else if (localName.equalsIgnoreCase("titem"))
            {
                this.titem = attributeValue;
            }
            else if (localName.equalsIgnoreCase("sitem"))
            {
                this.sitem = attributeValue;
            }
            else if (localName.equalsIgnoreCase("chg"))
            {
                this.chg = new _ChangeType();
                this.chg.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("chgEx"))
            {
                this.chgEx = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ochg"))
            {
                this.ochg = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("lock"))
            {
                this.lock = _LockLevel.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("lowner"))
            {
                this.lowner = attributeValue;
            }
            else if (localName.equalsIgnoreCase("lownerdisp"))
            {
                this.lownerdisp = attributeValue;
            }
            else if (localName.equalsIgnoreCase("date"))
            {
                this.date = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("IsBranch"))
                {
                    this.isBranch = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("PropertyValues"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PropertyValue complexObject0 = new _PropertyValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.propertyValues = (_PropertyValue[]) list0.toArray(new _PropertyValue[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
