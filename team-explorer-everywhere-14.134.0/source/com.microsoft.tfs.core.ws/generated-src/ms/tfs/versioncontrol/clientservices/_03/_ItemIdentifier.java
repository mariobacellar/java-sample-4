// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ItemIdentifier;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ItemIdentifier
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String it;
    protected int di = 0;
    protected int ctype;

    // Elements
    protected _VersionSpec version;

    public _ItemIdentifier()
    {
        super();
    }

    public _ItemIdentifier(
        final String it,
        final int di,
        final int ctype,
        final _VersionSpec version)
    {
        // TODO : Call super() instead of setting all fields directly?
        setIt(it);
        setDi(di);
        setCtype(ctype);
        setVersion(version);
    }

    public String getIt()
    {
        return this.it;
    }

    public void setIt(final String value)
    {
        this.it = value;
    }

    public int getDi()
    {
        return this.di;
    }

    public void setDi(final int value)
    {
        this.di = value;
    }

    public int getCtype()
    {
        return this.ctype;
    }

    public void setCtype(final int value)
    {
        this.ctype = value;
    }

    public _VersionSpec getVersion()
    {
        return this.version;
    }

    public void setVersion(_VersionSpec value)
    {
        this.version = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "it",
            this.it);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "di",
            this.di);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ctype",
            this.ctype);

        // Elements
        if (this.version != null)
        {
            this.version.writeAsElement(
                writer,
                "Version");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("it"))
            {
                this.it = attributeValue;
            }
            else if (localName.equalsIgnoreCase("di"))
            {
                this.di = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ctype"))
            {
                this.ctype = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Version"))
                {
                    /*
                     * The element is an abstract type, so prepare to deserialize all the
                     * known derived types.
                     */
                    final String typeAttribute = reader.getAttributeValue(
                            Schemas.XSI,
                            "type");

                    if (typeAttribute == null)
                    {
                        throw new XMLStreamException(
                                "Element " + reader.getLocalName()
                                + " is for a derived type but did not include a type attribute");
                    }

                    if (typeAttribute.equals("ChangesetVersionSpec"))
                    {
                        this.version = new _ChangesetVersionSpec();
                    }
                    else if (typeAttribute.equals("DateVersionSpec"))
                    {
                        this.version = new _DateVersionSpec();
                    }
                    else if (typeAttribute.equals("LabelVersionSpec"))
                    {
                        this.version = new _LabelVersionSpec();
                    }
                    else if (typeAttribute.equals("LatestVersionSpec"))
                    {
                        this.version = new _LatestVersionSpec();
                    }
                    else if (typeAttribute.equals("WorkspaceVersionSpec"))
                    {
                        this.version = new _WorkspaceVersionSpec();
                    }

                    this.version.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
