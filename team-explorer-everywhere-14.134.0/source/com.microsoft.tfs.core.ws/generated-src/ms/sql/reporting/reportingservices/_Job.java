// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._Job;
import ms.sql.reporting.reportingservices._JobActionEnum;
import ms.sql.reporting.reportingservices._JobStatusEnum;
import ms.sql.reporting.reportingservices._JobTypeEnum;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Job
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String jobID;
    protected String name;
    protected String path;
    protected String description;
    protected String machine;
    protected String user;
    protected Calendar startDateTime;
    protected _JobActionEnum action;
    protected _JobTypeEnum type;
    protected _JobStatusEnum status;

    public _Job()
    {
        super();
    }

    public _Job(
        final String jobID,
        final String name,
        final String path,
        final String description,
        final String machine,
        final String user,
        final Calendar startDateTime,
        final _JobActionEnum action,
        final _JobTypeEnum type,
        final _JobStatusEnum status)
    {
        // TODO : Call super() instead of setting all fields directly?
        setJobID(jobID);
        setName(name);
        setPath(path);
        setDescription(description);
        setMachine(machine);
        setUser(user);
        setStartDateTime(startDateTime);
        setAction(action);
        setType(type);
        setStatus(status);
    }

    public String getJobID()
    {
        return this.jobID;
    }

    public void setJobID(String value)
    {
        this.jobID = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getPath()
    {
        return this.path;
    }

    public void setPath(String value)
    {
        this.path = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public String getMachine()
    {
        return this.machine;
    }

    public void setMachine(String value)
    {
        this.machine = value;
    }

    public String getUser()
    {
        return this.user;
    }

    public void setUser(String value)
    {
        this.user = value;
    }

    public Calendar getStartDateTime()
    {
        return this.startDateTime;
    }

    public void setStartDateTime(Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'StartDateTime' is a required element, its value cannot be null");
        }

        this.startDateTime = value;
    }

    public _JobActionEnum getAction()
    {
        return this.action;
    }

    public void setAction(_JobActionEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Action' is a required element, its value cannot be null");
        }

        this.action = value;
    }

    public _JobTypeEnum getType()
    {
        return this.type;
    }

    public void setType(_JobTypeEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Type' is a required element, its value cannot be null");
        }

        this.type = value;
    }

    public _JobStatusEnum getStatus()
    {
        return this.status;
    }

    public void setStatus(_JobStatusEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required element, its value cannot be null");
        }

        this.status = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "JobID",
            this.jobID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Path",
            this.path);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Machine",
            this.machine);
        XMLStreamWriterHelper.writeElement(
            writer,
            "User",
            this.user);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StartDateTime",
            this.startDateTime,
            true);
        this.action.writeAsElement(
            writer,
            "Action");
        this.type.writeAsElement(
            writer,
            "Type");
        this.status.writeAsElement(
            writer,
            "Status");

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("JobID"))
                {
                    this.jobID = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Path"))
                {
                    this.path = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Machine"))
                {
                    this.machine = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("User"))
                {
                    this.user = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("StartDateTime"))
                {
                    this.startDateTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("Action"))
                {
                    this.action = _JobActionEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Type"))
                {
                    this.type = _JobTypeEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Status"))
                {
                    this.status = _JobStatusEnum.fromString(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
