// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ActiveState;
import ms.sql.reporting.reportingservices._ArrayOfChoice1;
import ms.sql.reporting.reportingservices._ExtensionSettings;
import ms.sql.reporting.reportingservices._ParameterFieldReference;
import ms.sql.reporting.reportingservices._ParameterValue;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSubscriptionPropertiesResponse;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ReportingService2005Soap_GetSubscriptionPropertiesResponse
    implements ElementDeserializable
{
    // No attributes    

    // Elements
    protected String owner;
    protected _ExtensionSettings extensionSettings;
    protected String description;
    protected _ActiveState active;
    protected String status;
    protected String eventType;
    protected String matchData;
    protected _ParameterValue[] parameters;

    public _ReportingService2005Soap_GetSubscriptionPropertiesResponse()
    {
        super();
    }

    public _ReportingService2005Soap_GetSubscriptionPropertiesResponse(
        final String owner,
        final _ExtensionSettings extensionSettings,
        final String description,
        final _ActiveState active,
        final String status,
        final String eventType,
        final String matchData,
        final _ParameterValue[] parameters)
    {
        // TODO : Call super() instead of setting all fields directly?
        setOwner(owner);
        setExtensionSettings(extensionSettings);
        setDescription(description);
        setActive(active);
        setStatus(status);
        setEventType(eventType);
        setMatchData(matchData);
        setParameters(parameters);
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(String value)
    {
        this.owner = value;
    }

    public _ExtensionSettings getExtensionSettings()
    {
        return this.extensionSettings;
    }

    public void setExtensionSettings(_ExtensionSettings value)
    {
        this.extensionSettings = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public _ActiveState getActive()
    {
        return this.active;
    }

    public void setActive(_ActiveState value)
    {
        this.active = value;
    }

    public String getStatus()
    {
        return this.status;
    }

    public void setStatus(String value)
    {
        this.status = value;
    }

    public String getEventType()
    {
        return this.eventType;
    }

    public void setEventType(String value)
    {
        this.eventType = value;
    }

    public String getMatchData()
    {
        return this.matchData;
    }

    public void setMatchData(String value)
    {
        this.matchData = value;
    }

    public _ParameterValue[] getParameters()
    {
        return this.parameters;
    }

    public void setParameters(_ParameterValue[] value)
    {
        this.parameters = value;
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Owner"))
                {
                    this.owner = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ExtensionSettings"))
                {
                    this.extensionSettings = new _ExtensionSettings();
                    this.extensionSettings.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Active"))
                {
                    this.active = new _ActiveState();
                    this.active.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Status"))
                {
                    this.status = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("EventType"))
                {
                    this.eventType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("MatchData"))
                {
                    this.matchData = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Parameters"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ParameterValue complexObject0 = new _ParameterValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.parameters = (_ParameterValue[]) list0.toArray(new _ParameterValue[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
