// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._DailyRecurrence;
import ms.sql.reporting.reportingservices._DaysOfWeekSelector;
import ms.sql.reporting.reportingservices._MinuteRecurrence;
import ms.sql.reporting.reportingservices._MonthlyDOWRecurrence;
import ms.sql.reporting.reportingservices._MonthlyRecurrence;
import ms.sql.reporting.reportingservices._MonthsOfYearSelector;
import ms.sql.reporting.reportingservices._Schedule;
import ms.sql.reporting.reportingservices._ScheduleDefinition;
import ms.sql.reporting.reportingservices._ScheduleStateEnum;
import ms.sql.reporting.reportingservices._WeekNumberEnum;
import ms.sql.reporting.reportingservices._WeeklyRecurrence;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Schedule
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String scheduleID;
    protected String name;
    protected _ScheduleDefinition definition;
    protected String description;
    protected String creator;
    protected Calendar nextRunTime;
    protected Calendar lastRunTime;
    protected boolean referencesPresent;
    protected _ScheduleStateEnum state;

    public _Schedule()
    {
        super();
    }

    public _Schedule(
        final String scheduleID,
        final String name,
        final _ScheduleDefinition definition,
        final String description,
        final String creator,
        final Calendar nextRunTime,
        final Calendar lastRunTime,
        final boolean referencesPresent,
        final _ScheduleStateEnum state)
    {
        // TODO : Call super() instead of setting all fields directly?
        setScheduleID(scheduleID);
        setName(name);
        setDefinition(definition);
        setDescription(description);
        setCreator(creator);
        setNextRunTime(nextRunTime);
        setLastRunTime(lastRunTime);
        setReferencesPresent(referencesPresent);
        setState(state);
    }

    public String getScheduleID()
    {
        return this.scheduleID;
    }

    public void setScheduleID(String value)
    {
        this.scheduleID = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public _ScheduleDefinition getDefinition()
    {
        return this.definition;
    }

    public void setDefinition(_ScheduleDefinition value)
    {
        this.definition = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public String getCreator()
    {
        return this.creator;
    }

    public void setCreator(String value)
    {
        this.creator = value;
    }

    public Calendar getNextRunTime()
    {
        return this.nextRunTime;
    }

    public void setNextRunTime(Calendar value)
    {
        this.nextRunTime = value;
    }

    public Calendar getLastRunTime()
    {
        return this.lastRunTime;
    }

    public void setLastRunTime(Calendar value)
    {
        this.lastRunTime = value;
    }

    public boolean isReferencesPresent()
    {
        return this.referencesPresent;
    }

    public void setReferencesPresent(boolean value)
    {
        this.referencesPresent = value;
    }

    public _ScheduleStateEnum getState()
    {
        return this.state;
    }

    public void setState(_ScheduleStateEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'State' is a required element, its value cannot be null");
        }

        this.state = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ScheduleID",
            this.scheduleID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);

        if (this.definition != null)
        {
            this.definition.writeAsElement(
                writer,
                "Definition");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Creator",
            this.creator);
        XMLStreamWriterHelper.writeElement(
            writer,
            "NextRunTime",
            this.nextRunTime,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LastRunTime",
            this.lastRunTime,
            true);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ReferencesPresent",
            this.referencesPresent);
        this.state.writeAsElement(
            writer,
            "State");

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ScheduleID"))
                {
                    this.scheduleID = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Definition"))
                {
                    this.definition = new _ScheduleDefinition();
                    this.definition.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Creator"))
                {
                    this.creator = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("NextRunTime"))
                {
                    this.nextRunTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("LastRunTime"))
                {
                    this.lastRunTime = XMLConvert.toCalendar(
                            reader.getElementText(),
                            true);
                }
                else if (localName.equalsIgnoreCase("ReferencesPresent"))
                {
                    this.referencesPresent = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("State"))
                {
                    this.state = _ScheduleStateEnum.fromString(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
