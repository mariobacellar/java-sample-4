// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._Extension;
import ms.sql.reporting.reportingservices._ExtensionTypeEnum;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Extension
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _ExtensionTypeEnum extensionType;
    protected String name;
    protected String localizedName;
    protected boolean visible;
    protected boolean isModelGenerationSupported;

    public _Extension()
    {
        super();
    }

    public _Extension(
        final _ExtensionTypeEnum extensionType,
        final String name,
        final String localizedName,
        final boolean visible,
        final boolean isModelGenerationSupported)
    {
        // TODO : Call super() instead of setting all fields directly?
        setExtensionType(extensionType);
        setName(name);
        setLocalizedName(localizedName);
        setVisible(visible);
        setIsModelGenerationSupported(isModelGenerationSupported);
    }

    public _ExtensionTypeEnum getExtensionType()
    {
        return this.extensionType;
    }

    public void setExtensionType(_ExtensionTypeEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'ExtensionType' is a required element, its value cannot be null");
        }

        this.extensionType = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getLocalizedName()
    {
        return this.localizedName;
    }

    public void setLocalizedName(String value)
    {
        this.localizedName = value;
    }

    public boolean isVisible()
    {
        return this.visible;
    }

    public void setVisible(boolean value)
    {
        this.visible = value;
    }

    public boolean isIsModelGenerationSupported()
    {
        return this.isModelGenerationSupported;
    }

    public void setIsModelGenerationSupported(boolean value)
    {
        this.isModelGenerationSupported = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        this.extensionType.writeAsElement(
            writer,
            "ExtensionType");
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "LocalizedName",
            this.localizedName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Visible",
            this.visible);
        XMLStreamWriterHelper.writeElement(
            writer,
            "IsModelGenerationSupported",
            this.isModelGenerationSupported);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ExtensionType"))
                {
                    this.extensionType = _ExtensionTypeEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("LocalizedName"))
                {
                    this.localizedName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Visible"))
                {
                    this.visible = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("IsModelGenerationSupported"))
                {
                    this.isModelGenerationSupported = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
