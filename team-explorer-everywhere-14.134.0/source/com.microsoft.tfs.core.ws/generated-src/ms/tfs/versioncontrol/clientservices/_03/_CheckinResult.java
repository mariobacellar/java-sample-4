// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._CheckinResult;
import ms.tfs.versioncontrol.clientservices._03._GetOperation;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CheckinResult
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected int cset;
    protected Calendar date;
    protected int state;
    protected int ticket;

    // Elements
    protected String[] undoneServerItems;
    protected _GetOperation[] localVersionUpdates;

    public _CheckinResult()
    {
        super();
    }

    public _CheckinResult(
        final int cset,
        final Calendar date,
        final int state,
        final int ticket,
        final String[] undoneServerItems,
        final _GetOperation[] localVersionUpdates)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCset(cset);
        setDate(date);
        setState(state);
        setTicket(ticket);
        setUndoneServerItems(undoneServerItems);
        setLocalVersionUpdates(localVersionUpdates);
    }

    public int getCset()
    {
        return this.cset;
    }

    public void setCset(final int value)
    {
        this.cset = value;
    }

    public Calendar getDate()
    {
        return this.date;
    }

    public void setDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'date' is a required attribute, its value cannot be null");
        }

        this.date = value;
    }

    public int getState()
    {
        return this.state;
    }

    public void setState(final int value)
    {
        this.state = value;
    }

    public int getTicket()
    {
        return this.ticket;
    }

    public void setTicket(final int value)
    {
        this.ticket = value;
    }

    public String[] getUndoneServerItems()
    {
        return this.undoneServerItems;
    }

    public void setUndoneServerItems(String[] value)
    {
        this.undoneServerItems = value;
    }

    public _GetOperation[] getLocalVersionUpdates()
    {
        return this.localVersionUpdates;
    }

    public void setLocalVersionUpdates(_GetOperation[] value)
    {
        this.localVersionUpdates = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "cset",
            this.cset);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "date",
            this.date,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "state",
            this.state);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ticket",
            this.ticket);

        // Elements
        if (this.undoneServerItems != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("UndoneServerItems");

            for (int iterator0 = 0; iterator0 < this.undoneServerItems.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.undoneServerItems[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.localVersionUpdates != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("LocalVersionUpdates");

            for (int iterator0 = 0; iterator0 < this.localVersionUpdates.length; iterator0++)
            {
                this.localVersionUpdates[iterator0].writeAsElement(
                    writer,
                    "GetOperation");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("cset"))
            {
                this.cset = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("date"))
            {
                this.date = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("state"))
            {
                this.state = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ticket"))
            {
                this.ticket = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("UndoneServerItems"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.undoneServerItems = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("LocalVersionUpdates"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _GetOperation complexObject0 = new _GetOperation();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.localVersionUpdates = (_GetOperation[]) list0.toArray(new _GetOperation[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
