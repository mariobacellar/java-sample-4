// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.workitemtracking.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.workitemtracking.clientservices._03._AccessControlEntryData;
import ms.tfs.workitemtracking.clientservices._03._AccessControlEntryExtendedData;
import ms.tfs.workitemtracking.clientservices._03._AccessControlListMetadata;
import ms.tfs.workitemtracking.clientservices._03._ExtendedAccessControlListData;
import ms.tfs.workitemtracking.clientservices._03._IdentityDescriptorData;
import ms.tfs.workitemtracking.clientservices._03._RequiredPermissions;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ExtendedAccessControlListData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String token;
    protected boolean inheritPermissions;
    protected _AccessControlEntryData[] permissions;
    protected boolean isEditable;
    protected _AccessControlListMetadata[] metadata;

    public _ExtendedAccessControlListData()
    {
        super();
    }

    public _ExtendedAccessControlListData(
        final String token,
        final boolean inheritPermissions,
        final _AccessControlEntryData[] permissions,
        final boolean isEditable,
        final _AccessControlListMetadata[] metadata)
    {
        // TODO : Call super() instead of setting all fields directly?
        setToken(token);
        setInheritPermissions(inheritPermissions);
        setPermissions(permissions);
        setIsEditable(isEditable);
        setMetadata(metadata);
    }

    public String getToken()
    {
        return this.token;
    }

    public void setToken(String value)
    {
        this.token = value;
    }

    public boolean isInheritPermissions()
    {
        return this.inheritPermissions;
    }

    public void setInheritPermissions(boolean value)
    {
        this.inheritPermissions = value;
    }

    public _AccessControlEntryData[] getPermissions()
    {
        return this.permissions;
    }

    public void setPermissions(_AccessControlEntryData[] value)
    {
        this.permissions = value;
    }

    public boolean isIsEditable()
    {
        return this.isEditable;
    }

    public void setIsEditable(boolean value)
    {
        this.isEditable = value;
    }

    public _AccessControlListMetadata[] getMetadata()
    {
        return this.metadata;
    }

    public void setMetadata(_AccessControlListMetadata[] value)
    {
        this.metadata = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Token",
            this.token);
        XMLStreamWriterHelper.writeElement(
            writer,
            "InheritPermissions",
            this.inheritPermissions);

        if (this.permissions != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Permissions");

            for (int iterator0 = 0; iterator0 < this.permissions.length; iterator0++)
            {
                this.permissions[iterator0].writeAsElement(
                    writer,
                    "AccessControlEntryData");
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "IsEditable",
            this.isEditable);

        if (this.metadata != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Metadata");

            for (int iterator0 = 0; iterator0 < this.metadata.length; iterator0++)
            {
                this.metadata[iterator0].writeAsElement(
                    writer,
                    "AccessControlListMetadata");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Token"))
                {
                    this.token = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("InheritPermissions"))
                {
                    this.inheritPermissions = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Permissions"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _AccessControlEntryData complexObject0 = new _AccessControlEntryData();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.permissions = (_AccessControlEntryData[]) list0.toArray(
                            new _AccessControlEntryData[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("IsEditable"))
                {
                    this.isEditable = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Metadata"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _AccessControlListMetadata complexObject0 = new _AccessControlListMetadata();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.metadata = (_AccessControlListMetadata[]) list0.toArray(
                                new _AccessControlListMetadata[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
