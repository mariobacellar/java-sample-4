// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._Agent2008Status;
import ms.tfs.build.buildservice._03._BuildAgent2008;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildAgent2008
    extends _BuildGroupItem
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String machineName;
    protected int port;
    protected boolean requireSecureChannel;
    protected int maxProcesses;
    protected String buildDirectory;
    protected _Agent2008Status status;
    protected int queueCount;

    // Elements
    protected String statusMessage;
    protected String description;

    public _BuildAgent2008()
    {
        super();
    }

    public _BuildAgent2008(
        final String uri,
        final String fullPath,
        final String machineName,
        final int port,
        final boolean requireSecureChannel,
        final int maxProcesses,
        final String buildDirectory,
        final _Agent2008Status status,
        final int queueCount,
        final String statusMessage,
        final String description)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setFullPath(fullPath);
        setMachineName(machineName);
        setPort(port);
        setRequireSecureChannel(requireSecureChannel);
        setMaxProcesses(maxProcesses);
        setBuildDirectory(buildDirectory);
        setStatus(status);
        setQueueCount(queueCount);
        setStatusMessage(statusMessage);
        setDescription(description);
    }

    public String getMachineName()
    {
        return this.machineName;
    }

    public void setMachineName(final String value)
    {
        this.machineName = value;
    }

    public int getPort()
    {
        return this.port;
    }

    public void setPort(final int value)
    {
        this.port = value;
    }

    public boolean isRequireSecureChannel()
    {
        return this.requireSecureChannel;
    }

    public void setRequireSecureChannel(final boolean value)
    {
        this.requireSecureChannel = value;
    }

    public int getMaxProcesses()
    {
        return this.maxProcesses;
    }

    public void setMaxProcesses(final int value)
    {
        this.maxProcesses = value;
    }

    public String getBuildDirectory()
    {
        return this.buildDirectory;
    }

    public void setBuildDirectory(final String value)
    {
        this.buildDirectory = value;
    }

    public _Agent2008Status getStatus()
    {
        return this.status;
    }

    public void setStatus(final _Agent2008Status value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required attribute, its value cannot be null");
        }

        this.status = value;
    }

    public int getQueueCount()
    {
        return this.queueCount;
    }

    public void setQueueCount(final int value)
    {
        this.queueCount = value;
    }

    public String getStatusMessage()
    {
        return this.statusMessage;
    }

    public void setStatusMessage(String value)
    {
        this.statusMessage = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "BuildAgent");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FullPath",
            this.fullPath);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "MachineName",
            this.machineName);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Port",
            this.port);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequireSecureChannel",
            this.requireSecureChannel);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "MaxProcesses",
            this.maxProcesses);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildDirectory",
            this.buildDirectory);
        this.status.writeAsAttribute(
            writer,
            "Status");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "QueueCount",
            this.queueCount);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "StatusMessage",
            this.statusMessage);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("FullPath"))
            {
                this.fullPath = attributeValue;
            }
            else if (localName.equalsIgnoreCase("MachineName"))
            {
                this.machineName = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Port"))
            {
                this.port = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("RequireSecureChannel"))
            {
                this.requireSecureChannel = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("MaxProcesses"))
            {
                this.maxProcesses = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildDirectory"))
            {
                this.buildDirectory = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Status"))
            {
                this.status = _Agent2008Status.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("QueueCount"))
            {
                this.queueCount = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("StatusMessage"))
                {
                    this.statusMessage = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
