// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._DailyRecurrence;
import ms.sql.reporting.reportingservices._DaysOfWeekSelector;
import ms.sql.reporting.reportingservices._MinuteRecurrence;
import ms.sql.reporting.reportingservices._MonthlyDOWRecurrence;
import ms.sql.reporting.reportingservices._MonthlyRecurrence;
import ms.sql.reporting.reportingservices._MonthsOfYearSelector;
import ms.sql.reporting.reportingservices._ScheduleDefinition;
import ms.sql.reporting.reportingservices._ScheduleReference;
import ms.sql.reporting.reportingservices._WeekNumberEnum;
import ms.sql.reporting.reportingservices._WeeklyRecurrence;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ScheduleReference
    extends _ScheduleDefinitionOrReference
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String scheduleID;
    protected _ScheduleDefinition definition;

    public _ScheduleReference()
    {
        super();
    }

    public _ScheduleReference(
        final String scheduleID,
        final _ScheduleDefinition definition)
    {
        // TODO : Call super() instead of setting all fields directly?
        setScheduleID(scheduleID);
        setDefinition(definition);
    }

    public String getScheduleID()
    {
        return this.scheduleID;
    }

    public void setScheduleID(String value)
    {
        this.scheduleID = value;
    }

    public _ScheduleDefinition getDefinition()
    {
        return this.definition;
    }

    public void setDefinition(_ScheduleDefinition value)
    {
        this.definition = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "ScheduleReference");

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ScheduleID",
            this.scheduleID);

        if (this.definition != null)
        {
            this.definition.writeAsElement(
                writer,
                "Definition");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ScheduleID"))
                {
                    this.scheduleID = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Definition"))
                {
                    this.definition = new _ScheduleDefinition();
                    this.definition.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
