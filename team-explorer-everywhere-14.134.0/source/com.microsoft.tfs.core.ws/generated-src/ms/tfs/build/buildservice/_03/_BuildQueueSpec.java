// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildControllerSpec;
import ms.tfs.build.buildservice._03._BuildDefinitionSpec;
import ms.tfs.build.buildservice._03._BuildQueueSpec;
import ms.tfs.build.buildservice._03._ContinuousIntegrationType;
import ms.tfs.build.buildservice._03._QueryOptions;
import ms.tfs.build.buildservice._03._QueueStatus;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildQueueSpec
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected _QueryOptions options = new _QueryOptions(
                new _QueryOptions._QueryOptions_Flag[] { _QueryOptions._QueryOptions_Flag.All });
    protected String requestedFor;
    protected _QueueStatus statusFlags = new _QueueStatus(
                new _QueueStatus._QueueStatus_Flag[] { _QueueStatus._QueueStatus_Flag.All });
    protected int completedAge;

    // Elements
    protected _BuildControllerSpec controllerSpec;

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DefinitionSpec</code></li>
     * <li><code>DefinitionUris</code></li>
     * </ul>
     * </p>
     */
    protected _BuildDefinitionSpec definitionSpec;

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DefinitionSpec</code></li>
     * <li><code>DefinitionUris</code></li>
     * </ul>
     * </p>
     */
    protected String[] definitionUris;

    public _BuildQueueSpec()
    {
        super();
    }

    public _BuildQueueSpec(
        final _QueryOptions options,
        final String requestedFor,
        final _QueueStatus statusFlags,
        final int completedAge,
        final _BuildControllerSpec controllerSpec,
        final _BuildDefinitionSpec definitionSpec,
        final String[] definitionUris)
    {
        // TODO : Call super() instead of setting all fields directly?
        setOptions(options);
        setRequestedFor(requestedFor);
        setStatusFlags(statusFlags);
        setCompletedAge(completedAge);
        setControllerSpec(controllerSpec);
        setDefinitionSpec(definitionSpec);
        setDefinitionUris(definitionUris);
    }

    public _QueryOptions getOptions()
    {
        return this.options;
    }

    public void setOptions(final _QueryOptions value)
    {
        this.options = value;
    }

    public String getRequestedFor()
    {
        return this.requestedFor;
    }

    public void setRequestedFor(final String value)
    {
        this.requestedFor = value;
    }

    public _QueueStatus getStatusFlags()
    {
        return this.statusFlags;
    }

    public void setStatusFlags(final _QueueStatus value)
    {
        this.statusFlags = value;
    }

    public int getCompletedAge()
    {
        return this.completedAge;
    }

    public void setCompletedAge(final int value)
    {
        this.completedAge = value;
    }

    public _BuildControllerSpec getControllerSpec()
    {
        return this.controllerSpec;
    }

    public void setControllerSpec(_BuildControllerSpec value)
    {
        this.controllerSpec = value;
    }

    public _BuildDefinitionSpec getDefinitionSpec()
    {
        return this.definitionSpec;
    }

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DefinitionSpec</code></li>
     * <li><code>DefinitionUris</code></li>
     * </ul>
     * </p>
     */
    public void setDefinitionSpec(_BuildDefinitionSpec value)
    {
        this.definitionSpec = value;
    }

    public String[] getDefinitionUris()
    {
        return this.definitionUris;
    }

    /**
     * <p><em>XML Schema Choice Warning</em></p>
     * <p>Only one of these elements may be non-null when this object is serialized:<p>
     * <ul>
     * <li><code>DefinitionSpec</code></li>
     * <li><code>DefinitionUris</code></li>
     * </ul>
     * </p>
     */
    public void setDefinitionUris(String[] value)
    {
        this.definitionUris = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        if (this.options != null)
        {
            this.options.writeAsAttribute(
                writer,
                "Options");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequestedFor",
            this.requestedFor);

        if (this.statusFlags != null)
        {
            this.statusFlags.writeAsAttribute(
                writer,
                "StatusFlags");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "CompletedAge",
            this.completedAge);

        // Elements
        if (this.controllerSpec != null)
        {
            this.controllerSpec.writeAsElement(
                writer,
                "ControllerSpec");
        }

        if (this.definitionSpec != null)
        {
            this.definitionSpec.writeAsElement(
                writer,
                "DefinitionSpec");
        }

        if (this.definitionUris != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DefinitionUris");

            for (int iterator0 = 0; iterator0 < this.definitionUris.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.definitionUris[iterator0]);
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Options"))
            {
                this.options = new _QueryOptions();
                this.options.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("RequestedFor"))
            {
                this.requestedFor = attributeValue;
            }
            else if (localName.equalsIgnoreCase("StatusFlags"))
            {
                this.statusFlags = new _QueueStatus();
                this.statusFlags.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("CompletedAge"))
            {
                this.completedAge = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ControllerSpec"))
                {
                    this.controllerSpec = new _BuildControllerSpec();
                    this.controllerSpec.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DefinitionSpec"))
                {
                    this.definitionSpec = new _BuildDefinitionSpec();
                    this.definitionSpec.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("DefinitionUris"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.definitionUris = (String[]) list0.toArray(new String[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
