// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildDefinition;
import ms.tfs.build.buildservice._03._BuildReason;
import ms.tfs.build.buildservice._03._BuildStatus;
import ms.tfs.build.buildservice._03._ContinuousIntegrationType;
import ms.tfs.build.buildservice._03._DeleteOptions;
import ms.tfs.build.buildservice._03._ProcessTemplate;
import ms.tfs.build.buildservice._03._ProcessTemplateType;
import ms.tfs.build.buildservice._03._RetentionPolicy;
import ms.tfs.build.buildservice._03._Schedule;
import ms.tfs.build.buildservice._03._ScheduleDays;
import ms.tfs.build.buildservice._03._WorkspaceMapping;
import ms.tfs.build.buildservice._03._WorkspaceMappingType;
import ms.tfs.build.buildservice._03._WorkspaceTemplate;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDefinition
    extends _BuildGroupItem
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String buildControllerUri;
    protected _ContinuousIntegrationType continuousIntegrationType = new _ContinuousIntegrationType(
                new _ContinuousIntegrationType._ContinuousIntegrationType_Flag[]
                {
                    _ContinuousIntegrationType._ContinuousIntegrationType_Flag.None
                });
    protected int continuousIntegrationQuietPeriod;
    protected String defaultDropLocation;
    protected boolean enabled;
    protected String lastBuildUri;
    protected String lastGoodBuildUri;
    protected String lastGoodBuildLabel;
    protected String defaultBuildAgentUri;
    protected String configurationFolderUri;
    protected int maxTimeout;

    // Elements
    protected String description;
    protected _ProcessTemplate process;
    protected String processParameters;
    protected _RetentionPolicy[] retentionPolicies;
    protected _Schedule[] schedules;
    protected _WorkspaceTemplate workspaceTemplate;

    public _BuildDefinition()
    {
        super();
    }

    public _BuildDefinition(
        final String uri,
        final String fullPath,
        final String buildControllerUri,
        final _ContinuousIntegrationType continuousIntegrationType,
        final int continuousIntegrationQuietPeriod,
        final String defaultDropLocation,
        final boolean enabled,
        final String lastBuildUri,
        final String lastGoodBuildUri,
        final String lastGoodBuildLabel,
        final String defaultBuildAgentUri,
        final String configurationFolderUri,
        final int maxTimeout,
        final String description,
        final _ProcessTemplate process,
        final String processParameters,
        final _RetentionPolicy[] retentionPolicies,
        final _Schedule[] schedules,
        final _WorkspaceTemplate workspaceTemplate)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setFullPath(fullPath);
        setBuildControllerUri(buildControllerUri);
        setContinuousIntegrationType(continuousIntegrationType);
        setContinuousIntegrationQuietPeriod(continuousIntegrationQuietPeriod);
        setDefaultDropLocation(defaultDropLocation);
        setEnabled(enabled);
        setLastBuildUri(lastBuildUri);
        setLastGoodBuildUri(lastGoodBuildUri);
        setLastGoodBuildLabel(lastGoodBuildLabel);
        setDefaultBuildAgentUri(defaultBuildAgentUri);
        setConfigurationFolderUri(configurationFolderUri);
        setMaxTimeout(maxTimeout);
        setDescription(description);
        setProcess(process);
        setProcessParameters(processParameters);
        setRetentionPolicies(retentionPolicies);
        setSchedules(schedules);
        setWorkspaceTemplate(workspaceTemplate);
    }

    public String getBuildControllerUri()
    {
        return this.buildControllerUri;
    }

    public void setBuildControllerUri(final String value)
    {
        this.buildControllerUri = value;
    }

    public _ContinuousIntegrationType getContinuousIntegrationType()
    {
        return this.continuousIntegrationType;
    }

    public void setContinuousIntegrationType(final _ContinuousIntegrationType value)
    {
        this.continuousIntegrationType = value;
    }

    public int getContinuousIntegrationQuietPeriod()
    {
        return this.continuousIntegrationQuietPeriod;
    }

    public void setContinuousIntegrationQuietPeriod(final int value)
    {
        this.continuousIntegrationQuietPeriod = value;
    }

    public String getDefaultDropLocation()
    {
        return this.defaultDropLocation;
    }

    public void setDefaultDropLocation(final String value)
    {
        this.defaultDropLocation = value;
    }

    public boolean isEnabled()
    {
        return this.enabled;
    }

    public void setEnabled(final boolean value)
    {
        this.enabled = value;
    }

    public String getLastBuildUri()
    {
        return this.lastBuildUri;
    }

    public void setLastBuildUri(final String value)
    {
        this.lastBuildUri = value;
    }

    public String getLastGoodBuildUri()
    {
        return this.lastGoodBuildUri;
    }

    public void setLastGoodBuildUri(final String value)
    {
        this.lastGoodBuildUri = value;
    }

    public String getLastGoodBuildLabel()
    {
        return this.lastGoodBuildLabel;
    }

    public void setLastGoodBuildLabel(final String value)
    {
        this.lastGoodBuildLabel = value;
    }

    public String getDefaultBuildAgentUri()
    {
        return this.defaultBuildAgentUri;
    }

    public void setDefaultBuildAgentUri(final String value)
    {
        this.defaultBuildAgentUri = value;
    }

    public String getConfigurationFolderUri()
    {
        return this.configurationFolderUri;
    }

    public void setConfigurationFolderUri(final String value)
    {
        this.configurationFolderUri = value;
    }

    public int getMaxTimeout()
    {
        return this.maxTimeout;
    }

    public void setMaxTimeout(final int value)
    {
        this.maxTimeout = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public _ProcessTemplate getProcess()
    {
        return this.process;
    }

    public void setProcess(_ProcessTemplate value)
    {
        this.process = value;
    }

    public String getProcessParameters()
    {
        return this.processParameters;
    }

    public void setProcessParameters(String value)
    {
        this.processParameters = value;
    }

    public _RetentionPolicy[] getRetentionPolicies()
    {
        return this.retentionPolicies;
    }

    public void setRetentionPolicies(_RetentionPolicy[] value)
    {
        this.retentionPolicies = value;
    }

    public _Schedule[] getSchedules()
    {
        return this.schedules;
    }

    public void setSchedules(_Schedule[] value)
    {
        this.schedules = value;
    }

    public _WorkspaceTemplate getWorkspaceTemplate()
    {
        return this.workspaceTemplate;
    }

    public void setWorkspaceTemplate(_WorkspaceTemplate value)
    {
        this.workspaceTemplate = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "BuildDefinition");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FullPath",
            this.fullPath);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildControllerUri",
            this.buildControllerUri);

        if (this.continuousIntegrationType != null)
        {
            this.continuousIntegrationType.writeAsAttribute(
                writer,
                "ContinuousIntegrationType");
        }

        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ContinuousIntegrationQuietPeriod",
            this.continuousIntegrationQuietPeriod);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DefaultDropLocation",
            this.defaultDropLocation);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Enabled",
            this.enabled);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastBuildUri",
            this.lastBuildUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastGoodBuildUri",
            this.lastGoodBuildUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastGoodBuildLabel",
            this.lastGoodBuildLabel);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DefaultBuildAgentUri",
            this.defaultBuildAgentUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ConfigurationFolderUri",
            this.configurationFolderUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "MaxTimeout",
            this.maxTimeout);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);

        if (this.process != null)
        {
            this.process.writeAsElement(
                writer,
                "Process");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "ProcessParameters",
            this.processParameters);

        if (this.retentionPolicies != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("RetentionPolicies");

            for (int iterator0 = 0; iterator0 < this.retentionPolicies.length; iterator0++)
            {
                this.retentionPolicies[iterator0].writeAsElement(
                    writer,
                    "RetentionPolicy");
            }

            writer.writeEndElement();
        }

        if (this.schedules != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Schedules");

            for (int iterator0 = 0; iterator0 < this.schedules.length; iterator0++)
            {
                this.schedules[iterator0].writeAsElement(
                    writer,
                    "Schedule");
            }

            writer.writeEndElement();
        }

        if (this.workspaceTemplate != null)
        {
            this.workspaceTemplate.writeAsElement(
                writer,
                "WorkspaceTemplate");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("FullPath"))
            {
                this.fullPath = attributeValue;
            }
            else if (localName.equalsIgnoreCase("BuildControllerUri"))
            {
                this.buildControllerUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ContinuousIntegrationType"))
            {
                this.continuousIntegrationType = new _ContinuousIntegrationType();
                this.continuousIntegrationType.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ContinuousIntegrationQuietPeriod"))
            {
                this.continuousIntegrationQuietPeriod = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("DefaultDropLocation"))
            {
                this.defaultDropLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("Enabled"))
            {
                this.enabled = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("LastBuildUri"))
            {
                this.lastBuildUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastGoodBuildUri"))
            {
                this.lastGoodBuildUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastGoodBuildLabel"))
            {
                this.lastGoodBuildLabel = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DefaultBuildAgentUri"))
            {
                this.defaultBuildAgentUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ConfigurationFolderUri"))
            {
                this.configurationFolderUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("MaxTimeout"))
            {
                this.maxTimeout = XMLConvert.toInt(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Process"))
                {
                    this.process = new _ProcessTemplate();
                    this.process.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("ProcessParameters"))
                {
                    this.processParameters = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("RetentionPolicies"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _RetentionPolicy complexObject0 = new _RetentionPolicy();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.retentionPolicies = (_RetentionPolicy[]) list0.toArray(new _RetentionPolicy[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Schedules"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _Schedule complexObject0 = new _Schedule();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.schedules = (_Schedule[]) list0.toArray(new _Schedule[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("WorkspaceTemplate"))
                {
                    this.workspaceTemplate = new _WorkspaceTemplate();
                    this.workspaceTemplate.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
