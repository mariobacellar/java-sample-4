// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._Warning;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _Warning
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String code;
    protected String severity;
    protected String objectName;
    protected String objectType;
    protected String message;

    public _Warning()
    {
        super();
    }

    public _Warning(
        final String code,
        final String severity,
        final String objectName,
        final String objectType,
        final String message)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCode(code);
        setSeverity(severity);
        setObjectName(objectName);
        setObjectType(objectType);
        setMessage(message);
    }

    public String getCode()
    {
        return this.code;
    }

    public void setCode(String value)
    {
        this.code = value;
    }

    public String getSeverity()
    {
        return this.severity;
    }

    public void setSeverity(String value)
    {
        this.severity = value;
    }

    public String getObjectName()
    {
        return this.objectName;
    }

    public void setObjectName(String value)
    {
        this.objectName = value;
    }

    public String getObjectType()
    {
        return this.objectType;
    }

    public void setObjectType(String value)
    {
        this.objectType = value;
    }

    public String getMessage()
    {
        return this.message;
    }

    public void setMessage(String value)
    {
        this.message = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Code",
            this.code);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Severity",
            this.severity);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ObjectName",
            this.objectName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ObjectType",
            this.objectType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Message",
            this.message);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Code"))
                {
                    this.code = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Severity"))
                {
                    this.severity = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ObjectName"))
                {
                    this.objectName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ObjectType"))
                {
                    this.objectType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Message"))
                {
                    this.message = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
