// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._CatalogResourceType;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CatalogResourceType
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String identifier;
    protected String displayName;

    // Elements
    protected String description;

    public _CatalogResourceType()
    {
        super();
    }

    public _CatalogResourceType(
        final String identifier,
        final String displayName,
        final String description)
    {
        // TODO : Call super() instead of setting all fields directly?
        setIdentifier(identifier);
        setDisplayName(displayName);
        setDescription(description);
    }

    public String getIdentifier()
    {
        return this.identifier;
    }

    public void setIdentifier(final String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Identifier' is a required attribute, its value cannot be null");
        }

        this.identifier = value;
    }

    public String getDisplayName()
    {
        return this.displayName;
    }

    public void setDisplayName(final String value)
    {
        this.displayName = value;
    }

    public String getDescription()
    {
        return this.description;
    }

    public void setDescription(String value)
    {
        this.description = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Identifier",
            this.identifier);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DisplayName",
            this.displayName);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Description",
            this.description);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Identifier"))
            {
                this.identifier = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DisplayName"))
            {
                this.displayName = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Description"))
                {
                    this.description = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
