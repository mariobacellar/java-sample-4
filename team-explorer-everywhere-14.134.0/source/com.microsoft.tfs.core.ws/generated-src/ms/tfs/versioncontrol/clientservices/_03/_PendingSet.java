// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PendingChange;
import ms.tfs.versioncontrol.clientservices._03._PendingSet;
import ms.tfs.versioncontrol.clientservices._03._PendingSetType;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;

import java.lang.Object;
import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _PendingSet
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String computer;
    protected String owner;
    protected String ownerdisp;
    protected String owneruniq;
    protected int ownership;
    protected String name;
    protected _PendingSetType type;
    protected String signature;

    // Elements
    protected _PendingChange[] pendingChanges;

    public _PendingSet()
    {
        super();
    }

    public _PendingSet(
        final String computer,
        final String owner,
        final String ownerdisp,
        final String owneruniq,
        final int ownership,
        final String name,
        final _PendingSetType type,
        final String signature,
        final _PendingChange[] pendingChanges)
    {
        // TODO : Call super() instead of setting all fields directly?
        setComputer(computer);
        setOwner(owner);
        setOwnerdisp(ownerdisp);
        setOwneruniq(owneruniq);
        setOwnership(ownership);
        setName(name);
        setType(type);
        setSignature(signature);
        setPendingChanges(pendingChanges);
    }

    public String getComputer()
    {
        return this.computer;
    }

    public void setComputer(final String value)
    {
        this.computer = value;
    }

    public String getOwner()
    {
        return this.owner;
    }

    public void setOwner(final String value)
    {
        this.owner = value;
    }

    public String getOwnerdisp()
    {
        return this.ownerdisp;
    }

    public void setOwnerdisp(final String value)
    {
        this.ownerdisp = value;
    }

    public String getOwneruniq()
    {
        return this.owneruniq;
    }

    public void setOwneruniq(final String value)
    {
        this.owneruniq = value;
    }

    public int getOwnership()
    {
        return this.ownership;
    }

    public void setOwnership(final int value)
    {
        this.ownership = value;
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(final String value)
    {
        this.name = value;
    }

    public _PendingSetType getType()
    {
        return this.type;
    }

    public void setType(final _PendingSetType value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'type' is a required attribute, its value cannot be null");
        }

        this.type = value;
    }

    public String getSignature()
    {
        return this.signature;
    }

    public void setSignature(final String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'signature' is a required attribute, its value cannot be null");
        }

        this.signature = value;
    }

    public _PendingChange[] getPendingChanges()
    {
        return this.pendingChanges;
    }

    public void setPendingChanges(_PendingChange[] value)
    {
        this.pendingChanges = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "computer",
            this.computer);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "owner",
            this.owner);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ownerdisp",
            this.ownerdisp);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "owneruniq",
            this.owneruniq);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ownership",
            this.ownership);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "name",
            this.name);
        this.type.writeAsAttribute(
            writer,
            "type");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "signature",
            this.signature);

        // Elements
        if (this.pendingChanges != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("PendingChanges");

            for (int iterator0 = 0; iterator0 < this.pendingChanges.length; iterator0++)
            {
                this.pendingChanges[iterator0].writeAsElement(
                    writer,
                    "PendingChange");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("computer"))
            {
                this.computer = attributeValue;
            }
            else if (localName.equalsIgnoreCase("owner"))
            {
                this.owner = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ownerdisp"))
            {
                this.ownerdisp = attributeValue;
            }
            else if (localName.equalsIgnoreCase("owneruniq"))
            {
                this.owneruniq = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ownership"))
            {
                this.ownership = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("name"))
            {
                this.name = attributeValue;
            }
            else if (localName.equalsIgnoreCase("type"))
            {
                this.type = _PendingSetType.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("signature"))
            {
                this.signature = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("PendingChanges"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _PendingChange complexObject0 = new _PendingChange();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.pendingChanges = (_PendingChange[]) list0.toArray(new _PendingChange[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
