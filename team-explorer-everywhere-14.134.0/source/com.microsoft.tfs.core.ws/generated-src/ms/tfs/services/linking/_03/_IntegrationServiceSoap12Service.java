// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.services.linking._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.services.linking._03._Artifact;
import ms.tfs.services.linking._03._ExtendedAttribute;
import ms.tfs.services.linking._03._FilterType;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetArtifacts;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetArtifactsResponse;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetReferencingArtifacts;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetReferencingArtifactsResponse;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetReferencingArtifactsWithFilter;
import ms.tfs.services.linking._03._IntegrationServiceSoap_GetReferencingArtifactsWithFilterResponse;
import ms.tfs.services.linking._03._IntegrationServiceSoap_NotifyResponse;
import ms.tfs.services.linking._03._LinkFilter;
import ms.tfs.services.linking._03._OutboundLink;
import ms.tfs.services.notification._03._IntegrationServiceSoap_Notify;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Linking/03}IntegrationServiceSoap12Service
 */
public class _IntegrationServiceSoap12Service
    extends SOAP12Service
    implements _IntegrationServiceSoap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Linking/03",
                "IntegrationServiceSoap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/WorkItemTracking/v1.0/Integration.asmx";

    public _IntegrationServiceSoap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _IntegrationServiceSoap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _IntegrationServiceSoap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _IntegrationServiceSoap12Service.ENDPOINT_PATH;
    }

    public _Artifact[] getReferencingArtifacts(final String[] uriList)
        throws TransportException, SOAPFault
    {
        final _IntegrationServiceSoap_GetReferencingArtifacts requestData = new _IntegrationServiceSoap_GetReferencingArtifacts(
                    uriList);

        final SOAPRequest request = createSOAPRequest(
                "GetReferencingArtifacts",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReferencingArtifacts");
                    }
                });

        final _IntegrationServiceSoap_GetReferencingArtifactsResponse responseData = new _IntegrationServiceSoap_GetReferencingArtifactsResponse();

        executeSOAPRequest(
            request,
            "GetReferencingArtifactsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetReferencingArtifactsResult();
    }

    public _Artifact[] getReferencingArtifactsWithFilter(
        final String[] uriList,
        final _LinkFilter[] filters)
        throws TransportException, SOAPFault
    {
        final _IntegrationServiceSoap_GetReferencingArtifactsWithFilter requestData = new _IntegrationServiceSoap_GetReferencingArtifactsWithFilter(
                    uriList,
                    filters);

        final SOAPRequest request = createSOAPRequest(
                "GetReferencingArtifactsWithFilter",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReferencingArtifactsWithFilter");
                    }
                });

        final _IntegrationServiceSoap_GetReferencingArtifactsWithFilterResponse responseData = new _IntegrationServiceSoap_GetReferencingArtifactsWithFilterResponse();

        executeSOAPRequest(
            request,
            "GetReferencingArtifactsWithFilterResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetReferencingArtifactsWithFilterResult();
    }

    public _Artifact[] getArtifacts(final String[] artifactUris)
        throws TransportException, SOAPFault
    {
        final _IntegrationServiceSoap_GetArtifacts requestData = new _IntegrationServiceSoap_GetArtifacts(artifactUris);

        final SOAPRequest request = createSOAPRequest(
                "GetArtifacts",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetArtifacts");
                    }
                });

        final _IntegrationServiceSoap_GetArtifactsResponse responseData = new _IntegrationServiceSoap_GetArtifactsResponse();

        executeSOAPRequest(
            request,
            "GetArtifactsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetArtifactsResult();
    }

    public void notify(
        final String eventXml,
        final String tfsIdentityXml)
        throws TransportException, SOAPFault
    {
        final _IntegrationServiceSoap_Notify requestData = new _IntegrationServiceSoap_Notify(eventXml, tfsIdentityXml);

        final SOAPRequest request = createSOAPRequest(
                "Notify",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Notify");
                    }
                });

        final _IntegrationServiceSoap_NotifyResponse responseData = new _IntegrationServiceSoap_NotifyResponse();

        executeSOAPRequest(
            request,
            "NotifyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }
}
