// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by
 * com.microsoft.tfs.core.ws.generator.Generator from the
 * /serviceImplementation.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URI;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.SOAP12Service;
import com.microsoft.tfs.core.ws.runtime.client.SOAPMethodRequestWriter;
import com.microsoft.tfs.core.ws.runtime.client.SOAPMethodResponseReader;
import com.microsoft.tfs.core.ws.runtime.client.SOAPRequest;
import com.microsoft.tfs.core.ws.runtime.exceptions.SOAPFault;
import com.microsoft.tfs.core.ws.runtime.exceptions.TransportException;

/**
 * Automatically generated service interface.
 * 
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/
 * ClientServices/03}Repository5Soap12Service
 */
public class _Repository5Soap12Service
    extends SOAP12Service
    implements _Repository5Soap
{
    private static final QName PORT_QNAME = new QName(
        "http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03",
        "Repository5Soap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/VersionControl/v5.0/Repository.asmx";

    public _Repository5Soap12Service(final URI endpoint, final QName port)
    {
        super(endpoint, port);
    }

    public _Repository5Soap12Service(final HttpClient client, URI endpoint, QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation
     *         can be used with
     */
    public static QName getPortQName()
    {
        return _Repository5Soap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host
     *         that provides this service
     */
    public static String getEndpointPath()
    {
        return _Repository5Soap12Service.ENDPOINT_PATH;
    }

    @Override
    public _GetOperation[][] get(
        final String workspaceName,
        final String ownerName,
        final _GetRequest[] requests,
        final int maxResults,
        final int options,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Get requestData =
            new _Repository5Soap_Get(
                workspaceName,
                ownerName,
                requests,
                maxResults,
                options,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Get", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Get");
            }
        });

        final _Repository5Soap_GetResponse responseData = new _Repository5Soap_GetResponse();

        executeSOAPRequest(request, "GetResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getGetResult();
    }

    @Override
    public _Repository5Soap_CreateBranchResponse createBranch(
        final String sourcePath,
        final String targetPath,
        final _VersionSpec version,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final _Mapping[] mappings,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CreateBranch requestData =
            new _Repository5Soap_CreateBranch(
                sourcePath,
                targetPath,
                version,
                info,
                checkinNotificationInfo,
                mappings,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CreateBranch", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CreateBranch");
            }
        });

        final _Repository5Soap_CreateBranchResponse responseData = new _Repository5Soap_CreateBranchResponse();

        executeSOAPRequest(request, "CreateBranchResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_PendChangesResponse pendChanges(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_PendChanges requestData =
            new _Repository5Soap_PendChanges(
                workspaceName,
                ownerName,
                changes,
                pendChangesOptions,
                supportedFeatures,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("PendChanges", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "PendChanges");
            }
        });

        final _Repository5Soap_PendChangesResponse responseData = new _Repository5Soap_PendChangesResponse();

        executeSOAPRequest(request, "PendChangesResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_PendChangesInLocalWorkspaceResponse pendChangesInLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_PendChangesInLocalWorkspace requestData =
            new _Repository5Soap_PendChangesInLocalWorkspace(
                workspaceName,
                ownerName,
                changes,
                pendChangesOptions,
                supportedFeatures,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("PendChangesInLocalWorkspace", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "PendChangesInLocalWorkspace");
            }
        });

        final _Repository5Soap_PendChangesInLocalWorkspaceResponse responseData =
            new _Repository5Soap_PendChangesInLocalWorkspaceResponse();

        executeSOAPRequest(request, "PendChangesInLocalWorkspaceResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public void promotePendingWorkspaceMappings(
        final String workspaceName,
        final String ownerName,
        final int projectNotificationId)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_PromotePendingWorkspaceMappings requestData =
            new _Repository5Soap_PromotePendingWorkspaceMappings(workspaceName, ownerName, projectNotificationId);

        final SOAPRequest request = createSOAPRequest("PromotePendingWorkspaceMappings", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "PromotePendingWorkspaceMappings");
            }
        });

        final _Repository5Soap_PromotePendingWorkspaceMappingsResponse responseData =
            new _Repository5Soap_PromotePendingWorkspaceMappingsResponse();

        executeSOAPRequest(request, "PromotePendingWorkspaceMappingsResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public _Repository5Soap_CheckInResponse checkIn(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions,
        final boolean deferCheckIn,
        final int checkInTicket,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CheckIn requestData =
            new _Repository5Soap_CheckIn(
                workspaceName,
                ownerName,
                serverItems,
                info,
                checkinNotificationInfo,
                checkinOptions,
                deferCheckIn,
                checkInTicket,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CheckIn", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CheckIn");
            }
        });

        final _Repository5Soap_CheckInResponse responseData = new _Repository5Soap_CheckInResponse();

        executeSOAPRequest(request, "CheckInResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_CheckInShelvesetResponse checkInShelveset(
        final String shelvesetName,
        final String ownerName,
        final String changesetOwner,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CheckInShelveset requestData =
            new _Repository5Soap_CheckInShelveset(
                shelvesetName,
                ownerName,
                changesetOwner,
                checkinNotificationInfo,
                checkinOptions,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CheckInShelveset", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CheckInShelveset");
            }
        });

        final _Repository5Soap_CheckInShelvesetResponse responseData = new _Repository5Soap_CheckInShelvesetResponse();

        executeSOAPRequest(request, "CheckInShelvesetResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Failure[] shelve(
        final String workspaceName,
        final String workspaceOwner,
        final String[] serverItems,
        final _Shelveset shelveset,
        final boolean replace,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Shelve requestData =
            new _Repository5Soap_Shelve(
                workspaceName,
                workspaceOwner,
                serverItems,
                shelveset,
                replace,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Shelve", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Shelve");
            }
        });

        final _Repository5Soap_ShelveResponse responseData = new _Repository5Soap_ShelveResponse();

        executeSOAPRequest(request, "ShelveResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getShelveResult();
    }

    @Override
    public _Repository5Soap_DestroyResponse destroy(
        final _ItemSpec item,
        final _VersionSpec versionSpec,
        final _VersionSpec stopAtSpec,
        final int flags,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Destroy requestData =
            new _Repository5Soap_Destroy(item, versionSpec, stopAtSpec, flags, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Destroy", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Destroy");
            }
        });

        final _Repository5Soap_DestroyResponse responseData = new _Repository5Soap_DestroyResponse();

        executeSOAPRequest(request, "DestroyResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_MergeResponse merge(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final _VersionSpec from,
        final _VersionSpec to,
        final _LockLevel lockLevel,
        final int optionsEx,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Merge requestData =
            new _Repository5Soap_Merge(
                workspaceName,
                workspaceOwner,
                source,
                target,
                from,
                to,
                lockLevel,
                optionsEx,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Merge", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Merge");
            }
        });

        final _Repository5Soap_MergeResponse responseData = new _Repository5Soap_MergeResponse();

        executeSOAPRequest(request, "MergeResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _ReconcileResult reconcileLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final String pendingChangeSignature,
        final _LocalPendingChange[] pendingChanges,
        final _ServerItemLocalVersionUpdate[] localVersionUpdates,
        final boolean clearLocalVersionTable,
        final boolean throwOnProjectRenamed,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_ReconcileLocalWorkspace requestData =
            new _Repository5Soap_ReconcileLocalWorkspace(
                workspaceName,
                ownerName,
                pendingChangeSignature,
                pendingChanges,
                localVersionUpdates,
                clearLocalVersionTable,
                throwOnProjectRenamed,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("ReconcileLocalWorkspace", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "ReconcileLocalWorkspace");
            }
        });

        final _Repository5Soap_ReconcileLocalWorkspaceResponse responseData =
            new _Repository5Soap_ReconcileLocalWorkspaceResponse();

        executeSOAPRequest(request, "ReconcileLocalWorkspaceResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getReconcileLocalWorkspaceResult();
    }

    @Override
    public _Repository5Soap_ResolveResponse resolve(
        final String workspaceName,
        final String ownerName,
        final int conflictId,
        final _Resolution resolution,
        final String newPath,
        final int encoding,
        final _LockLevel lockLevel,
        final _PropertyValue[] newProperties,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Resolve requestData =
            new _Repository5Soap_Resolve(
                workspaceName,
                ownerName,
                conflictId,
                resolution,
                newPath,
                encoding,
                lockLevel,
                newProperties,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Resolve", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Resolve");
            }
        });

        final _Repository5Soap_ResolveResponse responseData = new _Repository5Soap_ResolveResponse();

        executeSOAPRequest(request, "ResolveResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_UndoPendingChangesResponse undoPendingChanges(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UndoPendingChanges requestData =
            new _Repository5Soap_UndoPendingChanges(
                workspaceName,
                ownerName,
                items,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("UndoPendingChanges", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "UndoPendingChanges");
            }
        });

        final _Repository5Soap_UndoPendingChangesResponse responseData =
            new _Repository5Soap_UndoPendingChangesResponse();

        executeSOAPRequest(request, "UndoPendingChangesResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_UndoPendingChangesInLocalWorkspaceResponse undoPendingChangesInLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UndoPendingChangesInLocalWorkspace requestData =
            new _Repository5Soap_UndoPendingChangesInLocalWorkspace(
                workspaceName,
                ownerName,
                items,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request =
            createSOAPRequest("UndoPendingChangesInLocalWorkspace", new SOAPMethodRequestWriter()
            {
                @Override
                public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                    throws XMLStreamException,
                        IOException
                {
                    requestData.writeAsElement(writer, "UndoPendingChangesInLocalWorkspace");
                }
            });

        final _Repository5Soap_UndoPendingChangesInLocalWorkspaceResponse responseData =
            new _Repository5Soap_UndoPendingChangesInLocalWorkspaceResponse();

        executeSOAPRequest(request, "UndoPendingChangesInLocalWorkspaceResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_UnshelveResponse unshelve(
        final String shelvesetName,
        final String shelvesetOwner,
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttrbuteFilters,
        final String[] shelvesetPropertyNameFilters,
        final boolean merge,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Unshelve requestData =
            new _Repository5Soap_Unshelve(
                shelvesetName,
                shelvesetOwner,
                workspaceName,
                workspaceOwner,
                items,
                itemPropertyFilters,
                itemAttrbuteFilters,
                shelvesetPropertyNameFilters,
                merge,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Unshelve", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Unshelve");
            }
        });

        final _Repository5Soap_UnshelveResponse responseData = new _Repository5Soap_UnshelveResponse();

        executeSOAPRequest(request, "UnshelveResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public void addConflict(
        final String workspaceName,
        final String ownerName,
        final _ConflictType conflictType,
        final int itemId,
        final int versionFrom,
        final int pendingChangeId,
        final String sourceLocalItem,
        final String targetLocalItem,
        final int reason,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_AddConflict requestData =
            new _Repository5Soap_AddConflict(
                workspaceName,
                ownerName,
                conflictType,
                itemId,
                versionFrom,
                pendingChangeId,
                sourceLocalItem,
                targetLocalItem,
                reason,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("AddConflict", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "AddConflict");
            }
        });

        final _Repository5Soap_AddConflictResponse responseData = new _Repository5Soap_AddConflictResponse();

        executeSOAPRequest(request, "AddConflictResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public void deleteBranchObject(final _ItemIdentifier rootItem, final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_DeleteBranchObject requestData =
            new _Repository5Soap_DeleteBranchObject(rootItem, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("DeleteBranchObject", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "DeleteBranchObject");
            }
        });

        final _Repository5Soap_DeleteBranchObjectResponse responseData =
            new _Repository5Soap_DeleteBranchObjectResponse();

        executeSOAPRequest(request, "DeleteBranchObjectResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public _BranchObject[] queryBranchObjects(
        final _ItemIdentifier item,
        final _RecursionType recursion,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_QueryBranchObjects requestData =
            new _Repository5Soap_QueryBranchObjects(item, recursion, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("QueryBranchObjects", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "QueryBranchObjects");
            }
        });

        final _Repository5Soap_QueryBranchObjectsResponse responseData =
            new _Repository5Soap_QueryBranchObjectsResponse();

        executeSOAPRequest(request, "QueryBranchObjectsResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getQueryBranchObjectsResult();
    }

    @Override
    public _MergeCandidate[] queryMergeCandidates(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final int options,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_QueryMergeCandidates requestData =
            new _Repository5Soap_QueryMergeCandidates(
                workspaceName,
                workspaceOwner,
                source,
                target,
                options,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("QueryMergeCandidates", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "QueryMergeCandidates");
            }
        });

        final _Repository5Soap_QueryMergeCandidatesResponse responseData =
            new _Repository5Soap_QueryMergeCandidatesResponse();

        executeSOAPRequest(request, "QueryMergeCandidatesResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getQueryMergeCandidatesResult();
    }

    @Override
    public _Repository5Soap_RollbackResponse rollback(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec itemVersion,
        final _VersionSpec from,
        final _VersionSpec to,
        final int rollbackOptions,
        final _LockLevel lockLevel,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_Rollback requestData =
            new _Repository5Soap_Rollback(
                workspaceName,
                workspaceOwner,
                items,
                itemVersion,
                from,
                to,
                rollbackOptions,
                lockLevel,
                itemPropertyFilters,
                itemAttributeFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("Rollback", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "Rollback");
            }
        });

        final _Repository5Soap_RollbackResponse responseData = new _Repository5Soap_RollbackResponse();

        executeSOAPRequest(request, "RollbackResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_UnlabelItemResponse unlabelItem(
        final String workspaceName,
        final String workspaceOwner,
        final String labelName,
        final String labelScope,
        final _ItemSpec[] items,
        final _VersionSpec version,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UnlabelItem requestData =
            new _Repository5Soap_UnlabelItem(
                workspaceName,
                workspaceOwner,
                labelName,
                labelScope,
                items,
                version,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("UnlabelItem", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "UnlabelItem");
            }
        });

        final _Repository5Soap_UnlabelItemResponse responseData = new _Repository5Soap_UnlabelItemResponse();

        executeSOAPRequest(request, "UnlabelItemResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_LabelItemResponse labelItem(
        final String workspaceName,
        final String workspaceOwner,
        final _VersionControlLabel label,
        final _LabelItemSpec[] labelSpecs,
        final _LabelChildOption children,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_LabelItem requestData =
            new _Repository5Soap_LabelItem(
                workspaceName,
                workspaceOwner,
                label,
                labelSpecs,
                children,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("LabelItem", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "LabelItem");
            }
        });

        final _Repository5Soap_LabelItemResponse responseData = new _Repository5Soap_LabelItemResponse();

        executeSOAPRequest(request, "LabelItemResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public void updateLocalVersion(
        final String workspaceName,
        final String ownerName,
        final _ServerItemLocalVersionUpdate[] updates,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UpdateLocalVersion requestData =
            new _Repository5Soap_UpdateLocalVersion(workspaceName, ownerName, updates, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("UpdateLocalVersion", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "UpdateLocalVersion");
            }
        });

        final _Repository5Soap_UpdateLocalVersionResponse responseData =
            new _Repository5Soap_UpdateLocalVersionResponse();

        executeSOAPRequest(request, "UpdateLocalVersionResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public _Failure[] checkPendingChanges(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CheckPendingChanges requestData =
            new _Repository5Soap_CheckPendingChanges(workspaceName, ownerName, serverItems, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CheckPendingChanges", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CheckPendingChanges");
            }
        });

        final _Repository5Soap_CheckPendingChangesResponse responseData =
            new _Repository5Soap_CheckPendingChangesResponse();

        executeSOAPRequest(request, "CheckPendingChangesResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getCheckPendingChangesResult();
    }

    @Override
    public void updatePendingState(
        final String workspaceName,
        final String workspaceOwner,
        final _PendingState[] updates,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UpdatePendingState requestData =
            new _Repository5Soap_UpdatePendingState(workspaceName, workspaceOwner, updates, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("UpdatePendingState", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "UpdatePendingState");
            }
        });

        final _Repository5Soap_UpdatePendingStateResponse responseData =
            new _Repository5Soap_UpdatePendingStateResponse();

        executeSOAPRequest(request, "UpdatePendingStateResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public void createCheckinNoteDefinition(
        final String associatedServerItem,
        final _CheckinNoteFieldDefinition[] checkinNoteFields,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CreateCheckinNoteDefinition requestData =
            new _Repository5Soap_CreateCheckinNoteDefinition(
                associatedServerItem,
                checkinNoteFields,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CreateCheckinNoteDefinition", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CreateCheckinNoteDefinition");
            }
        });

        final _Repository5Soap_CreateCheckinNoteDefinitionResponse responseData =
            new _Repository5Soap_CreateCheckinNoteDefinitionResponse();

        executeSOAPRequest(request, "CreateCheckinNoteDefinitionResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public void createTeamProjectFolder(
        final _TeamProjectFolderOptions teamProjectOptions,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_CreateTeamProjectFolder requestData =
            new _Repository5Soap_CreateTeamProjectFolder(teamProjectOptions, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("CreateTeamProjectFolder", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "CreateTeamProjectFolder");
            }
        });

        final _Repository5Soap_CreateTeamProjectFolderResponse responseData =
            new _Repository5Soap_CreateTeamProjectFolderResponse();

        executeSOAPRequest(request, "CreateTeamProjectFolderResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public void updateBranchObject(
        final _BranchProperties branchProperties,
        final boolean updateExisting,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_UpdateBranchObject requestData =
            new _Repository5Soap_UpdateBranchObject(branchProperties, updateExisting, maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("UpdateBranchObject", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "UpdateBranchObject");
            }
        });

        final _Repository5Soap_UpdateBranchObjectResponse responseData =
            new _Repository5Soap_UpdateBranchObjectResponse();

        executeSOAPRequest(request, "UpdateBranchObjectResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });
    }

    @Override
    public _VersionControlLabel[] queryLabels(
        final String workspaceName,
        final String workspaceOwner,
        final String labelName,
        final String labelScope,
        final String owner,
        final String filterItem,
        final _VersionSpec versionFilterItem,
        final boolean includeItems,
        final boolean generateDownloadUrls,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_QueryLabels requestData =
            new _Repository5Soap_QueryLabels(
                workspaceName,
                workspaceOwner,
                labelName,
                labelScope,
                owner,
                filterItem,
                versionFilterItem,
                includeItems,
                generateDownloadUrls,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("QueryLabels", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "QueryLabels");
            }
        });

        final _Repository5Soap_QueryLabelsResponse responseData = new _Repository5Soap_QueryLabelsResponse();

        executeSOAPRequest(request, "QueryLabelsResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData.getQueryLabelsResult();
    }

    @Override
    public _Repository5Soap_QueryPendingSetsResponse queryPendingSets(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String queryWorkspaceName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final String[] itemPropertyFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_QueryPendingSets requestData =
            new _Repository5Soap_QueryPendingSets(
                localWorkspaceName,
                localWorkspaceOwner,
                queryWorkspaceName,
                ownerName,
                itemSpecs,
                generateDownloadUrls,
                itemPropertyFilters,
                maxClientPathLength);

        final SOAPRequest request = createSOAPRequest("QueryPendingSets", new SOAPMethodRequestWriter()
        {
            @Override
            public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                throws XMLStreamException,
                    IOException
            {
                requestData.writeAsElement(writer, "QueryPendingSets");
            }
        });

        final _Repository5Soap_QueryPendingSetsResponse responseData = new _Repository5Soap_QueryPendingSetsResponse();

        executeSOAPRequest(request, "QueryPendingSetsResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }

    @Override
    public _Repository5Soap_QueryPendingSetsWithLocalWorkspacesResponse queryPendingSetsWithLocalWorkspaces(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String queryWorkspaceName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final String[] itemPropertyFilters,
        final int maxClientPathLength)
        throws TransportException,
            SOAPFault
    {
        final _Repository5Soap_QueryPendingSetsWithLocalWorkspaces requestData =
            new _Repository5Soap_QueryPendingSetsWithLocalWorkspaces(
                localWorkspaceName,
                localWorkspaceOwner,
                queryWorkspaceName,
                ownerName,
                itemSpecs,
                generateDownloadUrls,
                itemPropertyFilters,
                maxClientPathLength);

        final SOAPRequest request =
            createSOAPRequest("QueryPendingSetsWithLocalWorkspaces", new SOAPMethodRequestWriter()
            {
                @Override
                public void writeSOAPRequest(final XMLStreamWriter writer, final OutputStream out)
                    throws XMLStreamException,
                        IOException
                {
                    requestData.writeAsElement(writer, "QueryPendingSetsWithLocalWorkspaces");
                }
            });

        final _Repository5Soap_QueryPendingSetsWithLocalWorkspacesResponse responseData =
            new _Repository5Soap_QueryPendingSetsWithLocalWorkspacesResponse();

        executeSOAPRequest(request, "QueryPendingSetsWithLocalWorkspacesResponse", new SOAPMethodResponseReader()
        {
            @Override
            public void readSOAPResponse(final XMLStreamReader reader, final InputStream in)
                throws XMLStreamException,
                    IOException
            {
                responseData.readFromElement(reader);
            }
        });

        return responseData;
    }
}
