// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._04;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._04._BuildReason;
import ms.tfs.build.buildservice._04._BuildStatus;
import ms.tfs.build.buildservice._04._DeleteOptions;
import ms.tfs.build.buildservice._04._RetentionPolicy;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _RetentionPolicy
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected _BuildReason buildReason = new _BuildReason(
                new _BuildReason._BuildReason_Flag[] { _BuildReason._BuildReason_Flag.All });
    protected _BuildStatus buildStatus;
    protected int numberToKeep;
    protected _DeleteOptions deleteOptions = new _DeleteOptions(
                new _DeleteOptions._DeleteOptions_Flag[] { _DeleteOptions._DeleteOptions_Flag.All });

    // No elements    
    public _RetentionPolicy()
    {
        super();
    }

    public _RetentionPolicy(
        final _BuildReason buildReason,
        final _BuildStatus buildStatus,
        final int numberToKeep,
        final _DeleteOptions deleteOptions)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBuildReason(buildReason);
        setBuildStatus(buildStatus);
        setNumberToKeep(numberToKeep);
        setDeleteOptions(deleteOptions);
    }

    public _BuildReason getBuildReason()
    {
        return this.buildReason;
    }

    public void setBuildReason(final _BuildReason value)
    {
        this.buildReason = value;
    }

    public _BuildStatus getBuildStatus()
    {
        return this.buildStatus;
    }

    public void setBuildStatus(final _BuildStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'BuildStatus' is a required attribute, its value cannot be null");
        }

        this.buildStatus = value;
    }

    public int getNumberToKeep()
    {
        return this.numberToKeep;
    }

    public void setNumberToKeep(final int value)
    {
        this.numberToKeep = value;
    }

    public _DeleteOptions getDeleteOptions()
    {
        return this.deleteOptions;
    }

    public void setDeleteOptions(final _DeleteOptions value)
    {
        this.deleteOptions = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        if (this.buildReason != null)
        {
            this.buildReason.writeAsAttribute(
                writer,
                "BuildReason");
        }

        this.buildStatus.writeAsAttribute(
            writer,
            "BuildStatus");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "NumberToKeep",
            this.numberToKeep);

        if (this.deleteOptions != null)
        {
            this.deleteOptions.writeAsAttribute(
                writer,
                "DeleteOptions");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("BuildReason"))
            {
                this.buildReason = new _BuildReason();
                this.buildReason.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildStatus"))
            {
                this.buildStatus = new _BuildStatus();
                this.buildStatus.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("NumberToKeep"))
            {
                this.numberToKeep = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("DeleteOptions"))
            {
                this.deleteOptions = new _DeleteOptions();
                this.deleteOptions.readFromAttribute(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
