// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.teamconfiguration._01;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.teamconfiguration._01._TeamConfiguration;
import ms.tfs.services.teamconfiguration._01._TeamFieldValue;
import ms.tfs.services.teamconfiguration._01._TeamSettings;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _TeamConfiguration
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String projectUri;
    protected String teamId;
    protected String teamName;
    protected _TeamSettings teamSettings;
    protected boolean isDefaultTeam;

    public _TeamConfiguration()
    {
        super();
    }

    public _TeamConfiguration(
        final String projectUri,
        final String teamId,
        final String teamName,
        final _TeamSettings teamSettings,
        final boolean isDefaultTeam)
    {
        // TODO : Call super() instead of setting all fields directly?
        setProjectUri(projectUri);
        setTeamId(teamId);
        setTeamName(teamName);
        setTeamSettings(teamSettings);
        setIsDefaultTeam(isDefaultTeam);
    }

    public String getProjectUri()
    {
        return this.projectUri;
    }

    public void setProjectUri(String value)
    {
        this.projectUri = value;
    }

    public String getTeamId()
    {
        return this.teamId;
    }

    public void setTeamId(String value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'TeamId' is a required element, its value cannot be null");
        }

        this.teamId = value;
    }

    public String getTeamName()
    {
        return this.teamName;
    }

    public void setTeamName(String value)
    {
        this.teamName = value;
    }

    public _TeamSettings getTeamSettings()
    {
        return this.teamSettings;
    }

    public void setTeamSettings(_TeamSettings value)
    {
        this.teamSettings = value;
    }

    public boolean isIsDefaultTeam()
    {
        return this.isDefaultTeam;
    }

    public void setIsDefaultTeam(boolean value)
    {
        this.isDefaultTeam = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ProjectUri",
            this.projectUri);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamId",
            this.teamId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TeamName",
            this.teamName);

        if (this.teamSettings != null)
        {
            this.teamSettings.writeAsElement(
                writer,
                "TeamSettings");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "IsDefaultTeam",
            this.isDefaultTeam);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ProjectUri"))
                {
                    this.projectUri = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TeamId"))
                {
                    this.teamId = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TeamName"))
                {
                    this.teamName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TeamSettings"))
                {
                    this.teamSettings = new _TeamSettings();
                    this.teamSettings.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("IsDefaultTeam"))
                {
                    this.isDefaultTeam = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
