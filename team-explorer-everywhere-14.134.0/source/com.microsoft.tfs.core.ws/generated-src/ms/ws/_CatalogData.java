// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._CatalogData;
import ms.ws._CatalogNode;
import ms.ws._CatalogNodeDependency;
import ms.ws._CatalogResource;
import ms.ws._CatalogResourceType;
import ms.ws._CatalogServiceReference;
import ms.ws._KeyValueOfStringString;
import ms.ws._LocationMapping;
import ms.ws._ServiceDefinition;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CatalogData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected _CatalogResourceType[] catalogResourceTypes;
    protected _CatalogResource[] catalogResources;
    protected _CatalogNode[] catalogNodes;
    protected _CatalogResource[] deletedResources;
    protected _CatalogResource[] deletedNodeResources;
    protected _CatalogNode[] deletedNodes;
    protected int locationServiceLastChangeId;

    public _CatalogData()
    {
        super();
    }

    public _CatalogData(
        final _CatalogResourceType[] catalogResourceTypes,
        final _CatalogResource[] catalogResources,
        final _CatalogNode[] catalogNodes,
        final _CatalogResource[] deletedResources,
        final _CatalogResource[] deletedNodeResources,
        final _CatalogNode[] deletedNodes,
        final int locationServiceLastChangeId)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCatalogResourceTypes(catalogResourceTypes);
        setCatalogResources(catalogResources);
        setCatalogNodes(catalogNodes);
        setDeletedResources(deletedResources);
        setDeletedNodeResources(deletedNodeResources);
        setDeletedNodes(deletedNodes);
        setLocationServiceLastChangeId(locationServiceLastChangeId);
    }

    public _CatalogResourceType[] getCatalogResourceTypes()
    {
        return this.catalogResourceTypes;
    }

    public void setCatalogResourceTypes(_CatalogResourceType[] value)
    {
        this.catalogResourceTypes = value;
    }

    public _CatalogResource[] getCatalogResources()
    {
        return this.catalogResources;
    }

    public void setCatalogResources(_CatalogResource[] value)
    {
        this.catalogResources = value;
    }

    public _CatalogNode[] getCatalogNodes()
    {
        return this.catalogNodes;
    }

    public void setCatalogNodes(_CatalogNode[] value)
    {
        this.catalogNodes = value;
    }

    public _CatalogResource[] getDeletedResources()
    {
        return this.deletedResources;
    }

    public void setDeletedResources(_CatalogResource[] value)
    {
        this.deletedResources = value;
    }

    public _CatalogResource[] getDeletedNodeResources()
    {
        return this.deletedNodeResources;
    }

    public void setDeletedNodeResources(_CatalogResource[] value)
    {
        this.deletedNodeResources = value;
    }

    public _CatalogNode[] getDeletedNodes()
    {
        return this.deletedNodes;
    }

    public void setDeletedNodes(_CatalogNode[] value)
    {
        this.deletedNodes = value;
    }

    public int getLocationServiceLastChangeId()
    {
        return this.locationServiceLastChangeId;
    }

    public void setLocationServiceLastChangeId(int value)
    {
        this.locationServiceLastChangeId = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.catalogResourceTypes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("CatalogResourceTypes");

            for (int iterator0 = 0; iterator0 < this.catalogResourceTypes.length; iterator0++)
            {
                this.catalogResourceTypes[iterator0].writeAsElement(
                    writer,
                    "CatalogResourceType");
            }

            writer.writeEndElement();
        }

        if (this.catalogResources != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("CatalogResources");

            for (int iterator0 = 0; iterator0 < this.catalogResources.length; iterator0++)
            {
                this.catalogResources[iterator0].writeAsElement(
                    writer,
                    "CatalogResource");
            }

            writer.writeEndElement();
        }

        if (this.catalogNodes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("CatalogNodes");

            for (int iterator0 = 0; iterator0 < this.catalogNodes.length; iterator0++)
            {
                this.catalogNodes[iterator0].writeAsElement(
                    writer,
                    "CatalogNode");
            }

            writer.writeEndElement();
        }

        if (this.deletedResources != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DeletedResources");

            for (int iterator0 = 0; iterator0 < this.deletedResources.length; iterator0++)
            {
                this.deletedResources[iterator0].writeAsElement(
                    writer,
                    "CatalogResource");
            }

            writer.writeEndElement();
        }

        if (this.deletedNodeResources != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DeletedNodeResources");

            for (int iterator0 = 0; iterator0 < this.deletedNodeResources.length; iterator0++)
            {
                this.deletedNodeResources[iterator0].writeAsElement(
                    writer,
                    "CatalogResource");
            }

            writer.writeEndElement();
        }

        if (this.deletedNodes != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DeletedNodes");

            for (int iterator0 = 0; iterator0 < this.deletedNodes.length; iterator0++)
            {
                this.deletedNodes[iterator0].writeAsElement(
                    writer,
                    "CatalogNode");
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "LocationServiceLastChangeId",
            this.locationServiceLastChangeId);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("CatalogResourceTypes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogResourceType complexObject0 = new _CatalogResourceType();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.catalogResourceTypes = (_CatalogResourceType[]) list0.toArray(
                                new _CatalogResourceType[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("CatalogResources"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogResource complexObject0 = new _CatalogResource();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.catalogResources = (_CatalogResource[]) list0.toArray(new _CatalogResource[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("CatalogNodes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogNode complexObject0 = new _CatalogNode();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.catalogNodes = (_CatalogNode[]) list0.toArray(new _CatalogNode[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("DeletedResources"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogResource complexObject0 = new _CatalogResource();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.deletedResources = (_CatalogResource[]) list0.toArray(new _CatalogResource[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("DeletedNodeResources"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogResource complexObject0 = new _CatalogResource();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.deletedNodeResources = (_CatalogResource[]) list0.toArray(new _CatalogResource[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("DeletedNodes"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _CatalogNode complexObject0 = new _CatalogNode();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.deletedNodes = (_CatalogNode[]) list0.toArray(new _CatalogNode[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("LocationServiceLastChangeId"))
                {
                    this.locationServiceLastChangeId = XMLConvert.toInt(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
