// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._DataSourcePrompt;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _DataSourcePrompt
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String name;
    protected String dataSourceID;
    protected String prompt;

    public _DataSourcePrompt()
    {
        super();
    }

    public _DataSourcePrompt(
        final String name,
        final String dataSourceID,
        final String prompt)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setDataSourceID(dataSourceID);
        setPrompt(prompt);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getDataSourceID()
    {
        return this.dataSourceID;
    }

    public void setDataSourceID(String value)
    {
        this.dataSourceID = value;
    }

    public String getPrompt()
    {
        return this.prompt;
    }

    public void setPrompt(String value)
    {
        this.prompt = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "DataSourceID",
            this.dataSourceID);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Prompt",
            this.prompt);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DataSourceID"))
                {
                    this.dataSourceID = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Prompt"))
                {
                    this.prompt = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
