// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._CredentialRetrievalEnum;
import ms.sql.reporting.reportingservices._DataSourceDefinition;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _DataSourceDefinition
    extends _DataSourceDefinitionOrReference
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String extension;
    protected String connectString;
    protected boolean useOriginalConnectString;
    protected boolean originalConnectStringExpressionBased;
    protected _CredentialRetrievalEnum credentialRetrieval;
    protected boolean windowsCredentials;
    protected boolean impersonateUser;
    protected String prompt;
    protected String userName;
    protected String password;
    protected boolean enabled;

    public _DataSourceDefinition()
    {
        super();
    }

    public _DataSourceDefinition(
        final String extension,
        final String connectString,
        final boolean useOriginalConnectString,
        final boolean originalConnectStringExpressionBased,
        final _CredentialRetrievalEnum credentialRetrieval,
        final boolean windowsCredentials,
        final boolean impersonateUser,
        final String prompt,
        final String userName,
        final String password,
        final boolean enabled)
    {
        // TODO : Call super() instead of setting all fields directly?
        setExtension(extension);
        setConnectString(connectString);
        setUseOriginalConnectString(useOriginalConnectString);
        setOriginalConnectStringExpressionBased(originalConnectStringExpressionBased);
        setCredentialRetrieval(credentialRetrieval);
        setWindowsCredentials(windowsCredentials);
        setImpersonateUser(impersonateUser);
        setPrompt(prompt);
        setUserName(userName);
        setPassword(password);
        setEnabled(enabled);
    }

    public String getExtension()
    {
        return this.extension;
    }

    public void setExtension(String value)
    {
        this.extension = value;
    }

    public String getConnectString()
    {
        return this.connectString;
    }

    public void setConnectString(String value)
    {
        this.connectString = value;
    }

    public boolean isUseOriginalConnectString()
    {
        return this.useOriginalConnectString;
    }

    public void setUseOriginalConnectString(boolean value)
    {
        this.useOriginalConnectString = value;
    }

    public boolean isOriginalConnectStringExpressionBased()
    {
        return this.originalConnectStringExpressionBased;
    }

    public void setOriginalConnectStringExpressionBased(boolean value)
    {
        this.originalConnectStringExpressionBased = value;
    }

    public _CredentialRetrievalEnum getCredentialRetrieval()
    {
        return this.credentialRetrieval;
    }

    public void setCredentialRetrieval(_CredentialRetrievalEnum value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'CredentialRetrieval' is a required element, its value cannot be null");
        }

        this.credentialRetrieval = value;
    }

    public boolean isWindowsCredentials()
    {
        return this.windowsCredentials;
    }

    public void setWindowsCredentials(boolean value)
    {
        this.windowsCredentials = value;
    }

    public boolean isImpersonateUser()
    {
        return this.impersonateUser;
    }

    public void setImpersonateUser(boolean value)
    {
        this.impersonateUser = value;
    }

    public String getPrompt()
    {
        return this.prompt;
    }

    public void setPrompt(String value)
    {
        this.prompt = value;
    }

    public String getUserName()
    {
        return this.userName;
    }

    public void setUserName(String value)
    {
        this.userName = value;
    }

    public String getPassword()
    {
        return this.password;
    }

    public void setPassword(String value)
    {
        this.password = value;
    }

    public boolean isEnabled()
    {
        return this.enabled;
    }

    public void setEnabled(boolean value)
    {
        this.enabled = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "DataSourceDefinition");

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Extension",
            this.extension);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ConnectString",
            this.connectString);
        XMLStreamWriterHelper.writeElement(
            writer,
            "UseOriginalConnectString",
            this.useOriginalConnectString);
        XMLStreamWriterHelper.writeElement(
            writer,
            "OriginalConnectStringExpressionBased",
            this.originalConnectStringExpressionBased);
        this.credentialRetrieval.writeAsElement(
            writer,
            "CredentialRetrieval");
        XMLStreamWriterHelper.writeElement(
            writer,
            "WindowsCredentials",
            this.windowsCredentials);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ImpersonateUser",
            this.impersonateUser);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Prompt",
            this.prompt);
        XMLStreamWriterHelper.writeElement(
            writer,
            "UserName",
            this.userName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Password",
            this.password);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Enabled",
            this.enabled);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Extension"))
                {
                    this.extension = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ConnectString"))
                {
                    this.connectString = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("UseOriginalConnectString"))
                {
                    this.useOriginalConnectString = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("OriginalConnectStringExpressionBased"))
                {
                    this.originalConnectStringExpressionBased = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("CredentialRetrieval"))
                {
                    this.credentialRetrieval = _CredentialRetrievalEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("WindowsCredentials"))
                {
                    this.windowsCredentials = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ImpersonateUser"))
                {
                    this.impersonateUser = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Prompt"))
                {
                    this.prompt = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("UserName"))
                {
                    this.userName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Password"))
                {
                    this.password = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Enabled"))
                {
                    this.enabled = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
