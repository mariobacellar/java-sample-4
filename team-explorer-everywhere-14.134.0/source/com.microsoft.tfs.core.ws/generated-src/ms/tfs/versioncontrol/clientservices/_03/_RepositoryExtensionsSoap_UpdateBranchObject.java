// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._BranchProperties;
import ms.tfs.versioncontrol.clientservices._03._ItemIdentifier;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._RepositoryExtensionsSoap_UpdateBranchObject;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _RepositoryExtensionsSoap_UpdateBranchObject
    implements ElementSerializable
{
    // No attributes    

    // Elements
    protected _BranchProperties branchProperties;
    protected boolean updateExisting;

    public _RepositoryExtensionsSoap_UpdateBranchObject()
    {
        super();
    }

    public _RepositoryExtensionsSoap_UpdateBranchObject(
        final _BranchProperties branchProperties,
        final boolean updateExisting)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBranchProperties(branchProperties);
        setUpdateExisting(updateExisting);
    }

    public _BranchProperties getBranchProperties()
    {
        return this.branchProperties;
    }

    public void setBranchProperties(_BranchProperties value)
    {
        this.branchProperties = value;
    }

    public boolean isUpdateExisting()
    {
        return this.updateExisting;
    }

    public void setUpdateExisting(boolean value)
    {
        this.updateExisting = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.branchProperties != null)
        {
            this.branchProperties.writeAsElement(
                writer,
                "branchProperties");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "updateExisting",
            this.updateExisting);

        writer.writeEndElement();
    }
}
