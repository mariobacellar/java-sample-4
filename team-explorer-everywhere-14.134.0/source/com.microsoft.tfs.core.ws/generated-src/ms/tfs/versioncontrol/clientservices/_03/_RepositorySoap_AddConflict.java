// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._ConflictType;
import ms.tfs.versioncontrol.clientservices._03._RepositorySoap_AddConflict;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _RepositorySoap_AddConflict
    implements ElementSerializable
{
    // No attributes    

    // Elements
    protected String workspaceName;
    protected String ownerName;
    protected _ConflictType conflictType;
    protected int itemId;
    protected int versionFrom;
    protected int pendingChangeId;
    protected String sourceLocalItem;
    protected String targetLocalItem;
    protected int reason;

    public _RepositorySoap_AddConflict()
    {
        super();
    }

    public _RepositorySoap_AddConflict(
        final String workspaceName,
        final String ownerName,
        final _ConflictType conflictType,
        final int itemId,
        final int versionFrom,
        final int pendingChangeId,
        final String sourceLocalItem,
        final String targetLocalItem,
        final int reason)
    {
        // TODO : Call super() instead of setting all fields directly?
        setWorkspaceName(workspaceName);
        setOwnerName(ownerName);
        setConflictType(conflictType);
        setItemId(itemId);
        setVersionFrom(versionFrom);
        setPendingChangeId(pendingChangeId);
        setSourceLocalItem(sourceLocalItem);
        setTargetLocalItem(targetLocalItem);
        setReason(reason);
    }

    public String getWorkspaceName()
    {
        return this.workspaceName;
    }

    public void setWorkspaceName(String value)
    {
        this.workspaceName = value;
    }

    public String getOwnerName()
    {
        return this.ownerName;
    }

    public void setOwnerName(String value)
    {
        this.ownerName = value;
    }

    public _ConflictType getConflictType()
    {
        return this.conflictType;
    }

    public void setConflictType(_ConflictType value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'conflictType' is a required element, its value cannot be null");
        }

        this.conflictType = value;
    }

    public int getItemId()
    {
        return this.itemId;
    }

    public void setItemId(int value)
    {
        this.itemId = value;
    }

    public int getVersionFrom()
    {
        return this.versionFrom;
    }

    public void setVersionFrom(int value)
    {
        this.versionFrom = value;
    }

    public int getPendingChangeId()
    {
        return this.pendingChangeId;
    }

    public void setPendingChangeId(int value)
    {
        this.pendingChangeId = value;
    }

    public String getSourceLocalItem()
    {
        return this.sourceLocalItem;
    }

    public void setSourceLocalItem(String value)
    {
        this.sourceLocalItem = value;
    }

    public String getTargetLocalItem()
    {
        return this.targetLocalItem;
    }

    public void setTargetLocalItem(String value)
    {
        this.targetLocalItem = value;
    }

    public int getReason()
    {
        return this.reason;
    }

    public void setReason(int value)
    {
        this.reason = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "workspaceName",
            this.workspaceName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ownerName",
            this.ownerName);
        this.conflictType.writeAsElement(
            writer,
            "conflictType");
        XMLStreamWriterHelper.writeElement(
            writer,
            "itemId",
            this.itemId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "versionFrom",
            this.versionFrom);
        XMLStreamWriterHelper.writeElement(
            writer,
            "pendingChangeId",
            this.pendingChangeId);
        XMLStreamWriterHelper.writeElement(
            writer,
            "sourceLocalItem",
            this.sourceLocalItem);
        XMLStreamWriterHelper.writeElement(
            writer,
            "targetLocalItem",
            this.targetLocalItem);
        XMLStreamWriterHelper.writeElement(
            writer,
            "reason",
            this.reason);

        writer.writeEndElement();
    }
}
