// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildDetail;
import ms.tfs.build.buildservice._03._BuildInformationNode;
import ms.tfs.build.buildservice._03._BuildPhaseStatus;
import ms.tfs.build.buildservice._03._BuildReason;
import ms.tfs.build.buildservice._03._BuildStatus;
import ms.tfs.build.buildservice._03._InformationField;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildDetail
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String uri;
    protected String teamProject;
    protected String buildNumber;
    protected String buildDefinitionUri;
    protected Calendar startTime;
    protected Calendar finishTime;
    protected _BuildReason reason = new _BuildReason(
                new _BuildReason._BuildReason_Flag[] { _BuildReason._BuildReason_Flag.Manual });
    protected _BuildStatus status;
    protected String quality;
    protected _BuildPhaseStatus compilationStatus;
    protected _BuildPhaseStatus testStatus;
    protected String dropLocation;
    protected String dropLocationRoot;
    protected String logLocation;
    protected String buildControllerUri;
    protected String sourceGetVersion;
    protected String requestedFor;
    protected String requestedBy;
    protected Calendar lastChangedOn;
    protected String lastChangedBy;
    protected boolean keepForever;
    protected String labelName;
    protected boolean isDeleted;
    protected String buildAgentUri;
    protected String configurationFolderUri;
    protected String shelvesetName;

    // Elements
    protected String processParameters;
    protected _BuildInformationNode[] information;

    public _BuildDetail()
    {
        super();
    }

    public _BuildDetail(
        final String uri,
        final String teamProject,
        final String buildNumber,
        final String buildDefinitionUri,
        final Calendar startTime,
        final Calendar finishTime,
        final _BuildReason reason,
        final _BuildStatus status,
        final String quality,
        final _BuildPhaseStatus compilationStatus,
        final _BuildPhaseStatus testStatus,
        final String dropLocation,
        final String dropLocationRoot,
        final String logLocation,
        final String buildControllerUri,
        final String sourceGetVersion,
        final String requestedFor,
        final String requestedBy,
        final Calendar lastChangedOn,
        final String lastChangedBy,
        final boolean keepForever,
        final String labelName,
        final boolean isDeleted,
        final String buildAgentUri,
        final String configurationFolderUri,
        final String shelvesetName,
        final String processParameters,
        final _BuildInformationNode[] information)
    {
        // TODO : Call super() instead of setting all fields directly?
        setUri(uri);
        setTeamProject(teamProject);
        setBuildNumber(buildNumber);
        setBuildDefinitionUri(buildDefinitionUri);
        setStartTime(startTime);
        setFinishTime(finishTime);
        setReason(reason);
        setStatus(status);
        setQuality(quality);
        setCompilationStatus(compilationStatus);
        setTestStatus(testStatus);
        setDropLocation(dropLocation);
        setDropLocationRoot(dropLocationRoot);
        setLogLocation(logLocation);
        setBuildControllerUri(buildControllerUri);
        setSourceGetVersion(sourceGetVersion);
        setRequestedFor(requestedFor);
        setRequestedBy(requestedBy);
        setLastChangedOn(lastChangedOn);
        setLastChangedBy(lastChangedBy);
        setKeepForever(keepForever);
        setLabelName(labelName);
        setIsDeleted(isDeleted);
        setBuildAgentUri(buildAgentUri);
        setConfigurationFolderUri(configurationFolderUri);
        setShelvesetName(shelvesetName);
        setProcessParameters(processParameters);
        setInformation(information);
    }

    public String getUri()
    {
        return this.uri;
    }

    public void setUri(final String value)
    {
        this.uri = value;
    }

    public String getTeamProject()
    {
        return this.teamProject;
    }

    public void setTeamProject(final String value)
    {
        this.teamProject = value;
    }

    public String getBuildNumber()
    {
        return this.buildNumber;
    }

    public void setBuildNumber(final String value)
    {
        this.buildNumber = value;
    }

    public String getBuildDefinitionUri()
    {
        return this.buildDefinitionUri;
    }

    public void setBuildDefinitionUri(final String value)
    {
        this.buildDefinitionUri = value;
    }

    public Calendar getStartTime()
    {
        return this.startTime;
    }

    public void setStartTime(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'StartTime' is a required attribute, its value cannot be null");
        }

        this.startTime = value;
    }

    public Calendar getFinishTime()
    {
        return this.finishTime;
    }

    public void setFinishTime(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'FinishTime' is a required attribute, its value cannot be null");
        }

        this.finishTime = value;
    }

    public _BuildReason getReason()
    {
        return this.reason;
    }

    public void setReason(final _BuildReason value)
    {
        this.reason = value;
    }

    public _BuildStatus getStatus()
    {
        return this.status;
    }

    public void setStatus(final _BuildStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Status' is a required attribute, its value cannot be null");
        }

        this.status = value;
    }

    public String getQuality()
    {
        return this.quality;
    }

    public void setQuality(final String value)
    {
        this.quality = value;
    }

    public _BuildPhaseStatus getCompilationStatus()
    {
        return this.compilationStatus;
    }

    public void setCompilationStatus(final _BuildPhaseStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'CompilationStatus' is a required attribute, its value cannot be null");
        }

        this.compilationStatus = value;
    }

    public _BuildPhaseStatus getTestStatus()
    {
        return this.testStatus;
    }

    public void setTestStatus(final _BuildPhaseStatus value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'TestStatus' is a required attribute, its value cannot be null");
        }

        this.testStatus = value;
    }

    public String getDropLocation()
    {
        return this.dropLocation;
    }

    public void setDropLocation(final String value)
    {
        this.dropLocation = value;
    }

    public String getDropLocationRoot()
    {
        return this.dropLocationRoot;
    }

    public void setDropLocationRoot(final String value)
    {
        this.dropLocationRoot = value;
    }

    public String getLogLocation()
    {
        return this.logLocation;
    }

    public void setLogLocation(final String value)
    {
        this.logLocation = value;
    }

    public String getBuildControllerUri()
    {
        return this.buildControllerUri;
    }

    public void setBuildControllerUri(final String value)
    {
        this.buildControllerUri = value;
    }

    public String getSourceGetVersion()
    {
        return this.sourceGetVersion;
    }

    public void setSourceGetVersion(final String value)
    {
        this.sourceGetVersion = value;
    }

    public String getRequestedFor()
    {
        return this.requestedFor;
    }

    public void setRequestedFor(final String value)
    {
        this.requestedFor = value;
    }

    public String getRequestedBy()
    {
        return this.requestedBy;
    }

    public void setRequestedBy(final String value)
    {
        this.requestedBy = value;
    }

    public Calendar getLastChangedOn()
    {
        return this.lastChangedOn;
    }

    public void setLastChangedOn(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'LastChangedOn' is a required attribute, its value cannot be null");
        }

        this.lastChangedOn = value;
    }

    public String getLastChangedBy()
    {
        return this.lastChangedBy;
    }

    public void setLastChangedBy(final String value)
    {
        this.lastChangedBy = value;
    }

    public boolean isKeepForever()
    {
        return this.keepForever;
    }

    public void setKeepForever(final boolean value)
    {
        this.keepForever = value;
    }

    public String getLabelName()
    {
        return this.labelName;
    }

    public void setLabelName(final String value)
    {
        this.labelName = value;
    }

    public boolean isIsDeleted()
    {
        return this.isDeleted;
    }

    public void setIsDeleted(final boolean value)
    {
        this.isDeleted = value;
    }

    public String getBuildAgentUri()
    {
        return this.buildAgentUri;
    }

    public void setBuildAgentUri(final String value)
    {
        this.buildAgentUri = value;
    }

    public String getConfigurationFolderUri()
    {
        return this.configurationFolderUri;
    }

    public void setConfigurationFolderUri(final String value)
    {
        this.configurationFolderUri = value;
    }

    public String getShelvesetName()
    {
        return this.shelvesetName;
    }

    public void setShelvesetName(final String value)
    {
        this.shelvesetName = value;
    }

    public String getProcessParameters()
    {
        return this.processParameters;
    }

    public void setProcessParameters(String value)
    {
        this.processParameters = value;
    }

    public _BuildInformationNode[] getInformation()
    {
        return this.information;
    }

    public void setInformation(_BuildInformationNode[] value)
    {
        this.information = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Uri",
            this.uri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "TeamProject",
            this.teamProject);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildNumber",
            this.buildNumber);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildDefinitionUri",
            this.buildDefinitionUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "StartTime",
            this.startTime,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "FinishTime",
            this.finishTime,
            true);

        if (this.reason != null)
        {
            this.reason.writeAsAttribute(
                writer,
                "Reason");
        }

        this.status.writeAsAttribute(
            writer,
            "Status");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Quality",
            this.quality);
        this.compilationStatus.writeAsAttribute(
            writer,
            "CompilationStatus");
        this.testStatus.writeAsAttribute(
            writer,
            "TestStatus");
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DropLocation",
            this.dropLocation);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "DropLocationRoot",
            this.dropLocationRoot);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LogLocation",
            this.logLocation);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildControllerUri",
            this.buildControllerUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "SourceGetVersion",
            this.sourceGetVersion);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequestedFor",
            this.requestedFor);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "RequestedBy",
            this.requestedBy);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastChangedOn",
            this.lastChangedOn,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LastChangedBy",
            this.lastChangedBy);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "KeepForever",
            this.keepForever);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "LabelName",
            this.labelName);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "IsDeleted",
            this.isDeleted);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "BuildAgentUri",
            this.buildAgentUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ConfigurationFolderUri",
            this.configurationFolderUri);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ShelvesetName",
            this.shelvesetName);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "ProcessParameters",
            this.processParameters);

        if (this.information != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Information");

            for (int iterator0 = 0; iterator0 < this.information.length; iterator0++)
            {
                this.information[iterator0].writeAsElement(
                    writer,
                    "BuildInformationNode");
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Uri"))
            {
                this.uri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("TeamProject"))
            {
                this.teamProject = attributeValue;
            }
            else if (localName.equalsIgnoreCase("BuildNumber"))
            {
                this.buildNumber = attributeValue;
            }
            else if (localName.equalsIgnoreCase("BuildDefinitionUri"))
            {
                this.buildDefinitionUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("StartTime"))
            {
                this.startTime = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("FinishTime"))
            {
                this.finishTime = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("Reason"))
            {
                this.reason = new _BuildReason();
                this.reason.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Status"))
            {
                this.status = new _BuildStatus();
                this.status.readFromAttribute(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Quality"))
            {
                this.quality = attributeValue;
            }
            else if (localName.equalsIgnoreCase("CompilationStatus"))
            {
                this.compilationStatus = _BuildPhaseStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("TestStatus"))
            {
                this.testStatus = _BuildPhaseStatus.fromString(attributeValue);
            }
            else if (localName.equalsIgnoreCase("DropLocation"))
            {
                this.dropLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("DropLocationRoot"))
            {
                this.dropLocationRoot = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LogLocation"))
            {
                this.logLocation = attributeValue;
            }
            else if (localName.equalsIgnoreCase("BuildControllerUri"))
            {
                this.buildControllerUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("SourceGetVersion"))
            {
                this.sourceGetVersion = attributeValue;
            }
            else if (localName.equalsIgnoreCase("RequestedFor"))
            {
                this.requestedFor = attributeValue;
            }
            else if (localName.equalsIgnoreCase("RequestedBy"))
            {
                this.requestedBy = attributeValue;
            }
            else if (localName.equalsIgnoreCase("LastChangedOn"))
            {
                this.lastChangedOn = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("LastChangedBy"))
            {
                this.lastChangedBy = attributeValue;
            }
            else if (localName.equalsIgnoreCase("KeepForever"))
            {
                this.keepForever = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("LabelName"))
            {
                this.labelName = attributeValue;
            }
            else if (localName.equalsIgnoreCase("IsDeleted"))
            {
                this.isDeleted = XMLConvert.toBoolean(attributeValue);
            }
            else if (localName.equalsIgnoreCase("BuildAgentUri"))
            {
                this.buildAgentUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ConfigurationFolderUri"))
            {
                this.configurationFolderUri = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ShelvesetName"))
            {
                this.shelvesetName = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ProcessParameters"))
                {
                    this.processParameters = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Information"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _BuildInformationNode complexObject0 = new _BuildInformationNode();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.information = (_BuildInformationNode[]) list0.toArray(new _BuildInformationNode[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
