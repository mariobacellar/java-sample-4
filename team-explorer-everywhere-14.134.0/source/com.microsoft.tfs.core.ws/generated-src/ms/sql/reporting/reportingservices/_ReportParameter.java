// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._ParameterStateEnum;
import ms.sql.reporting.reportingservices._ParameterTypeEnum;
import ms.sql.reporting.reportingservices._ReportParameter;
import ms.sql.reporting.reportingservices._ValidValue;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ReportParameter
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String name;
    protected _ParameterTypeEnum type;
    protected boolean nullable;
    protected boolean allowBlank;
    protected boolean multiValue;
    protected boolean queryParameter;
    protected String prompt;
    protected boolean promptUser;
    protected String[] dependencies;
    protected boolean validValuesQueryBased;
    protected _ValidValue[] validValues;
    protected boolean defaultValuesQueryBased;
    protected String[] defaultValues;
    protected _ParameterStateEnum state;
    protected String errorMessage;

    public _ReportParameter()
    {
        super();
    }

    public _ReportParameter(
        final String name,
        final _ParameterTypeEnum type,
        final boolean nullable,
        final boolean allowBlank,
        final boolean multiValue,
        final boolean queryParameter,
        final String prompt,
        final boolean promptUser,
        final String[] dependencies,
        final boolean validValuesQueryBased,
        final _ValidValue[] validValues,
        final boolean defaultValuesQueryBased,
        final String[] defaultValues,
        final _ParameterStateEnum state,
        final String errorMessage)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setType(type);
        setNullable(nullable);
        setAllowBlank(allowBlank);
        setMultiValue(multiValue);
        setQueryParameter(queryParameter);
        setPrompt(prompt);
        setPromptUser(promptUser);
        setDependencies(dependencies);
        setValidValuesQueryBased(validValuesQueryBased);
        setValidValues(validValues);
        setDefaultValuesQueryBased(defaultValuesQueryBased);
        setDefaultValues(defaultValues);
        setState(state);
        setErrorMessage(errorMessage);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public _ParameterTypeEnum getType()
    {
        return this.type;
    }

    public void setType(_ParameterTypeEnum value)
    {
        this.type = value;
    }

    public boolean isNullable()
    {
        return this.nullable;
    }

    public void setNullable(boolean value)
    {
        this.nullable = value;
    }

    public boolean isAllowBlank()
    {
        return this.allowBlank;
    }

    public void setAllowBlank(boolean value)
    {
        this.allowBlank = value;
    }

    public boolean isMultiValue()
    {
        return this.multiValue;
    }

    public void setMultiValue(boolean value)
    {
        this.multiValue = value;
    }

    public boolean isQueryParameter()
    {
        return this.queryParameter;
    }

    public void setQueryParameter(boolean value)
    {
        this.queryParameter = value;
    }

    public String getPrompt()
    {
        return this.prompt;
    }

    public void setPrompt(String value)
    {
        this.prompt = value;
    }

    public boolean isPromptUser()
    {
        return this.promptUser;
    }

    public void setPromptUser(boolean value)
    {
        this.promptUser = value;
    }

    public String[] getDependencies()
    {
        return this.dependencies;
    }

    public void setDependencies(String[] value)
    {
        this.dependencies = value;
    }

    public boolean isValidValuesQueryBased()
    {
        return this.validValuesQueryBased;
    }

    public void setValidValuesQueryBased(boolean value)
    {
        this.validValuesQueryBased = value;
    }

    public _ValidValue[] getValidValues()
    {
        return this.validValues;
    }

    public void setValidValues(_ValidValue[] value)
    {
        this.validValues = value;
    }

    public boolean isDefaultValuesQueryBased()
    {
        return this.defaultValuesQueryBased;
    }

    public void setDefaultValuesQueryBased(boolean value)
    {
        this.defaultValuesQueryBased = value;
    }

    public String[] getDefaultValues()
    {
        return this.defaultValues;
    }

    public void setDefaultValues(String[] value)
    {
        this.defaultValues = value;
    }

    public _ParameterStateEnum getState()
    {
        return this.state;
    }

    public void setState(_ParameterStateEnum value)
    {
        this.state = value;
    }

    public String getErrorMessage()
    {
        return this.errorMessage;
    }

    public void setErrorMessage(String value)
    {
        this.errorMessage = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);

        if (this.type != null)
        {
            this.type.writeAsElement(
                writer,
                "Type");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "Nullable",
            this.nullable);
        XMLStreamWriterHelper.writeElement(
            writer,
            "AllowBlank",
            this.allowBlank);
        XMLStreamWriterHelper.writeElement(
            writer,
            "MultiValue",
            this.multiValue);
        XMLStreamWriterHelper.writeElement(
            writer,
            "QueryParameter",
            this.queryParameter);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Prompt",
            this.prompt);
        XMLStreamWriterHelper.writeElement(
            writer,
            "PromptUser",
            this.promptUser);

        if (this.dependencies != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Dependencies");

            for (int iterator0 = 0; iterator0 < this.dependencies.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "Dependency",
                    this.dependencies[iterator0]);
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "ValidValuesQueryBased",
            this.validValuesQueryBased);

        if (this.validValues != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("ValidValues");

            for (int iterator0 = 0; iterator0 < this.validValues.length; iterator0++)
            {
                this.validValues[iterator0].writeAsElement(
                    writer,
                    "ValidValue");
            }

            writer.writeEndElement();
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "DefaultValuesQueryBased",
            this.defaultValuesQueryBased);

        if (this.defaultValues != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DefaultValues");

            for (int iterator0 = 0; iterator0 < this.defaultValues.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "Value",
                    this.defaultValues[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.state != null)
        {
            this.state.writeAsElement(
                writer,
                "State");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "ErrorMessage",
            this.errorMessage);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Type"))
                {
                    this.type = _ParameterTypeEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Nullable"))
                {
                    this.nullable = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("AllowBlank"))
                {
                    this.allowBlank = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("MultiValue"))
                {
                    this.multiValue = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("QueryParameter"))
                {
                    this.queryParameter = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Prompt"))
                {
                    this.prompt = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("PromptUser"))
                {
                    this.promptUser = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("Dependencies"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.dependencies = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("ValidValuesQueryBased"))
                {
                    this.validValuesQueryBased = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ValidValues"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            _ValidValue complexObject0 = new _ValidValue();
                            complexObject0.readFromElement(reader);
                            list0.add(complexObject0);
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.validValues = (_ValidValue[]) list0.toArray(new _ValidValue[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("DefaultValuesQueryBased"))
                {
                    this.defaultValuesQueryBased = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("DefaultValues"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.defaultValues = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("State"))
                {
                    this.state = _ParameterStateEnum.fromString(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("ErrorMessage"))
                {
                    this.errorMessage = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
