// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.tfs.versioncontrol.clientservices._03._Change;
import ms.tfs.versioncontrol.clientservices._03._ChangeRequest;
import ms.tfs.versioncontrol.clientservices._03._ChangeType;
import ms.tfs.versioncontrol.clientservices._03._Changeset;
import ms.tfs.versioncontrol.clientservices._03._CheckinNote;
import ms.tfs.versioncontrol.clientservices._03._CheckinNoteFieldValue;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinNotificationWorkItemInfo;
import ms.tfs.versioncontrol.clientservices._03._CheckinResult;
import ms.tfs.versioncontrol.clientservices._03._CheckinWorkItemAction;
import ms.tfs.versioncontrol.clientservices._03._Conflict;
import ms.tfs.versioncontrol.clientservices._03._ConflictType;
import ms.tfs.versioncontrol.clientservices._03._DeletedState;
import ms.tfs.versioncontrol.clientservices._03._ExtendedItem;
import ms.tfs.versioncontrol.clientservices._03._Failure;
import ms.tfs.versioncontrol.clientservices._03._GetOperation;
import ms.tfs.versioncontrol.clientservices._03._GetRequest;
import ms.tfs.versioncontrol.clientservices._03._Item;
import ms.tfs.versioncontrol.clientservices._03._ItemSet;
import ms.tfs.versioncontrol.clientservices._03._ItemSpec;
import ms.tfs.versioncontrol.clientservices._03._ItemType;
import ms.tfs.versioncontrol.clientservices._03._LocalItemExclusionSet;
import ms.tfs.versioncontrol.clientservices._03._LocalPendingChange;
import ms.tfs.versioncontrol.clientservices._03._LockLevel;
import ms.tfs.versioncontrol.clientservices._03._Mapping;
import ms.tfs.versioncontrol.clientservices._03._MergeSource;
import ms.tfs.versioncontrol.clientservices._03._PendingChange;
import ms.tfs.versioncontrol.clientservices._03._PendingSet;
import ms.tfs.versioncontrol.clientservices._03._PendingSetType;
import ms.tfs.versioncontrol.clientservices._03._PolicyFailureInfo;
import ms.tfs.versioncontrol.clientservices._03._PolicyOverrideInfo;
import ms.tfs.versioncontrol.clientservices._03._PropertyValue;
import ms.tfs.versioncontrol.clientservices._03._ReconcileResult;
import ms.tfs.versioncontrol.clientservices._03._RecursionType;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CheckIn;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CheckInResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CheckInShelveset;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CheckInShelvesetResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CompareLabels;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CompareLabelsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CreateBranch;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_CreateBranchResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_Get;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_GetResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_GetServerSettings;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_GetServerSettingsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_Merge;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_MergeResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_PendChanges;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_PendChangesInLocalWorkspace;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_PendChangesInLocalWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_PendChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryChangesForChangeset;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryChangesForChangesetResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryChangesetExtended;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryChangesetExtendedResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryItems;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryItemsExtended;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryItemsExtendedResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryItemsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingChangeSignature;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingChangeSignatureResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingChangesForWorkspace;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingChangesForWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingSets;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingSetsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingSetsWithLocalWorkspaces;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryPendingSetsWithLocalWorkspacesResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryShelvedChanges;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryShelvedChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryShelvesets;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryShelvesetsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspace;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspaceItems;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspaceItemsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspaces;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_QueryWorkspacesResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_ReconcileLocalWorkspace;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_ReconcileLocalWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_Resolve;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_ResolveResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_Rollback;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_RollbackResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_SetServerSettings;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_SetServerSettingsResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UndoPendingChanges;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UndoPendingChangesInLocalWorkspace;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UndoPendingChangesInLocalWorkspaceResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UndoPendingChangesResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_Unshelve;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UnshelveResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UpdateLocalVersion;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UpdateLocalVersionResponse;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UpdateShelveset;
import ms.tfs.versioncontrol.clientservices._03._Repository4Soap_UpdateShelvesetResponse;
import ms.tfs.versioncontrol.clientservices._03._RequestType;
import ms.tfs.versioncontrol.clientservices._03._Resolution;
import ms.tfs.versioncontrol.clientservices._03._ServerItemLocalVersionUpdate;
import ms.tfs.versioncontrol.clientservices._03._ServerSettings;
import ms.tfs.versioncontrol.clientservices._03._SeverityType;
import ms.tfs.versioncontrol.clientservices._03._Shelveset;
import ms.tfs.versioncontrol.clientservices._03._VersionControlLink;
import ms.tfs.versioncontrol.clientservices._03._VersionSpec;
import ms.tfs.versioncontrol.clientservices._03._Warning;
import ms.tfs.versioncontrol.clientservices._03._WarningType;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolder;
import ms.tfs.versioncontrol.clientservices._03._WorkingFolderType;
import ms.tfs.versioncontrol.clientservices._03._Workspace;
import ms.tfs.versioncontrol.clientservices._03._WorkspaceItem;
import ms.tfs.versioncontrol.clientservices._03._WorkspaceItemSet;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.Object;
import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03}Repository4Soap12Service
 */
public class _Repository4Soap12Service
    extends SOAP12Service
    implements _Repository4Soap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/VersionControl/ClientServices/03",
                "Repository4Soap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/VersionControl/v4.0/Repository.asmx";

    public _Repository4Soap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _Repository4Soap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _Repository4Soap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _Repository4Soap12Service.ENDPOINT_PATH;
    }

    public _Repository4Soap_CreateBranchResponse createBranch(
        final String sourcePath,
        final String targetPath,
        final _VersionSpec version,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final _Mapping[] mappings)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_CreateBranch requestData = new _Repository4Soap_CreateBranch(sourcePath, targetPath,
                version, info, checkinNotificationInfo, mappings);

        final SOAPRequest request = createSOAPRequest(
                "CreateBranch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateBranch");
                    }
                });

        final _Repository4Soap_CreateBranchResponse responseData = new _Repository4Soap_CreateBranchResponse();

        executeSOAPRequest(
            request,
            "CreateBranchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_CheckInResponse checkIn(
        final String workspaceName,
        final String ownerName,
        final String[] serverItems,
        final _Changeset info,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions,
        final boolean deferCheckIn,
        final int checkInTicket)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_CheckIn requestData = new _Repository4Soap_CheckIn(workspaceName, ownerName,
                serverItems, info, checkinNotificationInfo, checkinOptions, deferCheckIn, checkInTicket);

        final SOAPRequest request = createSOAPRequest(
                "CheckIn",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckIn");
                    }
                });

        final _Repository4Soap_CheckInResponse responseData = new _Repository4Soap_CheckInResponse();

        executeSOAPRequest(
            request,
            "CheckInResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_CheckInShelvesetResponse checkInShelveset(
        final String shelvesetName,
        final String ownerName,
        final String changesetOwner,
        final _CheckinNotificationInfo checkinNotificationInfo,
        final int checkinOptions)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_CheckInShelveset requestData = new _Repository4Soap_CheckInShelveset(shelvesetName,
                ownerName, changesetOwner, checkinNotificationInfo, checkinOptions);

        final SOAPRequest request = createSOAPRequest(
                "CheckInShelveset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CheckInShelveset");
                    }
                });

        final _Repository4Soap_CheckInShelvesetResponse responseData = new _Repository4Soap_CheckInShelvesetResponse();

        executeSOAPRequest(
            request,
            "CheckInShelvesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public String queryPendingChangeSignature(
        final String workspaceName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryPendingChangeSignature requestData = new _Repository4Soap_QueryPendingChangeSignature(
                    workspaceName,
                    ownerName);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingChangeSignature",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingChangeSignature");
                    }
                });

        final _Repository4Soap_QueryPendingChangeSignatureResponse responseData = new _Repository4Soap_QueryPendingChangeSignatureResponse();

        executeSOAPRequest(
            request,
            "QueryPendingChangeSignatureResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryPendingChangeSignatureResult();
    }

    public _Repository4Soap_PendChangesInLocalWorkspaceResponse pendChangesInLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_PendChangesInLocalWorkspace requestData = new _Repository4Soap_PendChangesInLocalWorkspace(
                    workspaceName,
                    ownerName,
                    changes,
                    pendChangesOptions,
                    supportedFeatures,
                    itemPropertyFilters,
                    itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "PendChangesInLocalWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PendChangesInLocalWorkspace");
                    }
                });

        final _Repository4Soap_PendChangesInLocalWorkspaceResponse responseData = new _Repository4Soap_PendChangesInLocalWorkspaceResponse();

        executeSOAPRequest(
            request,
            "PendChangesInLocalWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_QueryPendingSetsWithLocalWorkspacesResponse queryPendingSetsWithLocalWorkspaces(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String queryWorkspaceName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryPendingSetsWithLocalWorkspaces requestData = new _Repository4Soap_QueryPendingSetsWithLocalWorkspaces(
                    localWorkspaceName,
                    localWorkspaceOwner,
                    queryWorkspaceName,
                    ownerName,
                    itemSpecs,
                    generateDownloadUrls,
                    itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingSetsWithLocalWorkspaces",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingSetsWithLocalWorkspaces");
                    }
                });

        final _Repository4Soap_QueryPendingSetsWithLocalWorkspacesResponse responseData = new _Repository4Soap_QueryPendingSetsWithLocalWorkspacesResponse();

        executeSOAPRequest(
            request,
            "QueryPendingSetsWithLocalWorkspacesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Workspace queryWorkspace(
        final String workspaceName,
        final String ownerName)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryWorkspace requestData = new _Repository4Soap_QueryWorkspace(workspaceName, ownerName);

        final SOAPRequest request = createSOAPRequest(
                "QueryWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryWorkspace");
                    }
                });

        final _Repository4Soap_QueryWorkspaceResponse responseData = new _Repository4Soap_QueryWorkspaceResponse();

        executeSOAPRequest(
            request,
            "QueryWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryWorkspaceResult();
    }

    public _Workspace[] queryWorkspaces(
        final String ownerName,
        final String computer,
        final int permissionsFilter)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryWorkspaces requestData = new _Repository4Soap_QueryWorkspaces(ownerName, computer,
                permissionsFilter);

        final SOAPRequest request = createSOAPRequest(
                "QueryWorkspaces",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryWorkspaces");
                    }
                });

        final _Repository4Soap_QueryWorkspacesResponse responseData = new _Repository4Soap_QueryWorkspacesResponse();

        executeSOAPRequest(
            request,
            "QueryWorkspacesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryWorkspacesResult();
    }

    public _ReconcileResult reconcileLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final String pendingChangeSignature,
        final _LocalPendingChange[] pendingChanges,
        final _ServerItemLocalVersionUpdate[] localVersionUpdates,
        final boolean clearLocalVersionTable)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_ReconcileLocalWorkspace requestData = new _Repository4Soap_ReconcileLocalWorkspace(
                    workspaceName,
                    ownerName,
                    pendingChangeSignature,
                    pendingChanges,
                    localVersionUpdates,
                    clearLocalVersionTable);

        final SOAPRequest request = createSOAPRequest(
                "ReconcileLocalWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReconcileLocalWorkspace");
                    }
                });

        final _Repository4Soap_ReconcileLocalWorkspaceResponse responseData = new _Repository4Soap_ReconcileLocalWorkspaceResponse();

        executeSOAPRequest(
            request,
            "ReconcileLocalWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReconcileLocalWorkspaceResult();
    }

    public _Repository4Soap_UndoPendingChangesInLocalWorkspaceResponse undoPendingChangesInLocalWorkspace(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_UndoPendingChangesInLocalWorkspace requestData = new _Repository4Soap_UndoPendingChangesInLocalWorkspace(
                    workspaceName,
                    ownerName,
                    items,
                    itemPropertyFilters,
                    itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "UndoPendingChangesInLocalWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UndoPendingChangesInLocalWorkspace");
                    }
                });

        final _Repository4Soap_UndoPendingChangesInLocalWorkspaceResponse responseData = new _Repository4Soap_UndoPendingChangesInLocalWorkspaceResponse();

        executeSOAPRequest(
            request,
            "UndoPendingChangesInLocalWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_UnshelveResponse unshelve(
        final String shelvesetName,
        final String shelvesetOwner,
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttrbuteFilters,
        final String[] shelvesetPropertyNameFilters,
        final boolean merge)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_Unshelve requestData = new _Repository4Soap_Unshelve(shelvesetName, shelvesetOwner,
                workspaceName, workspaceOwner, items, itemPropertyFilters, itemAttrbuteFilters,
                shelvesetPropertyNameFilters, merge);

        final SOAPRequest request = createSOAPRequest(
                "Unshelve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Unshelve");
                    }
                });

        final _Repository4Soap_UnshelveResponse responseData = new _Repository4Soap_UnshelveResponse();

        executeSOAPRequest(
            request,
            "UnshelveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void updateLocalVersion(
        final String workspaceName,
        final String ownerName,
        final _ServerItemLocalVersionUpdate[] updates)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_UpdateLocalVersion requestData = new _Repository4Soap_UpdateLocalVersion(workspaceName,
                ownerName, updates);

        final SOAPRequest request = createSOAPRequest(
                "UpdateLocalVersion",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateLocalVersion");
                    }
                });

        final _Repository4Soap_UpdateLocalVersionResponse responseData = new _Repository4Soap_UpdateLocalVersionResponse();

        executeSOAPRequest(
            request,
            "UpdateLocalVersionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ServerSettings getServerSettings()
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_GetServerSettings requestData = new _Repository4Soap_GetServerSettings();

        final SOAPRequest request = createSOAPRequest(
                "GetServerSettings",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetServerSettings");
                    }
                });

        final _Repository4Soap_GetServerSettingsResponse responseData = new _Repository4Soap_GetServerSettingsResponse();

        executeSOAPRequest(
            request,
            "GetServerSettingsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetServerSettingsResult();
    }

    public void setServerSettings(final _ServerSettings settings)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_SetServerSettings requestData = new _Repository4Soap_SetServerSettings(settings);

        final SOAPRequest request = createSOAPRequest(
                "SetServerSettings",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetServerSettings");
                    }
                });

        final _Repository4Soap_SetServerSettingsResponse responseData = new _Repository4Soap_SetServerSettingsResponse();

        executeSOAPRequest(
            request,
            "SetServerSettingsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void updateShelveset(
        final String shelvesetName,
        final String ownerName,
        final _Shelveset updatedShelveset)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_UpdateShelveset requestData = new _Repository4Soap_UpdateShelveset(shelvesetName,
                ownerName, updatedShelveset);

        final SOAPRequest request = createSOAPRequest(
                "UpdateShelveset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateShelveset");
                    }
                });

        final _Repository4Soap_UpdateShelvesetResponse responseData = new _Repository4Soap_UpdateShelvesetResponse();

        executeSOAPRequest(
            request,
            "UpdateShelvesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Shelveset[] queryShelvesets(
        final String shelvesetName,
        final String ownerName,
        final String[] propertyNameFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryShelvesets requestData = new _Repository4Soap_QueryShelvesets(shelvesetName,
                ownerName, propertyNameFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryShelvesets",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryShelvesets");
                    }
                });

        final _Repository4Soap_QueryShelvesetsResponse responseData = new _Repository4Soap_QueryShelvesetsResponse();

        executeSOAPRequest(
            request,
            "QueryShelvesetsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryShelvesetsResult();
    }

    public _WorkspaceItemSet[] queryWorkspaceItems(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final boolean generateDownloadUrls,
        final int options)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryWorkspaceItems requestData = new _Repository4Soap_QueryWorkspaceItems(workspaceName,
                workspaceOwner,
                items,
                deletedState,
                itemType,
                generateDownloadUrls,
                options);

        final SOAPRequest request = createSOAPRequest(
                "QueryWorkspaceItems",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryWorkspaceItems");
                    }
                });

        final _Repository4Soap_QueryWorkspaceItemsResponse responseData = new _Repository4Soap_QueryWorkspaceItemsResponse();

        executeSOAPRequest(
            request,
            "QueryWorkspaceItemsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryWorkspaceItemsResult();
    }

    public _Repository4Soap_QueryPendingSetsResponse queryPendingSets(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String queryWorkspaceName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryPendingSets requestData = new _Repository4Soap_QueryPendingSets(localWorkspaceName,
                localWorkspaceOwner,
                queryWorkspaceName,
                ownerName,
                itemSpecs,
                generateDownloadUrls,
                itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingSets",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingSets");
                    }
                });

        final _Repository4Soap_QueryPendingSetsResponse responseData = new _Repository4Soap_QueryPendingSetsResponse();

        executeSOAPRequest(
            request,
            "QueryPendingSetsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_QueryPendingChangesForWorkspaceResponse queryPendingChangesForWorkspace(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final int pageSize,
        final String lastChange,
        final boolean includeMergeInfo,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryPendingChangesForWorkspace requestData = new _Repository4Soap_QueryPendingChangesForWorkspace(
                    workspaceName,
                    workspaceOwner,
                    itemSpecs,
                    generateDownloadUrls,
                    pageSize,
                    lastChange,
                    includeMergeInfo,
                    itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryPendingChangesForWorkspace",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryPendingChangesForWorkspace");
                    }
                });

        final _Repository4Soap_QueryPendingChangesForWorkspaceResponse responseData = new _Repository4Soap_QueryPendingChangesForWorkspaceResponse();

        executeSOAPRequest(
            request,
            "QueryPendingChangesForWorkspaceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_QueryShelvedChangesResponse queryShelvedChanges(
        final String localWorkspaceName,
        final String localWorkspaceOwner,
        final String shelvesetName,
        final String ownerName,
        final _ItemSpec[] itemSpecs,
        final boolean generateDownloadUrls,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryShelvedChanges requestData = new _Repository4Soap_QueryShelvedChanges(
                    localWorkspaceName,
                    localWorkspaceOwner,
                    shelvesetName,
                    ownerName,
                    itemSpecs,
                    generateDownloadUrls,
                    itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryShelvedChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryShelvedChanges");
                    }
                });

        final _Repository4Soap_QueryShelvedChangesResponse responseData = new _Repository4Soap_QueryShelvedChangesResponse();

        executeSOAPRequest(
            request,
            "QueryShelvedChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ExtendedItem[][] queryItemsExtended(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final int options,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryItemsExtended requestData = new _Repository4Soap_QueryItemsExtended(workspaceName,
                workspaceOwner, items, deletedState, itemType, options, itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryItemsExtended",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItemsExtended");
                    }
                });

        final _Repository4Soap_QueryItemsExtendedResponse responseData = new _Repository4Soap_QueryItemsExtendedResponse();

        executeSOAPRequest(
            request,
            "QueryItemsExtendedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryItemsExtendedResult();
    }

    public _ItemSet[] queryItems(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec version,
        final _DeletedState deletedState,
        final _ItemType itemType,
        final boolean generateDownloadUrls,
        final int options,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryItems requestData = new _Repository4Soap_QueryItems(workspaceName, workspaceOwner,
                items, version, deletedState, itemType, generateDownloadUrls, options, itemPropertyFilters,
                itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryItems",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryItems");
                    }
                });

        final _Repository4Soap_QueryItemsResponse responseData = new _Repository4Soap_QueryItemsResponse();

        executeSOAPRequest(
            request,
            "QueryItemsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryItemsResult();
    }

    public _Repository4Soap_ResolveResponse resolve(
        final String workspaceName,
        final String ownerName,
        final int conflictId,
        final _Resolution resolution,
        final String newPath,
        final int encoding,
        final _LockLevel lockLevel,
        final _PropertyValue[] newProperties,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_Resolve requestData = new _Repository4Soap_Resolve(workspaceName, ownerName, conflictId,
                resolution, newPath, encoding, lockLevel, newProperties, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "Resolve",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Resolve");
                    }
                });

        final _Repository4Soap_ResolveResponse responseData = new _Repository4Soap_ResolveResponse();

        executeSOAPRequest(
            request,
            "ResolveResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_PendChangesResponse pendChanges(
        final String workspaceName,
        final String ownerName,
        final _ChangeRequest[] changes,
        final int pendChangesOptions,
        final int supportedFeatures,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_PendChanges requestData = new _Repository4Soap_PendChanges(workspaceName, ownerName,
                changes, pendChangesOptions, supportedFeatures, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "PendChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PendChanges");
                    }
                });

        final _Repository4Soap_PendChangesResponse responseData = new _Repository4Soap_PendChangesResponse();

        executeSOAPRequest(
            request,
            "PendChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_MergeResponse merge(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec source,
        final _ItemSpec target,
        final _VersionSpec from,
        final _VersionSpec to,
        final _LockLevel lockLevel,
        final int optionsEx,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_Merge requestData = new _Repository4Soap_Merge(workspaceName, workspaceOwner, source,
                target, from, to, lockLevel, optionsEx, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "Merge",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Merge");
                    }
                });

        final _Repository4Soap_MergeResponse responseData = new _Repository4Soap_MergeResponse();

        executeSOAPRequest(
            request,
            "MergeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_RollbackResponse rollback(
        final String workspaceName,
        final String workspaceOwner,
        final _ItemSpec[] items,
        final _VersionSpec itemVersion,
        final _VersionSpec from,
        final _VersionSpec to,
        final int rollbackOptions,
        final _LockLevel lockLevel,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_Rollback requestData = new _Repository4Soap_Rollback(workspaceName, workspaceOwner,
                items, itemVersion, from, to, rollbackOptions, lockLevel, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "Rollback",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Rollback");
                    }
                });

        final _Repository4Soap_RollbackResponse responseData = new _Repository4Soap_RollbackResponse();

        executeSOAPRequest(
            request,
            "RollbackResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _Repository4Soap_UndoPendingChangesResponse undoPendingChanges(
        final String workspaceName,
        final String ownerName,
        final _ItemSpec[] items,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_UndoPendingChanges requestData = new _Repository4Soap_UndoPendingChanges(workspaceName,
                ownerName, items, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "UndoPendingChanges",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UndoPendingChanges");
                    }
                });

        final _Repository4Soap_UndoPendingChangesResponse responseData = new _Repository4Soap_UndoPendingChangesResponse();

        executeSOAPRequest(
            request,
            "UndoPendingChangesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _GetOperation[][] get(
        final String workspaceName,
        final String ownerName,
        final _GetRequest[] requests,
        final int maxResults,
        final int options,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_Get requestData = new _Repository4Soap_Get(workspaceName, ownerName, requests,
                maxResults, options, itemPropertyFilters, itemAttributeFilters);

        final SOAPRequest request = createSOAPRequest(
                "Get",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Get");
                    }
                });

        final _Repository4Soap_GetResponse responseData = new _Repository4Soap_GetResponse();

        executeSOAPRequest(
            request,
            "GetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetResult();
    }

    public _Change[] queryChangesForChangeset(
        final int changesetId,
        final boolean generateDownloadUrls,
        final int pageSize,
        final _ItemSpec lastItem,
        final String[] itemPropertyFilters,
        final String[] itemAttributeFilters,
        final boolean includeMergeSourceInfo)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryChangesForChangeset requestData = new _Repository4Soap_QueryChangesForChangeset(
                    changesetId,
                    generateDownloadUrls,
                    pageSize,
                    lastItem,
                    itemPropertyFilters,
                    itemAttributeFilters,
                    includeMergeSourceInfo);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangesForChangeset",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangesForChangeset");
                    }
                });

        final _Repository4Soap_QueryChangesForChangesetResponse responseData = new _Repository4Soap_QueryChangesForChangesetResponse();

        executeSOAPRequest(
            request,
            "QueryChangesForChangesetResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesForChangesetResult();
    }

    public _Changeset queryChangesetExtended(
        final int changesetId,
        final boolean includeChanges,
        final boolean generateDownloadUrls,
        final String[] changesetPropertyFilters,
        final String[] itemAttributeFilters,
        final String[] itemPropertyFilters)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_QueryChangesetExtended requestData = new _Repository4Soap_QueryChangesetExtended(
                    changesetId,
                    includeChanges,
                    generateDownloadUrls,
                    changesetPropertyFilters,
                    itemAttributeFilters,
                    itemPropertyFilters);

        final SOAPRequest request = createSOAPRequest(
                "QueryChangesetExtended",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "QueryChangesetExtended");
                    }
                });

        final _Repository4Soap_QueryChangesetExtendedResponse responseData = new _Repository4Soap_QueryChangesetExtendedResponse();

        executeSOAPRequest(
            request,
            "QueryChangesetExtendedResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getQueryChangesetExtendedResult();
    }

    public _Changeset[] compareLabels(
        final String startLabelName,
        final String startLabelScope,
        final String endLabelName,
        final String endLabelScope,
        final int minChangeSet,
        final int maxCount)
        throws TransportException, SOAPFault
    {
        final _Repository4Soap_CompareLabels requestData = new _Repository4Soap_CompareLabels(startLabelName,
                startLabelScope, endLabelName, endLabelScope, minChangeSet, maxCount);

        final SOAPRequest request = createSOAPRequest(
                "CompareLabels",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CompareLabels");
                    }
                });

        final _Repository4Soap_CompareLabelsResponse responseData = new _Repository4Soap_CompareLabelsResponse();

        executeSOAPRequest(
            request,
            "CompareLabelsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCompareLabelsResult();
    }
}
