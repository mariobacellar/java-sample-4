// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._DateVersionSpec;

import java.lang.String;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _DateVersionSpec
    extends _VersionSpec
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected Calendar date;
    protected String otext;

    // No elements    
    public _DateVersionSpec()
    {
        super();
    }

    public _DateVersionSpec(
        final Calendar date,
        final String otext)
    {
        // TODO : Call super() instead of setting all fields directly?
        setDate(date);
        setOtext(otext);
    }

    public Calendar getDate()
    {
        return this.date;
    }

    public void setDate(final Calendar value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'date' is a required attribute, its value cannot be null");
        }

        this.date = value;
    }

    public String getOtext()
    {
        return this.otext;
    }

    public void setOtext(final String value)
    {
        this.otext = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "DateVersionSpec");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "date",
            this.date,
            true);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "otext",
            this.otext);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("date"))
            {
                this.date = XMLConvert.toCalendar(
                        attributeValue,
                        true);
            }
            else if (localName.equalsIgnoreCase("otext"))
            {
                this.otext = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
