// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;

import ms.sql.reporting.reportingservices._ActiveState;
import ms.sql.reporting.reportingservices._ArrayOfChoice1;
import ms.sql.reporting.reportingservices._BooleanOperatorEnum;
import ms.sql.reporting.reportingservices._CatalogItem;
import ms.sql.reporting.reportingservices._ConditionEnum;
import ms.sql.reporting.reportingservices._CredentialRetrievalEnum;
import ms.sql.reporting.reportingservices._DailyRecurrence;
import ms.sql.reporting.reportingservices._DataRetrievalPlan;
import ms.sql.reporting.reportingservices._DataSetDefinition;
import ms.sql.reporting.reportingservices._DataSource;
import ms.sql.reporting.reportingservices._DataSourceCredentials;
import ms.sql.reporting.reportingservices._DataSourceDefinition;
import ms.sql.reporting.reportingservices._DataSourcePrompt;
import ms.sql.reporting.reportingservices._DataSourceReference;
import ms.sql.reporting.reportingservices._DaysOfWeekSelector;
import ms.sql.reporting.reportingservices._DrillthroughType;
import ms.sql.reporting.reportingservices._Event;
import ms.sql.reporting.reportingservices._ExecutionSettingEnum;
import ms.sql.reporting.reportingservices._Extension;
import ms.sql.reporting.reportingservices._ExtensionParameter;
import ms.sql.reporting.reportingservices._ExtensionSettings;
import ms.sql.reporting.reportingservices._ExtensionTypeEnum;
import ms.sql.reporting.reportingservices._Field;
import ms.sql.reporting.reportingservices._InvalidDataSourceReference;
import ms.sql.reporting.reportingservices._ItemTypeEnum;
import ms.sql.reporting.reportingservices._Job;
import ms.sql.reporting.reportingservices._JobActionEnum;
import ms.sql.reporting.reportingservices._JobStatusEnum;
import ms.sql.reporting.reportingservices._JobTypeEnum;
import ms.sql.reporting.reportingservices._MinuteRecurrence;
import ms.sql.reporting.reportingservices._ModelCatalogItem;
import ms.sql.reporting.reportingservices._ModelDrillthroughReport;
import ms.sql.reporting.reportingservices._ModelItem;
import ms.sql.reporting.reportingservices._ModelItemTypeEnum;
import ms.sql.reporting.reportingservices._ModelPerspective;
import ms.sql.reporting.reportingservices._MonthlyDOWRecurrence;
import ms.sql.reporting.reportingservices._MonthlyRecurrence;
import ms.sql.reporting.reportingservices._MonthsOfYearSelector;
import ms.sql.reporting.reportingservices._NoSchedule;
import ms.sql.reporting.reportingservices._ParameterFieldReference;
import ms.sql.reporting.reportingservices._ParameterStateEnum;
import ms.sql.reporting.reportingservices._ParameterTypeEnum;
import ms.sql.reporting.reportingservices._ParameterValue;
import ms.sql.reporting.reportingservices._ParameterValueOrFieldReference;
import ms.sql.reporting.reportingservices._Policy;
import ms.sql.reporting.reportingservices._Property;
import ms.sql.reporting.reportingservices._QueryDefinition;
import ms.sql.reporting.reportingservices._ReportHistorySnapshot;
import ms.sql.reporting.reportingservices._ReportParameter;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CancelBatch;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CancelBatchResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CancelJob;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CancelJobResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateBatch;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateBatchResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateDataDrivenSubscription;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateDataDrivenSubscriptionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateDataSource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateDataSourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateFolder;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateFolderResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateLinkedReport;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateLinkedReportResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateModel;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateModelResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateReport;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateReportHistorySnapshot;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateReportHistorySnapshotResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateReportResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateResource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateResourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateRole;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateRoleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateSchedule;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateScheduleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateSubscription;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_CreateSubscriptionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteItem;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteItemResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteReportHistorySnapshot;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteReportHistorySnapshotResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteRole;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteRoleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteSchedule;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteScheduleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteSubscription;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DeleteSubscriptionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DisableDataSource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_DisableDataSourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_EnableDataSource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_EnableDataSourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ExecuteBatch;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ExecuteBatchResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FindItems;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FindItemsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FireEvent;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FireEventResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FlushCache;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_FlushCacheResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GenerateModel;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GenerateModelResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetCacheOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetCacheOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetDataDrivenSubscriptionProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetDataDrivenSubscriptionPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetDataSourceContents;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetDataSourceContentsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetExecutionOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetExecutionOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetExtensionSettings;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetExtensionSettingsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemDataSourcePrompts;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemDataSourcePromptsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemDataSources;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemDataSourcesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemType;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetItemTypeResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelDefinition;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelDefinitionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelItemPermissions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelItemPermissionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelItemPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetModelItemPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetPermissions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetPermissionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetRenderResource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetRenderResourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportDefinition;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportDefinitionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportHistoryLimit;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportHistoryLimitResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportHistoryOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportHistoryOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportLink;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportLinkResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportParameters;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetReportParametersResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetResourceContents;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetResourceContentsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetRoleProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetRolePropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetScheduleProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSchedulePropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSubscriptionProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSubscriptionPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemPermissions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemPermissionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetSystemPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetUserModel;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_GetUserModelResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_InheritModelItemParentSecurity;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_InheritModelItemParentSecurityResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_InheritParentSecurity;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_InheritParentSecurityResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListChildren;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListChildrenResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListDependentItems;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListDependentItemsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListEvents;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListEventsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListExtensions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListExtensionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListJobs;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListJobsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelDrillthroughReports;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelDrillthroughReportsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelItemChildren;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelItemChildrenResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelPerspectives;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListModelPerspectivesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListReportHistory;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListReportHistoryResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListRoles;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListRolesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListScheduledReports;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListScheduledReportsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSchedules;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSchedulesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSecureMethods;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSecureMethodsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSubscriptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSubscriptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSubscriptionsUsingDataSource;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListSubscriptionsUsingDataSourceResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListTasks;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ListTasksResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_Logoff;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_LogoffResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_LogonUser;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_LogonUserResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_MoveItem;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_MoveItemResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_PauseSchedule;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_PauseScheduleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_PrepareQuery;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_PrepareQueryResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_RegenerateModel;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_RegenerateModelResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_RemoveAllModelItemPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_RemoveAllModelItemPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ResumeSchedule;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ResumeScheduleResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetCacheOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetCacheOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetDataDrivenSubscriptionProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetDataDrivenSubscriptionPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetDataSourceContents;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetDataSourceContentsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetExecutionOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetExecutionOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetItemDataSources;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetItemDataSourcesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelDefinition;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelDefinitionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelDrillthroughReports;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelDrillthroughReportsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelItemPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetModelItemPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportDefinition;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportDefinitionResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportHistoryLimit;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportHistoryLimitResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportHistoryOptions;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportHistoryOptionsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportLink;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportLinkResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportParameters;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetReportParametersResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetResourceContents;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetResourceContentsResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetRoleProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetRolePropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetScheduleProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSchedulePropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSubscriptionProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSubscriptionPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSystemPolicies;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSystemPoliciesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSystemProperties;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_SetSystemPropertiesResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_UpdateReportExecutionSnapshot;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_UpdateReportExecutionSnapshotResponse;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ValidateExtensionSettings;
import ms.sql.reporting.reportingservices._ReportingService2005Soap_ValidateExtensionSettingsResponse;
import ms.sql.reporting.reportingservices._Role;
import ms.sql.reporting.reportingservices._Schedule;
import ms.sql.reporting.reportingservices._ScheduleDefinition;
import ms.sql.reporting.reportingservices._ScheduleExpiration;
import ms.sql.reporting.reportingservices._ScheduleReference;
import ms.sql.reporting.reportingservices._ScheduleStateEnum;
import ms.sql.reporting.reportingservices._SearchCondition;
import ms.sql.reporting.reportingservices._SecurityScopeEnum;
import ms.sql.reporting.reportingservices._SensitivityEnum;
import ms.sql.reporting.reportingservices._Subscription;
import ms.sql.reporting.reportingservices._Task;
import ms.sql.reporting.reportingservices._TimeExpiration;
import ms.sql.reporting.reportingservices._ValidValue;
import ms.sql.reporting.reportingservices._Warning;
import ms.sql.reporting.reportingservices._WeekNumberEnum;
import ms.sql.reporting.reportingservices._WeeklyRecurrence;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices}ReportingService2005SoapService
 */
public class _ReportingService2005SoapService
    extends SOAP11Service
    implements _ReportingService2005Soap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/sqlserver/2005/06/30/reporting/reportingservices",
                "ReportingService2005SoapService");
    private static final String ENDPOINT_PATH = "/ReportServer/ReportService2005.asmx";

    public _ReportingService2005SoapService(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _ReportingService2005SoapService(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _ReportingService2005SoapService.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _ReportingService2005SoapService.ENDPOINT_PATH;
    }

    public String[] listSecureMethods()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListSecureMethods requestData = new _ReportingService2005Soap_ListSecureMethods();

        final SOAPRequest request = createSOAPRequest(
                "ListSecureMethods",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListSecureMethods");
                    }
                });

        final _ReportingService2005Soap_ListSecureMethodsResponse responseData = new _ReportingService2005Soap_ListSecureMethodsResponse();

        executeSOAPRequest(
            request,
            "ListSecureMethodsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListSecureMethodsResult();
    }

    public String createBatch()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateBatch requestData = new _ReportingService2005Soap_CreateBatch();

        final SOAPRequest request = createSOAPRequest(
                "CreateBatch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateBatch");
                    }
                });

        final _ReportingService2005Soap_CreateBatchResponse responseData = new _ReportingService2005Soap_CreateBatchResponse();

        executeSOAPRequest(
            request,
            "CreateBatchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getBatchID();
    }

    public void cancelBatch()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CancelBatch requestData = new _ReportingService2005Soap_CancelBatch();

        final SOAPRequest request = createSOAPRequest(
                "CancelBatch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CancelBatch");
                    }
                });

        final _ReportingService2005Soap_CancelBatchResponse responseData = new _ReportingService2005Soap_CancelBatchResponse();

        executeSOAPRequest(
            request,
            "CancelBatchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void executeBatch()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ExecuteBatch requestData = new _ReportingService2005Soap_ExecuteBatch();

        final SOAPRequest request = createSOAPRequest(
                "ExecuteBatch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ExecuteBatch");
                    }
                });

        final _ReportingService2005Soap_ExecuteBatchResponse responseData = new _ReportingService2005Soap_ExecuteBatchResponse();

        executeSOAPRequest(
            request,
            "ExecuteBatchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Property[] getSystemProperties(final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetSystemProperties requestData = new _ReportingService2005Soap_GetSystemProperties(
                    properties);

        final SOAPRequest request = createSOAPRequest(
                "GetSystemProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetSystemProperties");
                    }
                });

        final _ReportingService2005Soap_GetSystemPropertiesResponse responseData = new _ReportingService2005Soap_GetSystemPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetSystemPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getValues();
    }

    public void setSystemProperties(final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetSystemProperties requestData = new _ReportingService2005Soap_SetSystemProperties(
                    properties);

        final SOAPRequest request = createSOAPRequest(
                "SetSystemProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetSystemProperties");
                    }
                });

        final _ReportingService2005Soap_SetSystemPropertiesResponse responseData = new _ReportingService2005Soap_SetSystemPropertiesResponse();

        executeSOAPRequest(
            request,
            "SetSystemPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteItem(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DeleteItem requestData = new _ReportingService2005Soap_DeleteItem(item);

        final SOAPRequest request = createSOAPRequest(
                "DeleteItem",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteItem");
                    }
                });

        final _ReportingService2005Soap_DeleteItemResponse responseData = new _ReportingService2005Soap_DeleteItemResponse();

        executeSOAPRequest(
            request,
            "DeleteItemResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void moveItem(
        final String item,
        final String target)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_MoveItem requestData = new _ReportingService2005Soap_MoveItem(item, target);

        final SOAPRequest request = createSOAPRequest(
                "MoveItem",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "MoveItem");
                    }
                });

        final _ReportingService2005Soap_MoveItemResponse responseData = new _ReportingService2005Soap_MoveItemResponse();

        executeSOAPRequest(
            request,
            "MoveItemResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _CatalogItem[] listChildren(
        final String item,
        final boolean recursive)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListChildren requestData = new _ReportingService2005Soap_ListChildren(item,
                recursive);

        final SOAPRequest request = createSOAPRequest(
                "ListChildren",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListChildren");
                    }
                });

        final _ReportingService2005Soap_ListChildrenResponse responseData = new _ReportingService2005Soap_ListChildrenResponse();

        executeSOAPRequest(
            request,
            "ListChildrenResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCatalogItems();
    }

    public _CatalogItem[] listDependentItems(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListDependentItems requestData = new _ReportingService2005Soap_ListDependentItems(
                    item);

        final SOAPRequest request = createSOAPRequest(
                "ListDependentItems",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListDependentItems");
                    }
                });

        final _ReportingService2005Soap_ListDependentItemsResponse responseData = new _ReportingService2005Soap_ListDependentItemsResponse();

        executeSOAPRequest(
            request,
            "ListDependentItemsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCatalogItems();
    }

    public _Property[] getProperties(
        final String item,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetProperties requestData = new _ReportingService2005Soap_GetProperties(item,
                properties);

        final SOAPRequest request = createSOAPRequest(
                "GetProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetProperties");
                    }
                });

        final _ReportingService2005Soap_GetPropertiesResponse responseData = new _ReportingService2005Soap_GetPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getValues();
    }

    public void setProperties(
        final String item,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetProperties requestData = new _ReportingService2005Soap_SetProperties(item,
                properties);

        final SOAPRequest request = createSOAPRequest(
                "SetProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetProperties");
                    }
                });

        final _ReportingService2005Soap_SetPropertiesResponse responseData = new _ReportingService2005Soap_SetPropertiesResponse();

        executeSOAPRequest(
            request,
            "SetPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ItemTypeEnum getItemType(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetItemType requestData = new _ReportingService2005Soap_GetItemType(item);

        final SOAPRequest request = createSOAPRequest(
                "GetItemType",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetItemType");
                    }
                });

        final _ReportingService2005Soap_GetItemTypeResponse responseData = new _ReportingService2005Soap_GetItemTypeResponse();

        executeSOAPRequest(
            request,
            "GetItemTypeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getType();
    }

    public void createFolder(
        final String folder,
        final String parent,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateFolder requestData = new _ReportingService2005Soap_CreateFolder(folder,
                parent, properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateFolder",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateFolder");
                    }
                });

        final _ReportingService2005Soap_CreateFolderResponse responseData = new _ReportingService2005Soap_CreateFolderResponse();

        executeSOAPRequest(
            request,
            "CreateFolderResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Warning[] createReport(
        final String report,
        final String parent,
        final boolean overwrite,
        final byte[] definition,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateReport requestData = new _ReportingService2005Soap_CreateReport(report,
                parent, overwrite, definition, properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateReport",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateReport");
                    }
                });

        final _ReportingService2005Soap_CreateReportResponse responseData = new _ReportingService2005Soap_CreateReportResponse();

        executeSOAPRequest(
            request,
            "CreateReportResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }

    public byte[] getReportDefinition(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetReportDefinition requestData = new _ReportingService2005Soap_GetReportDefinition(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "GetReportDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReportDefinition");
                    }
                });

        final _ReportingService2005Soap_GetReportDefinitionResponse responseData = new _ReportingService2005Soap_GetReportDefinitionResponse();

        executeSOAPRequest(
            request,
            "GetReportDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDefinition();
    }

    public _Warning[] setReportDefinition(
        final String report,
        final byte[] definition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetReportDefinition requestData = new _ReportingService2005Soap_SetReportDefinition(
                    report,
                    definition);

        final SOAPRequest request = createSOAPRequest(
                "SetReportDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetReportDefinition");
                    }
                });

        final _ReportingService2005Soap_SetReportDefinitionResponse responseData = new _ReportingService2005Soap_SetReportDefinitionResponse();

        executeSOAPRequest(
            request,
            "SetReportDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }

    public void createResource(
        final String resource,
        final String parent,
        final boolean overwrite,
        final byte[] contents,
        final String mimeType,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateResource requestData = new _ReportingService2005Soap_CreateResource(resource,
                parent,
                overwrite,
                contents,
                mimeType,
                properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateResource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateResource");
                    }
                });

        final _ReportingService2005Soap_CreateResourceResponse responseData = new _ReportingService2005Soap_CreateResourceResponse();

        executeSOAPRequest(
            request,
            "CreateResourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void setResourceContents(
        final String resource,
        final byte[] contents,
        final String mimeType)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetResourceContents requestData = new _ReportingService2005Soap_SetResourceContents(
                    resource,
                    contents,
                    mimeType);

        final SOAPRequest request = createSOAPRequest(
                "SetResourceContents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetResourceContents");
                    }
                });

        final _ReportingService2005Soap_SetResourceContentsResponse responseData = new _ReportingService2005Soap_SetResourceContentsResponse();

        executeSOAPRequest(
            request,
            "SetResourceContentsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetResourceContentsResponse getResourceContents(final String resource)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetResourceContents requestData = new _ReportingService2005Soap_GetResourceContents(
                    resource);

        final SOAPRequest request = createSOAPRequest(
                "GetResourceContents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetResourceContents");
                    }
                });

        final _ReportingService2005Soap_GetResourceContentsResponse responseData = new _ReportingService2005Soap_GetResourceContentsResponse();

        executeSOAPRequest(
            request,
            "GetResourceContentsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ReportParameter[] getReportParameters(
        final String report,
        final String historyID,
        final boolean forRendering,
        final _ParameterValue[] values,
        final _DataSourceCredentials[] credentials)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetReportParameters requestData = new _ReportingService2005Soap_GetReportParameters(
                    report,
                    historyID,
                    forRendering,
                    values,
                    credentials);

        final SOAPRequest request = createSOAPRequest(
                "GetReportParameters",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReportParameters");
                    }
                });

        final _ReportingService2005Soap_GetReportParametersResponse responseData = new _ReportingService2005Soap_GetReportParametersResponse();

        executeSOAPRequest(
            request,
            "GetReportParametersResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getParameters();
    }

    public void setReportParameters(
        final String report,
        final _ReportParameter[] parameters)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetReportParameters requestData = new _ReportingService2005Soap_SetReportParameters(
                    report,
                    parameters);

        final SOAPRequest request = createSOAPRequest(
                "SetReportParameters",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetReportParameters");
                    }
                });

        final _ReportingService2005Soap_SetReportParametersResponse responseData = new _ReportingService2005Soap_SetReportParametersResponse();

        executeSOAPRequest(
            request,
            "SetReportParametersResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void createLinkedReport(
        final String report,
        final String parent,
        final String link,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateLinkedReport requestData = new _ReportingService2005Soap_CreateLinkedReport(
                    report,
                    parent,
                    link,
                    properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateLinkedReport",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateLinkedReport");
                    }
                });

        final _ReportingService2005Soap_CreateLinkedReportResponse responseData = new _ReportingService2005Soap_CreateLinkedReportResponse();

        executeSOAPRequest(
            request,
            "CreateLinkedReportResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String getReportLink(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetReportLink requestData = new _ReportingService2005Soap_GetReportLink(report);

        final SOAPRequest request = createSOAPRequest(
                "GetReportLink",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReportLink");
                    }
                });

        final _ReportingService2005Soap_GetReportLinkResponse responseData = new _ReportingService2005Soap_GetReportLinkResponse();

        executeSOAPRequest(
            request,
            "GetReportLinkResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getLink();
    }

    public void setReportLink(
        final String report,
        final String link)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetReportLink requestData = new _ReportingService2005Soap_SetReportLink(report,
                link);

        final SOAPRequest request = createSOAPRequest(
                "SetReportLink",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetReportLink");
                    }
                });

        final _ReportingService2005Soap_SetReportLinkResponse responseData = new _ReportingService2005Soap_SetReportLinkResponse();

        executeSOAPRequest(
            request,
            "SetReportLinkResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetRenderResourceResponse getRenderResource(
        final String format,
        final String deviceInfo)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetRenderResource requestData = new _ReportingService2005Soap_GetRenderResource(
                    format,
                    deviceInfo);

        final SOAPRequest request = createSOAPRequest(
                "GetRenderResource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetRenderResource");
                    }
                });

        final _ReportingService2005Soap_GetRenderResourceResponse responseData = new _ReportingService2005Soap_GetRenderResourceResponse();

        executeSOAPRequest(
            request,
            "GetRenderResourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setExecutionOptions(
        final String report,
        final _ExecutionSettingEnum executionSetting,
        final _ScheduleReference scheduleReference,
        final _NoSchedule noSchedule,
        final _ScheduleDefinition scheduleDefinition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetExecutionOptions requestData = new _ReportingService2005Soap_SetExecutionOptions(
                    report,
                    executionSetting,
                    scheduleReference,
                    noSchedule,
                    scheduleDefinition);

        final SOAPRequest request = createSOAPRequest(
                "SetExecutionOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetExecutionOptions");
                    }
                });

        final _ReportingService2005Soap_SetExecutionOptionsResponse responseData = new _ReportingService2005Soap_SetExecutionOptionsResponse();

        executeSOAPRequest(
            request,
            "SetExecutionOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetExecutionOptionsResponse getExecutionOptions(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetExecutionOptions requestData = new _ReportingService2005Soap_GetExecutionOptions(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "GetExecutionOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetExecutionOptions");
                    }
                });

        final _ReportingService2005Soap_GetExecutionOptionsResponse responseData = new _ReportingService2005Soap_GetExecutionOptionsResponse();

        executeSOAPRequest(
            request,
            "GetExecutionOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setCacheOptions(
        final String report,
        final boolean cacheReport,
        final _TimeExpiration timeExpiration,
        final _ScheduleExpiration scheduleExpiration)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetCacheOptions requestData = new _ReportingService2005Soap_SetCacheOptions(report,
                cacheReport,
                timeExpiration,
                scheduleExpiration);

        final SOAPRequest request = createSOAPRequest(
                "SetCacheOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetCacheOptions");
                    }
                });

        final _ReportingService2005Soap_SetCacheOptionsResponse responseData = new _ReportingService2005Soap_SetCacheOptionsResponse();

        executeSOAPRequest(
            request,
            "SetCacheOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetCacheOptionsResponse getCacheOptions(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetCacheOptions requestData = new _ReportingService2005Soap_GetCacheOptions(report);

        final SOAPRequest request = createSOAPRequest(
                "GetCacheOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetCacheOptions");
                    }
                });

        final _ReportingService2005Soap_GetCacheOptionsResponse responseData = new _ReportingService2005Soap_GetCacheOptionsResponse();

        executeSOAPRequest(
            request,
            "GetCacheOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void updateReportExecutionSnapshot(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_UpdateReportExecutionSnapshot requestData = new _ReportingService2005Soap_UpdateReportExecutionSnapshot(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "UpdateReportExecutionSnapshot",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateReportExecutionSnapshot");
                    }
                });

        final _ReportingService2005Soap_UpdateReportExecutionSnapshotResponse responseData = new _ReportingService2005Soap_UpdateReportExecutionSnapshotResponse();

        executeSOAPRequest(
            request,
            "UpdateReportExecutionSnapshotResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void flushCache(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_FlushCache requestData = new _ReportingService2005Soap_FlushCache(report);

        final SOAPRequest request = createSOAPRequest(
                "FlushCache",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "FlushCache");
                    }
                });

        final _ReportingService2005Soap_FlushCacheResponse responseData = new _ReportingService2005Soap_FlushCacheResponse();

        executeSOAPRequest(
            request,
            "FlushCacheResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Job[] listJobs()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListJobs requestData = new _ReportingService2005Soap_ListJobs();

        final SOAPRequest request = createSOAPRequest(
                "ListJobs",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListJobs");
                    }
                });

        final _ReportingService2005Soap_ListJobsResponse responseData = new _ReportingService2005Soap_ListJobsResponse();

        executeSOAPRequest(
            request,
            "ListJobsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getJobs();
    }

    public boolean cancelJob(final String jobID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CancelJob requestData = new _ReportingService2005Soap_CancelJob(jobID);

        final SOAPRequest request = createSOAPRequest(
                "CancelJob",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CancelJob");
                    }
                });

        final _ReportingService2005Soap_CancelJobResponse responseData = new _ReportingService2005Soap_CancelJobResponse();

        executeSOAPRequest(
            request,
            "CancelJobResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.isCancelJobResult();
    }

    public void createDataSource(
        final String dataSource,
        final String parent,
        final boolean overwrite,
        final _DataSourceDefinition definition,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateDataSource requestData = new _ReportingService2005Soap_CreateDataSource(
                    dataSource,
                    parent,
                    overwrite,
                    definition,
                    properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateDataSource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateDataSource");
                    }
                });

        final _ReportingService2005Soap_CreateDataSourceResponse responseData = new _ReportingService2005Soap_CreateDataSourceResponse();

        executeSOAPRequest(
            request,
            "CreateDataSourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _DataSourceDefinition getDataSourceContents(final String dataSource)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetDataSourceContents requestData = new _ReportingService2005Soap_GetDataSourceContents(
                    dataSource);

        final SOAPRequest request = createSOAPRequest(
                "GetDataSourceContents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetDataSourceContents");
                    }
                });

        final _ReportingService2005Soap_GetDataSourceContentsResponse responseData = new _ReportingService2005Soap_GetDataSourceContentsResponse();

        executeSOAPRequest(
            request,
            "GetDataSourceContentsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDefinition();
    }

    public void setDataSourceContents(
        final String dataSource,
        final _DataSourceDefinition definition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetDataSourceContents requestData = new _ReportingService2005Soap_SetDataSourceContents(
                    dataSource,
                    definition);

        final SOAPRequest request = createSOAPRequest(
                "SetDataSourceContents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetDataSourceContents");
                    }
                });

        final _ReportingService2005Soap_SetDataSourceContentsResponse responseData = new _ReportingService2005Soap_SetDataSourceContentsResponse();

        executeSOAPRequest(
            request,
            "SetDataSourceContentsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void enableDataSource(final String dataSource)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_EnableDataSource requestData = new _ReportingService2005Soap_EnableDataSource(
                    dataSource);

        final SOAPRequest request = createSOAPRequest(
                "EnableDataSource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "EnableDataSource");
                    }
                });

        final _ReportingService2005Soap_EnableDataSourceResponse responseData = new _ReportingService2005Soap_EnableDataSourceResponse();

        executeSOAPRequest(
            request,
            "EnableDataSourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void disableDataSource(final String dataSource)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DisableDataSource requestData = new _ReportingService2005Soap_DisableDataSource(
                    dataSource);

        final SOAPRequest request = createSOAPRequest(
                "DisableDataSource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DisableDataSource");
                    }
                });

        final _ReportingService2005Soap_DisableDataSourceResponse responseData = new _ReportingService2005Soap_DisableDataSourceResponse();

        executeSOAPRequest(
            request,
            "DisableDataSourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void setItemDataSources(
        final String item,
        final _DataSource[] dataSources)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetItemDataSources requestData = new _ReportingService2005Soap_SetItemDataSources(
                    item,
                    dataSources);

        final SOAPRequest request = createSOAPRequest(
                "SetItemDataSources",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetItemDataSources");
                    }
                });

        final _ReportingService2005Soap_SetItemDataSourcesResponse responseData = new _ReportingService2005Soap_SetItemDataSourcesResponse();

        executeSOAPRequest(
            request,
            "SetItemDataSourcesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _DataSource[] getItemDataSources(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetItemDataSources requestData = new _ReportingService2005Soap_GetItemDataSources(
                    item);

        final SOAPRequest request = createSOAPRequest(
                "GetItemDataSources",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetItemDataSources");
                    }
                });

        final _ReportingService2005Soap_GetItemDataSourcesResponse responseData = new _ReportingService2005Soap_GetItemDataSourcesResponse();

        executeSOAPRequest(
            request,
            "GetItemDataSourcesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDataSources();
    }

    public _DataSourcePrompt[] getItemDataSourcePrompts(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetItemDataSourcePrompts requestData = new _ReportingService2005Soap_GetItemDataSourcePrompts(
                    item);

        final SOAPRequest request = createSOAPRequest(
                "GetItemDataSourcePrompts",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetItemDataSourcePrompts");
                    }
                });

        final _ReportingService2005Soap_GetItemDataSourcePromptsResponse responseData = new _ReportingService2005Soap_GetItemDataSourcePromptsResponse();

        executeSOAPRequest(
            request,
            "GetItemDataSourcePromptsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDataSourcePrompts();
    }

    public _ReportingService2005Soap_CreateReportHistorySnapshotResponse createReportHistorySnapshot(
        final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateReportHistorySnapshot requestData = new _ReportingService2005Soap_CreateReportHistorySnapshot(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "CreateReportHistorySnapshot",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateReportHistorySnapshot");
                    }
                });

        final _ReportingService2005Soap_CreateReportHistorySnapshotResponse responseData = new _ReportingService2005Soap_CreateReportHistorySnapshotResponse();

        executeSOAPRequest(
            request,
            "CreateReportHistorySnapshotResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setReportHistoryOptions(
        final String report,
        final boolean enableManualSnapshotCreation,
        final boolean keepExecutionSnapshots,
        final _ScheduleReference scheduleReference,
        final _NoSchedule noSchedule,
        final _ScheduleDefinition scheduleDefinition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetReportHistoryOptions requestData = new _ReportingService2005Soap_SetReportHistoryOptions(
                    report,
                    enableManualSnapshotCreation,
                    keepExecutionSnapshots,
                    scheduleReference,
                    noSchedule,
                    scheduleDefinition);

        final SOAPRequest request = createSOAPRequest(
                "SetReportHistoryOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetReportHistoryOptions");
                    }
                });

        final _ReportingService2005Soap_SetReportHistoryOptionsResponse responseData = new _ReportingService2005Soap_SetReportHistoryOptionsResponse();

        executeSOAPRequest(
            request,
            "SetReportHistoryOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetReportHistoryOptionsResponse getReportHistoryOptions(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetReportHistoryOptions requestData = new _ReportingService2005Soap_GetReportHistoryOptions(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "GetReportHistoryOptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReportHistoryOptions");
                    }
                });

        final _ReportingService2005Soap_GetReportHistoryOptionsResponse responseData = new _ReportingService2005Soap_GetReportHistoryOptionsResponse();

        executeSOAPRequest(
            request,
            "GetReportHistoryOptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setReportHistoryLimit(
        final String report,
        final boolean useSystem,
        final int historyLimit)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetReportHistoryLimit requestData = new _ReportingService2005Soap_SetReportHistoryLimit(
                    report,
                    useSystem,
                    historyLimit);

        final SOAPRequest request = createSOAPRequest(
                "SetReportHistoryLimit",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetReportHistoryLimit");
                    }
                });

        final _ReportingService2005Soap_SetReportHistoryLimitResponse responseData = new _ReportingService2005Soap_SetReportHistoryLimitResponse();

        executeSOAPRequest(
            request,
            "SetReportHistoryLimitResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetReportHistoryLimitResponse getReportHistoryLimit(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetReportHistoryLimit requestData = new _ReportingService2005Soap_GetReportHistoryLimit(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "GetReportHistoryLimit",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetReportHistoryLimit");
                    }
                });

        final _ReportingService2005Soap_GetReportHistoryLimitResponse responseData = new _ReportingService2005Soap_GetReportHistoryLimitResponse();

        executeSOAPRequest(
            request,
            "GetReportHistoryLimitResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ReportHistorySnapshot[] listReportHistory(final String report)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListReportHistory requestData = new _ReportingService2005Soap_ListReportHistory(
                    report);

        final SOAPRequest request = createSOAPRequest(
                "ListReportHistory",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListReportHistory");
                    }
                });

        final _ReportingService2005Soap_ListReportHistoryResponse responseData = new _ReportingService2005Soap_ListReportHistoryResponse();

        executeSOAPRequest(
            request,
            "ListReportHistoryResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReportHistory();
    }

    public void deleteReportHistorySnapshot(
        final String report,
        final String historyID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DeleteReportHistorySnapshot requestData = new _ReportingService2005Soap_DeleteReportHistorySnapshot(
                    report,
                    historyID);

        final SOAPRequest request = createSOAPRequest(
                "DeleteReportHistorySnapshot",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteReportHistorySnapshot");
                    }
                });

        final _ReportingService2005Soap_DeleteReportHistorySnapshotResponse responseData = new _ReportingService2005Soap_DeleteReportHistorySnapshotResponse();

        executeSOAPRequest(
            request,
            "DeleteReportHistorySnapshotResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _CatalogItem[] findItems(
        final String folder,
        final _BooleanOperatorEnum booleanOperator,
        final _SearchCondition[] conditions)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_FindItems requestData = new _ReportingService2005Soap_FindItems(folder,
                booleanOperator, conditions);

        final SOAPRequest request = createSOAPRequest(
                "FindItems",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "FindItems");
                    }
                });

        final _ReportingService2005Soap_FindItemsResponse responseData = new _ReportingService2005Soap_FindItemsResponse();

        executeSOAPRequest(
            request,
            "FindItemsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getItems();
    }

    public String createSchedule(
        final String name,
        final _ScheduleDefinition scheduleDefinition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateSchedule requestData = new _ReportingService2005Soap_CreateSchedule(name,
                scheduleDefinition);

        final SOAPRequest request = createSOAPRequest(
                "CreateSchedule",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateSchedule");
                    }
                });

        final _ReportingService2005Soap_CreateScheduleResponse responseData = new _ReportingService2005Soap_CreateScheduleResponse();

        executeSOAPRequest(
            request,
            "CreateScheduleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getScheduleID();
    }

    public void deleteSchedule(final String scheduleID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DeleteSchedule requestData = new _ReportingService2005Soap_DeleteSchedule(
                    scheduleID);

        final SOAPRequest request = createSOAPRequest(
                "DeleteSchedule",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteSchedule");
                    }
                });

        final _ReportingService2005Soap_DeleteScheduleResponse responseData = new _ReportingService2005Soap_DeleteScheduleResponse();

        executeSOAPRequest(
            request,
            "DeleteScheduleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void setScheduleProperties(
        final String name,
        final String scheduleID,
        final _ScheduleDefinition scheduleDefinition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetScheduleProperties requestData = new _ReportingService2005Soap_SetScheduleProperties(
                    name,
                    scheduleID,
                    scheduleDefinition);

        final SOAPRequest request = createSOAPRequest(
                "SetScheduleProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetScheduleProperties");
                    }
                });

        final _ReportingService2005Soap_SetSchedulePropertiesResponse responseData = new _ReportingService2005Soap_SetSchedulePropertiesResponse();

        executeSOAPRequest(
            request,
            "SetSchedulePropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Schedule getScheduleProperties(final String scheduleID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetScheduleProperties requestData = new _ReportingService2005Soap_GetScheduleProperties(
                    scheduleID);

        final SOAPRequest request = createSOAPRequest(
                "GetScheduleProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetScheduleProperties");
                    }
                });

        final _ReportingService2005Soap_GetSchedulePropertiesResponse responseData = new _ReportingService2005Soap_GetSchedulePropertiesResponse();

        executeSOAPRequest(
            request,
            "GetSchedulePropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSchedule();
    }

    public _CatalogItem[] listScheduledReports(final String scheduleID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListScheduledReports requestData = new _ReportingService2005Soap_ListScheduledReports(
                    scheduleID);

        final SOAPRequest request = createSOAPRequest(
                "ListScheduledReports",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListScheduledReports");
                    }
                });

        final _ReportingService2005Soap_ListScheduledReportsResponse responseData = new _ReportingService2005Soap_ListScheduledReportsResponse();

        executeSOAPRequest(
            request,
            "ListScheduledReportsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReports();
    }

    public _Schedule[] listSchedules()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListSchedules requestData = new _ReportingService2005Soap_ListSchedules();

        final SOAPRequest request = createSOAPRequest(
                "ListSchedules",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListSchedules");
                    }
                });

        final _ReportingService2005Soap_ListSchedulesResponse responseData = new _ReportingService2005Soap_ListSchedulesResponse();

        executeSOAPRequest(
            request,
            "ListSchedulesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSchedules();
    }

    public void pauseSchedule(final String scheduleID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_PauseSchedule requestData = new _ReportingService2005Soap_PauseSchedule(scheduleID);

        final SOAPRequest request = createSOAPRequest(
                "PauseSchedule",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PauseSchedule");
                    }
                });

        final _ReportingService2005Soap_PauseScheduleResponse responseData = new _ReportingService2005Soap_PauseScheduleResponse();

        executeSOAPRequest(
            request,
            "PauseScheduleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void resumeSchedule(final String scheduleID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ResumeSchedule requestData = new _ReportingService2005Soap_ResumeSchedule(
                    scheduleID);

        final SOAPRequest request = createSOAPRequest(
                "ResumeSchedule",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ResumeSchedule");
                    }
                });

        final _ReportingService2005Soap_ResumeScheduleResponse responseData = new _ReportingService2005Soap_ResumeScheduleResponse();

        executeSOAPRequest(
            request,
            "ResumeScheduleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String createSubscription(
        final String report,
        final _ExtensionSettings extensionSettings,
        final String description,
        final String eventType,
        final String matchData,
        final _ParameterValue[] parameters)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateSubscription requestData = new _ReportingService2005Soap_CreateSubscription(
                    report,
                    extensionSettings,
                    description,
                    eventType,
                    matchData,
                    parameters);

        final SOAPRequest request = createSOAPRequest(
                "CreateSubscription",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateSubscription");
                    }
                });

        final _ReportingService2005Soap_CreateSubscriptionResponse responseData = new _ReportingService2005Soap_CreateSubscriptionResponse();

        executeSOAPRequest(
            request,
            "CreateSubscriptionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSubscriptionID();
    }

    public String createDataDrivenSubscription(
        final String report,
        final _ExtensionSettings extensionSettings,
        final _DataRetrievalPlan dataRetrievalPlan,
        final String description,
        final String eventType,
        final String matchData,
        final _ParameterValueOrFieldReference[] parameters)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateDataDrivenSubscription requestData = new _ReportingService2005Soap_CreateDataDrivenSubscription(
                    report,
                    extensionSettings,
                    dataRetrievalPlan,
                    description,
                    eventType,
                    matchData,
                    parameters);

        final SOAPRequest request = createSOAPRequest(
                "CreateDataDrivenSubscription",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateDataDrivenSubscription");
                    }
                });

        final _ReportingService2005Soap_CreateDataDrivenSubscriptionResponse responseData = new _ReportingService2005Soap_CreateDataDrivenSubscriptionResponse();

        executeSOAPRequest(
            request,
            "CreateDataDrivenSubscriptionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSubscriptionID();
    }

    public void setSubscriptionProperties(
        final String subscriptionID,
        final _ExtensionSettings extensionSettings,
        final String description,
        final String eventType,
        final String matchData,
        final _ParameterValue[] parameters)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetSubscriptionProperties requestData = new _ReportingService2005Soap_SetSubscriptionProperties(
                    subscriptionID,
                    extensionSettings,
                    description,
                    eventType,
                    matchData,
                    parameters);

        final SOAPRequest request = createSOAPRequest(
                "SetSubscriptionProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetSubscriptionProperties");
                    }
                });

        final _ReportingService2005Soap_SetSubscriptionPropertiesResponse responseData = new _ReportingService2005Soap_SetSubscriptionPropertiesResponse();

        executeSOAPRequest(
            request,
            "SetSubscriptionPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void setDataDrivenSubscriptionProperties(
        final String dataDrivenSubscriptionID,
        final _ExtensionSettings extensionSettings,
        final _DataRetrievalPlan dataRetrievalPlan,
        final String description,
        final String eventType,
        final String matchData,
        final _ParameterValueOrFieldReference[] parameters)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetDataDrivenSubscriptionProperties requestData = new _ReportingService2005Soap_SetDataDrivenSubscriptionProperties(
                    dataDrivenSubscriptionID,
                    extensionSettings,
                    dataRetrievalPlan,
                    description,
                    eventType,
                    matchData,
                    parameters);

        final SOAPRequest request = createSOAPRequest(
                "SetDataDrivenSubscriptionProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetDataDrivenSubscriptionProperties");
                    }
                });

        final _ReportingService2005Soap_SetDataDrivenSubscriptionPropertiesResponse responseData = new _ReportingService2005Soap_SetDataDrivenSubscriptionPropertiesResponse();

        executeSOAPRequest(
            request,
            "SetDataDrivenSubscriptionPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetSubscriptionPropertiesResponse getSubscriptionProperties(
        final String subscriptionID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetSubscriptionProperties requestData = new _ReportingService2005Soap_GetSubscriptionProperties(
                    subscriptionID);

        final SOAPRequest request = createSOAPRequest(
                "GetSubscriptionProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetSubscriptionProperties");
                    }
                });

        final _ReportingService2005Soap_GetSubscriptionPropertiesResponse responseData = new _ReportingService2005Soap_GetSubscriptionPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetSubscriptionPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ReportingService2005Soap_GetDataDrivenSubscriptionPropertiesResponse getDataDrivenSubscriptionProperties(
        final String dataDrivenSubscriptionID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetDataDrivenSubscriptionProperties requestData = new _ReportingService2005Soap_GetDataDrivenSubscriptionProperties(
                    dataDrivenSubscriptionID);

        final SOAPRequest request = createSOAPRequest(
                "GetDataDrivenSubscriptionProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetDataDrivenSubscriptionProperties");
                    }
                });

        final _ReportingService2005Soap_GetDataDrivenSubscriptionPropertiesResponse responseData = new _ReportingService2005Soap_GetDataDrivenSubscriptionPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetDataDrivenSubscriptionPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void deleteSubscription(final String subscriptionID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DeleteSubscription requestData = new _ReportingService2005Soap_DeleteSubscription(
                    subscriptionID);

        final SOAPRequest request = createSOAPRequest(
                "DeleteSubscription",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteSubscription");
                    }
                });

        final _ReportingService2005Soap_DeleteSubscriptionResponse responseData = new _ReportingService2005Soap_DeleteSubscriptionResponse();

        executeSOAPRequest(
            request,
            "DeleteSubscriptionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_PrepareQueryResponse prepareQuery(
        final _DataSource dataSource,
        final _DataSetDefinition dataSet)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_PrepareQuery requestData = new _ReportingService2005Soap_PrepareQuery(dataSource,
                dataSet);

        final SOAPRequest request = createSOAPRequest(
                "PrepareQuery",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "PrepareQuery");
                    }
                });

        final _ReportingService2005Soap_PrepareQueryResponse responseData = new _ReportingService2005Soap_PrepareQueryResponse();

        executeSOAPRequest(
            request,
            "PrepareQueryResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public _ExtensionParameter[] getExtensionSettings(final String extension)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetExtensionSettings requestData = new _ReportingService2005Soap_GetExtensionSettings(
                    extension);

        final SOAPRequest request = createSOAPRequest(
                "GetExtensionSettings",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetExtensionSettings");
                    }
                });

        final _ReportingService2005Soap_GetExtensionSettingsResponse responseData = new _ReportingService2005Soap_GetExtensionSettingsResponse();

        executeSOAPRequest(
            request,
            "GetExtensionSettingsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getExtensionParameters();
    }

    public _ExtensionParameter[] validateExtensionSettings(
        final String extension,
        final _ParameterValueOrFieldReference[] parameterValues)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ValidateExtensionSettings requestData = new _ReportingService2005Soap_ValidateExtensionSettings(
                    extension,
                    parameterValues);

        final SOAPRequest request = createSOAPRequest(
                "ValidateExtensionSettings",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ValidateExtensionSettings");
                    }
                });

        final _ReportingService2005Soap_ValidateExtensionSettingsResponse responseData = new _ReportingService2005Soap_ValidateExtensionSettingsResponse();

        executeSOAPRequest(
            request,
            "ValidateExtensionSettingsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getParameterErrors();
    }

    public _Subscription[] listSubscriptions(
        final String report,
        final String owner)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListSubscriptions requestData = new _ReportingService2005Soap_ListSubscriptions(
                    report,
                    owner);

        final SOAPRequest request = createSOAPRequest(
                "ListSubscriptions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListSubscriptions");
                    }
                });

        final _ReportingService2005Soap_ListSubscriptionsResponse responseData = new _ReportingService2005Soap_ListSubscriptionsResponse();

        executeSOAPRequest(
            request,
            "ListSubscriptionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSubscriptionItems();
    }

    public _Subscription[] listSubscriptionsUsingDataSource(final String dataSource)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListSubscriptionsUsingDataSource requestData = new _ReportingService2005Soap_ListSubscriptionsUsingDataSource(
                    dataSource);

        final SOAPRequest request = createSOAPRequest(
                "ListSubscriptionsUsingDataSource",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListSubscriptionsUsingDataSource");
                    }
                });

        final _ReportingService2005Soap_ListSubscriptionsUsingDataSourceResponse responseData = new _ReportingService2005Soap_ListSubscriptionsUsingDataSourceResponse();

        executeSOAPRequest(
            request,
            "ListSubscriptionsUsingDataSourceResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getSubscriptionItems();
    }

    public _Extension[] listExtensions(final _ExtensionTypeEnum extensionType)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListExtensions requestData = new _ReportingService2005Soap_ListExtensions(
                    extensionType);

        final SOAPRequest request = createSOAPRequest(
                "ListExtensions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListExtensions");
                    }
                });

        final _ReportingService2005Soap_ListExtensionsResponse responseData = new _ReportingService2005Soap_ListExtensionsResponse();

        executeSOAPRequest(
            request,
            "ListExtensionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getExtensions();
    }

    public _Event[] listEvents()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListEvents requestData = new _ReportingService2005Soap_ListEvents();

        final SOAPRequest request = createSOAPRequest(
                "ListEvents",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListEvents");
                    }
                });

        final _ReportingService2005Soap_ListEventsResponse responseData = new _ReportingService2005Soap_ListEventsResponse();

        executeSOAPRequest(
            request,
            "ListEventsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getEvents();
    }

    public void fireEvent(
        final String eventType,
        final String eventData)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_FireEvent requestData = new _ReportingService2005Soap_FireEvent(eventType,
                eventData);

        final SOAPRequest request = createSOAPRequest(
                "FireEvent",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "FireEvent");
                    }
                });

        final _ReportingService2005Soap_FireEventResponse responseData = new _ReportingService2005Soap_FireEventResponse();

        executeSOAPRequest(
            request,
            "FireEventResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Task[] listTasks(final _SecurityScopeEnum securityScope)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListTasks requestData = new _ReportingService2005Soap_ListTasks(securityScope);

        final SOAPRequest request = createSOAPRequest(
                "ListTasks",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListTasks");
                    }
                });

        final _ReportingService2005Soap_ListTasksResponse responseData = new _ReportingService2005Soap_ListTasksResponse();

        executeSOAPRequest(
            request,
            "ListTasksResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getTasks();
    }

    public _Role[] listRoles(final _SecurityScopeEnum securityScope)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListRoles requestData = new _ReportingService2005Soap_ListRoles(securityScope);

        final SOAPRequest request = createSOAPRequest(
                "ListRoles",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListRoles");
                    }
                });

        final _ReportingService2005Soap_ListRolesResponse responseData = new _ReportingService2005Soap_ListRolesResponse();

        executeSOAPRequest(
            request,
            "ListRolesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getRoles();
    }

    public void createRole(
        final String name,
        final String description,
        final _Task[] tasks)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateRole requestData = new _ReportingService2005Soap_CreateRole(name,
                description, tasks);

        final SOAPRequest request = createSOAPRequest(
                "CreateRole",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateRole");
                    }
                });

        final _ReportingService2005Soap_CreateRoleResponse responseData = new _ReportingService2005Soap_CreateRoleResponse();

        executeSOAPRequest(
            request,
            "CreateRoleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteRole(final String name)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_DeleteRole requestData = new _ReportingService2005Soap_DeleteRole(name);

        final SOAPRequest request = createSOAPRequest(
                "DeleteRole",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteRole");
                    }
                });

        final _ReportingService2005Soap_DeleteRoleResponse responseData = new _ReportingService2005Soap_DeleteRoleResponse();

        executeSOAPRequest(
            request,
            "DeleteRoleResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetRolePropertiesResponse getRoleProperties(final String name)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetRoleProperties requestData = new _ReportingService2005Soap_GetRoleProperties(
                    name);

        final SOAPRequest request = createSOAPRequest(
                "GetRoleProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetRoleProperties");
                    }
                });

        final _ReportingService2005Soap_GetRolePropertiesResponse responseData = new _ReportingService2005Soap_GetRolePropertiesResponse();

        executeSOAPRequest(
            request,
            "GetRolePropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setRoleProperties(
        final String name,
        final String description,
        final _Task[] tasks)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetRoleProperties requestData = new _ReportingService2005Soap_SetRoleProperties(
                    name,
                    description,
                    tasks);

        final SOAPRequest request = createSOAPRequest(
                "SetRoleProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetRoleProperties");
                    }
                });

        final _ReportingService2005Soap_SetRolePropertiesResponse responseData = new _ReportingService2005Soap_SetRolePropertiesResponse();

        executeSOAPRequest(
            request,
            "SetRolePropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Policy[] getSystemPolicies()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetSystemPolicies requestData = new _ReportingService2005Soap_GetSystemPolicies();

        final SOAPRequest request = createSOAPRequest(
                "GetSystemPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetSystemPolicies");
                    }
                });

        final _ReportingService2005Soap_GetSystemPoliciesResponse responseData = new _ReportingService2005Soap_GetSystemPoliciesResponse();

        executeSOAPRequest(
            request,
            "GetSystemPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getPolicies();
    }

    public void setSystemPolicies(final _Policy[] policies)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetSystemPolicies requestData = new _ReportingService2005Soap_SetSystemPolicies(
                    policies);

        final SOAPRequest request = createSOAPRequest(
                "SetSystemPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetSystemPolicies");
                    }
                });

        final _ReportingService2005Soap_SetSystemPoliciesResponse responseData = new _ReportingService2005Soap_SetSystemPoliciesResponse();

        executeSOAPRequest(
            request,
            "SetSystemPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ReportingService2005Soap_GetPoliciesResponse getPolicies(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetPolicies requestData = new _ReportingService2005Soap_GetPolicies(item);

        final SOAPRequest request = createSOAPRequest(
                "GetPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetPolicies");
                    }
                });

        final _ReportingService2005Soap_GetPoliciesResponse responseData = new _ReportingService2005Soap_GetPoliciesResponse();

        executeSOAPRequest(
            request,
            "GetPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setPolicies(
        final String item,
        final _Policy[] policies)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetPolicies requestData = new _ReportingService2005Soap_SetPolicies(item,
                policies);

        final SOAPRequest request = createSOAPRequest(
                "SetPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetPolicies");
                    }
                });

        final _ReportingService2005Soap_SetPoliciesResponse responseData = new _ReportingService2005Soap_SetPoliciesResponse();

        executeSOAPRequest(
            request,
            "SetPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void inheritParentSecurity(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_InheritParentSecurity requestData = new _ReportingService2005Soap_InheritParentSecurity(
                    item);

        final SOAPRequest request = createSOAPRequest(
                "InheritParentSecurity",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "InheritParentSecurity");
                    }
                });

        final _ReportingService2005Soap_InheritParentSecurityResponse responseData = new _ReportingService2005Soap_InheritParentSecurityResponse();

        executeSOAPRequest(
            request,
            "InheritParentSecurityResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String[] getSystemPermissions()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetSystemPermissions requestData = new _ReportingService2005Soap_GetSystemPermissions();

        final SOAPRequest request = createSOAPRequest(
                "GetSystemPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetSystemPermissions");
                    }
                });

        final _ReportingService2005Soap_GetSystemPermissionsResponse responseData = new _ReportingService2005Soap_GetSystemPermissionsResponse();

        executeSOAPRequest(
            request,
            "GetSystemPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getPermissions();
    }

    public String[] getPermissions(final String item)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetPermissions requestData = new _ReportingService2005Soap_GetPermissions(item);

        final SOAPRequest request = createSOAPRequest(
                "GetPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetPermissions");
                    }
                });

        final _ReportingService2005Soap_GetPermissionsResponse responseData = new _ReportingService2005Soap_GetPermissionsResponse();

        executeSOAPRequest(
            request,
            "GetPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getPermissions();
    }

    public void logonUser(
        final String userName,
        final String password,
        final String authority)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_LogonUser requestData = new _ReportingService2005Soap_LogonUser(userName,
                password, authority);

        final SOAPRequest request = createSOAPRequest(
                "LogonUser",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "LogonUser");
                    }
                });

        final _ReportingService2005Soap_LogonUserResponse responseData = new _ReportingService2005Soap_LogonUserResponse();

        executeSOAPRequest(
            request,
            "LogonUserResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void logoff()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_Logoff requestData = new _ReportingService2005Soap_Logoff();

        final SOAPRequest request = createSOAPRequest(
                "Logoff",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "Logoff");
                    }
                });

        final _ReportingService2005Soap_LogoffResponse responseData = new _ReportingService2005Soap_LogoffResponse();

        executeSOAPRequest(
            request,
            "LogoffResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Warning[] createModel(
        final String model,
        final String parent,
        final byte[] definition,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_CreateModel requestData = new _ReportingService2005Soap_CreateModel(model,
                parent, definition, properties);

        final SOAPRequest request = createSOAPRequest(
                "CreateModel",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateModel");
                    }
                });

        final _ReportingService2005Soap_CreateModelResponse responseData = new _ReportingService2005Soap_CreateModelResponse();

        executeSOAPRequest(
            request,
            "CreateModelResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }

    public byte[] getModelDefinition(final String model)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetModelDefinition requestData = new _ReportingService2005Soap_GetModelDefinition(
                    model);

        final SOAPRequest request = createSOAPRequest(
                "GetModelDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetModelDefinition");
                    }
                });

        final _ReportingService2005Soap_GetModelDefinitionResponse responseData = new _ReportingService2005Soap_GetModelDefinitionResponse();

        executeSOAPRequest(
            request,
            "GetModelDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDefinition();
    }

    public _Warning[] setModelDefinition(
        final String model,
        final byte[] definition)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetModelDefinition requestData = new _ReportingService2005Soap_SetModelDefinition(
                    model,
                    definition);

        final SOAPRequest request = createSOAPRequest(
                "SetModelDefinition",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetModelDefinition");
                    }
                });

        final _ReportingService2005Soap_SetModelDefinitionResponse responseData = new _ReportingService2005Soap_SetModelDefinitionResponse();

        executeSOAPRequest(
            request,
            "SetModelDefinitionResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }

    public _ModelCatalogItem[] listModelPerspectives(final String model)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListModelPerspectives requestData = new _ReportingService2005Soap_ListModelPerspectives(
                    model);

        final SOAPRequest request = createSOAPRequest(
                "ListModelPerspectives",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListModelPerspectives");
                    }
                });

        final _ReportingService2005Soap_ListModelPerspectivesResponse responseData = new _ReportingService2005Soap_ListModelPerspectivesResponse();

        executeSOAPRequest(
            request,
            "ListModelPerspectivesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getModelCatalogItems();
    }

    public byte[] getUserModel(
        final String model,
        final String perspective)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetUserModel requestData = new _ReportingService2005Soap_GetUserModel(model,
                perspective);

        final SOAPRequest request = createSOAPRequest(
                "GetUserModel",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetUserModel");
                    }
                });

        final _ReportingService2005Soap_GetUserModelResponse responseData = new _ReportingService2005Soap_GetUserModelResponse();

        executeSOAPRequest(
            request,
            "GetUserModelResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getDefinition();
    }

    public _ModelItem[] listModelItemChildren(
        final String model,
        final String modelItemID,
        final boolean recursive)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListModelItemChildren requestData = new _ReportingService2005Soap_ListModelItemChildren(
                    model,
                    modelItemID,
                    recursive);

        final SOAPRequest request = createSOAPRequest(
                "ListModelItemChildren",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListModelItemChildren");
                    }
                });

        final _ReportingService2005Soap_ListModelItemChildrenResponse responseData = new _ReportingService2005Soap_ListModelItemChildrenResponse();

        executeSOAPRequest(
            request,
            "ListModelItemChildrenResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getModelItems();
    }

    public String[] getModelItemPermissions(
        final String model,
        final String modelItemID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetModelItemPermissions requestData = new _ReportingService2005Soap_GetModelItemPermissions(
                    model,
                    modelItemID);

        final SOAPRequest request = createSOAPRequest(
                "GetModelItemPermissions",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetModelItemPermissions");
                    }
                });

        final _ReportingService2005Soap_GetModelItemPermissionsResponse responseData = new _ReportingService2005Soap_GetModelItemPermissionsResponse();

        executeSOAPRequest(
            request,
            "GetModelItemPermissionsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getPermissions();
    }

    public _ReportingService2005Soap_GetModelItemPoliciesResponse getModelItemPolicies(
        final String model,
        final String modelItemID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GetModelItemPolicies requestData = new _ReportingService2005Soap_GetModelItemPolicies(
                    model,
                    modelItemID);

        final SOAPRequest request = createSOAPRequest(
                "GetModelItemPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetModelItemPolicies");
                    }
                });

        final _ReportingService2005Soap_GetModelItemPoliciesResponse responseData = new _ReportingService2005Soap_GetModelItemPoliciesResponse();

        executeSOAPRequest(
            request,
            "GetModelItemPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void setModelItemPolicies(
        final String model,
        final String modelItemID,
        final _Policy[] policies)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetModelItemPolicies requestData = new _ReportingService2005Soap_SetModelItemPolicies(
                    model,
                    modelItemID,
                    policies);

        final SOAPRequest request = createSOAPRequest(
                "SetModelItemPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetModelItemPolicies");
                    }
                });

        final _ReportingService2005Soap_SetModelItemPoliciesResponse responseData = new _ReportingService2005Soap_SetModelItemPoliciesResponse();

        executeSOAPRequest(
            request,
            "SetModelItemPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void inheritModelItemParentSecurity(
        final String model,
        final String modelItemID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_InheritModelItemParentSecurity requestData = new _ReportingService2005Soap_InheritModelItemParentSecurity(
                    model,
                    modelItemID);

        final SOAPRequest request = createSOAPRequest(
                "InheritModelItemParentSecurity",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "InheritModelItemParentSecurity");
                    }
                });

        final _ReportingService2005Soap_InheritModelItemParentSecurityResponse responseData = new _ReportingService2005Soap_InheritModelItemParentSecurityResponse();

        executeSOAPRequest(
            request,
            "InheritModelItemParentSecurityResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void removeAllModelItemPolicies(final String model)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_RemoveAllModelItemPolicies requestData = new _ReportingService2005Soap_RemoveAllModelItemPolicies(
                    model);

        final SOAPRequest request = createSOAPRequest(
                "RemoveAllModelItemPolicies",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RemoveAllModelItemPolicies");
                    }
                });

        final _ReportingService2005Soap_RemoveAllModelItemPoliciesResponse responseData = new _ReportingService2005Soap_RemoveAllModelItemPoliciesResponse();

        executeSOAPRequest(
            request,
            "RemoveAllModelItemPoliciesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void setModelDrillthroughReports(
        final String model,
        final String modelItemID,
        final _ModelDrillthroughReport[] reports)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_SetModelDrillthroughReports requestData = new _ReportingService2005Soap_SetModelDrillthroughReports(
                    model,
                    modelItemID,
                    reports);

        final SOAPRequest request = createSOAPRequest(
                "SetModelDrillthroughReports",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetModelDrillthroughReports");
                    }
                });

        final _ReportingService2005Soap_SetModelDrillthroughReportsResponse responseData = new _ReportingService2005Soap_SetModelDrillthroughReportsResponse();

        executeSOAPRequest(
            request,
            "SetModelDrillthroughReportsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ModelDrillthroughReport[] listModelDrillthroughReports(
        final String model,
        final String modelItemID)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListModelDrillthroughReports requestData = new _ReportingService2005Soap_ListModelDrillthroughReports(
                    model,
                    modelItemID);

        final SOAPRequest request = createSOAPRequest(
                "ListModelDrillthroughReports",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListModelDrillthroughReports");
                    }
                });

        final _ReportingService2005Soap_ListModelDrillthroughReportsResponse responseData = new _ReportingService2005Soap_ListModelDrillthroughReportsResponse();

        executeSOAPRequest(
            request,
            "ListModelDrillthroughReportsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getReports();
    }

    public _Warning[] generateModel(
        final String dataSource,
        final String model,
        final String parent,
        final _Property[] properties)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_GenerateModel requestData = new _ReportingService2005Soap_GenerateModel(dataSource,
                model,
                parent,
                properties);

        final SOAPRequest request = createSOAPRequest(
                "GenerateModel",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GenerateModel");
                    }
                });

        final _ReportingService2005Soap_GenerateModelResponse responseData = new _ReportingService2005Soap_GenerateModelResponse();

        executeSOAPRequest(
            request,
            "GenerateModelResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }

    public _Warning[] regenerateModel(final String model)
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_RegenerateModel requestData = new _ReportingService2005Soap_RegenerateModel(model);

        final SOAPRequest request = createSOAPRequest(
                "RegenerateModel",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RegenerateModel");
                    }
                });

        final _ReportingService2005Soap_RegenerateModelResponse responseData = new _ReportingService2005Soap_RegenerateModelResponse();

        executeSOAPRequest(
            request,
            "RegenerateModelResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getWarnings();
    }
}
