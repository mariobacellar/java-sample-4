// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.services.registration._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.services.registration._03._RegistrationDatabase;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _RegistrationDatabase
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String name;
    protected String databaseName;
    protected String sQLServerName;
    protected String connectionString;
    protected boolean excludeFromBackup;

    public _RegistrationDatabase()
    {
        super();
    }

    public _RegistrationDatabase(
        final String name,
        final String databaseName,
        final String sQLServerName,
        final String connectionString,
        final boolean excludeFromBackup)
    {
        // TODO : Call super() instead of setting all fields directly?
        setName(name);
        setDatabaseName(databaseName);
        setSQLServerName(sQLServerName);
        setConnectionString(connectionString);
        setExcludeFromBackup(excludeFromBackup);
    }

    public String getName()
    {
        return this.name;
    }

    public void setName(String value)
    {
        this.name = value;
    }

    public String getDatabaseName()
    {
        return this.databaseName;
    }

    public void setDatabaseName(String value)
    {
        this.databaseName = value;
    }

    public String getSQLServerName()
    {
        return this.sQLServerName;
    }

    public void setSQLServerName(String value)
    {
        this.sQLServerName = value;
    }

    public String getConnectionString()
    {
        return this.connectionString;
    }

    public void setConnectionString(String value)
    {
        this.connectionString = value;
    }

    public boolean isExcludeFromBackup()
    {
        return this.excludeFromBackup;
    }

    public void setExcludeFromBackup(boolean value)
    {
        this.excludeFromBackup = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Name",
            this.name);
        XMLStreamWriterHelper.writeElement(
            writer,
            "DatabaseName",
            this.databaseName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "SQLServerName",
            this.sQLServerName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ConnectionString",
            this.connectionString);
        XMLStreamWriterHelper.writeElement(
            writer,
            "ExcludeFromBackup",
            this.excludeFromBackup);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Name"))
                {
                    this.name = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("DatabaseName"))
                {
                    this.databaseName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("SQLServerName"))
                {
                    this.sQLServerName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ConnectionString"))
                {
                    this.connectionString = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("ExcludeFromBackup"))
                {
                    this.excludeFromBackup = XMLConvert.toBoolean(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
