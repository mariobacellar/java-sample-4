// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._DrillthroughType;
import ms.sql.reporting.reportingservices._ModelDrillthroughReport;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ModelDrillthroughReport
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String path;
    protected _DrillthroughType type;

    public _ModelDrillthroughReport()
    {
        super();
    }

    public _ModelDrillthroughReport(
        final String path,
        final _DrillthroughType type)
    {
        // TODO : Call super() instead of setting all fields directly?
        setPath(path);
        setType(type);
    }

    public String getPath()
    {
        return this.path;
    }

    public void setPath(String value)
    {
        this.path = value;
    }

    public _DrillthroughType getType()
    {
        return this.type;
    }

    public void setType(_DrillthroughType value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'Type' is a required element, its value cannot be null");
        }

        this.type = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "Path",
            this.path);
        this.type.writeAsElement(
            writer,
            "Type");

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Path"))
                {
                    this.path = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Type"))
                {
                    this.type = _DrillthroughType.fromString(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
