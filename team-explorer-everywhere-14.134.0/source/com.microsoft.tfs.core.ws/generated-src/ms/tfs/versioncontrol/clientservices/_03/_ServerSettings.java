// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._LocalItemExclusionSet;
import ms.tfs.versioncontrol.clientservices._03._ServerSettings;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ServerSettings
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected byte defaultWorkspaceLocation;
    protected _LocalItemExclusionSet defaultLocalItemExclusionSet;
    protected boolean allowAsynchronousCheckoutInServerWorkspaces;
    protected int maxAllowedServerPathLength;
    protected String stableHashString;

    public _ServerSettings()
    {
        super();
    }

    public _ServerSettings(
        final byte defaultWorkspaceLocation,
        final _LocalItemExclusionSet defaultLocalItemExclusionSet,
        final boolean allowAsynchronousCheckoutInServerWorkspaces,
        final int maxAllowedServerPathLength,
        final String stableHashString)
    {
        // TODO : Call super() instead of setting all fields directly?
        setDefaultWorkspaceLocation(defaultWorkspaceLocation);
        setDefaultLocalItemExclusionSet(defaultLocalItemExclusionSet);
        setAllowAsynchronousCheckoutInServerWorkspaces(allowAsynchronousCheckoutInServerWorkspaces);
        setMaxAllowedServerPathLength(maxAllowedServerPathLength);
        setStableHashString(stableHashString);
    }

    public byte getDefaultWorkspaceLocation()
    {
        return this.defaultWorkspaceLocation;
    }

    public void setDefaultWorkspaceLocation(byte value)
    {
        this.defaultWorkspaceLocation = value;
    }

    public _LocalItemExclusionSet getDefaultLocalItemExclusionSet()
    {
        return this.defaultLocalItemExclusionSet;
    }

    public void setDefaultLocalItemExclusionSet(_LocalItemExclusionSet value)
    {
        this.defaultLocalItemExclusionSet = value;
    }

    public boolean isAllowAsynchronousCheckoutInServerWorkspaces()
    {
        return this.allowAsynchronousCheckoutInServerWorkspaces;
    }

    public void setAllowAsynchronousCheckoutInServerWorkspaces(boolean value)
    {
        this.allowAsynchronousCheckoutInServerWorkspaces = value;
    }

    public int getMaxAllowedServerPathLength()
    {
        return this.maxAllowedServerPathLength;
    }

    public void setMaxAllowedServerPathLength(int value)
    {
        this.maxAllowedServerPathLength = value;
    }

    public String getStableHashString()
    {
        return this.stableHashString;
    }

    public void setStableHashString(String value)
    {
        this.stableHashString = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "DefaultWorkspaceLocation",
            this.defaultWorkspaceLocation);

        if (this.defaultLocalItemExclusionSet != null)
        {
            this.defaultLocalItemExclusionSet.writeAsElement(
                writer,
                "DefaultLocalItemExclusionSet");
        }

        XMLStreamWriterHelper.writeElement(
            writer,
            "AllowAsynchronousCheckoutInServerWorkspaces",
            this.allowAsynchronousCheckoutInServerWorkspaces);
        XMLStreamWriterHelper.writeElement(
            writer,
            "MaxAllowedServerPathLength",
            this.maxAllowedServerPathLength);
        XMLStreamWriterHelper.writeElement(
            writer,
            "StableHashString",
            this.stableHashString);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("DefaultWorkspaceLocation"))
                {
                    this.defaultWorkspaceLocation = XMLConvert.toByte(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("DefaultLocalItemExclusionSet"))
                {
                    this.defaultLocalItemExclusionSet = new _LocalItemExclusionSet();
                    this.defaultLocalItemExclusionSet.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("AllowAsynchronousCheckoutInServerWorkspaces"))
                {
                    this.allowAsynchronousCheckoutInServerWorkspaces = XMLConvert.toBoolean(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("MaxAllowedServerPathLength"))
                {
                    this.maxAllowedServerPathLength = XMLConvert.toInt(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("StableHashString"))
                {
                    this.stableHashString = reader.getElementText();
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
