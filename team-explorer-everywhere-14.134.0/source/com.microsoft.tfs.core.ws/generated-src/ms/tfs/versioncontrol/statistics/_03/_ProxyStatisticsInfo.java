// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.statistics._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.statistics._03._ProxyStatisticsInfo;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _ProxyStatisticsInfo
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected long currentCacheSize;
    protected long noOfRequests;
    protected long overallCacheHits;
    protected long noOfFilesInCache;
    protected long overallCacheMisses;
    protected float cacheHitsPercentage;
    protected float cacheMissPercentage;
    protected String serverId;
    protected String serverUrl;
    protected boolean scanComplete;

    // No elements    
    public _ProxyStatisticsInfo()
    {
        super();
    }

    public _ProxyStatisticsInfo(
        final long currentCacheSize,
        final long noOfRequests,
        final long overallCacheHits,
        final long noOfFilesInCache,
        final long overallCacheMisses,
        final float cacheHitsPercentage,
        final float cacheMissPercentage,
        final String serverId,
        final String serverUrl,
        final boolean scanComplete)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCurrentCacheSize(currentCacheSize);
        setNoOfRequests(noOfRequests);
        setOverallCacheHits(overallCacheHits);
        setNoOfFilesInCache(noOfFilesInCache);
        setOverallCacheMisses(overallCacheMisses);
        setCacheHitsPercentage(cacheHitsPercentage);
        setCacheMissPercentage(cacheMissPercentage);
        setServerId(serverId);
        setServerUrl(serverUrl);
        setScanComplete(scanComplete);
    }

    public long getCurrentCacheSize()
    {
        return this.currentCacheSize;
    }

    public void setCurrentCacheSize(final long value)
    {
        this.currentCacheSize = value;
    }

    public long getNoOfRequests()
    {
        return this.noOfRequests;
    }

    public void setNoOfRequests(final long value)
    {
        this.noOfRequests = value;
    }

    public long getOverallCacheHits()
    {
        return this.overallCacheHits;
    }

    public void setOverallCacheHits(final long value)
    {
        this.overallCacheHits = value;
    }

    public long getNoOfFilesInCache()
    {
        return this.noOfFilesInCache;
    }

    public void setNoOfFilesInCache(final long value)
    {
        this.noOfFilesInCache = value;
    }

    public long getOverallCacheMisses()
    {
        return this.overallCacheMisses;
    }

    public void setOverallCacheMisses(final long value)
    {
        this.overallCacheMisses = value;
    }

    public float getCacheHitsPercentage()
    {
        return this.cacheHitsPercentage;
    }

    public void setCacheHitsPercentage(final float value)
    {
        this.cacheHitsPercentage = value;
    }

    public float getCacheMissPercentage()
    {
        return this.cacheMissPercentage;
    }

    public void setCacheMissPercentage(final float value)
    {
        this.cacheMissPercentage = value;
    }

    public String getServerId()
    {
        return this.serverId;
    }

    public void setServerId(final String value)
    {
        this.serverId = value;
    }

    public String getServerUrl()
    {
        return this.serverUrl;
    }

    public void setServerUrl(final String value)
    {
        this.serverUrl = value;
    }

    public boolean isScanComplete()
    {
        return this.scanComplete;
    }

    public void setScanComplete(final boolean value)
    {
        this.scanComplete = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "CurrentCacheSize",
            this.currentCacheSize);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "NoOfRequests",
            this.noOfRequests);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "OverallCacheHits",
            this.overallCacheHits);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "NoOfFilesInCache",
            this.noOfFilesInCache);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "OverallCacheMisses",
            this.overallCacheMisses);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "CacheHitsPercentage",
            this.cacheHitsPercentage);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "CacheMissPercentage",
            this.cacheMissPercentage);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ServerId",
            this.serverId);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ServerUrl",
            this.serverUrl);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ScanComplete",
            this.scanComplete);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("CurrentCacheSize"))
            {
                this.currentCacheSize = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("NoOfRequests"))
            {
                this.noOfRequests = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("OverallCacheHits"))
            {
                this.overallCacheHits = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("NoOfFilesInCache"))
            {
                this.noOfFilesInCache = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("OverallCacheMisses"))
            {
                this.overallCacheMisses = XMLConvert.toLong(attributeValue);
            }
            else if (localName.equalsIgnoreCase("CacheHitsPercentage"))
            {
                this.cacheHitsPercentage = XMLConvert.toFloat(attributeValue);
            }
            else if (localName.equalsIgnoreCase("CacheMissPercentage"))
            {
                this.cacheMissPercentage = XMLConvert.toFloat(attributeValue);
            }
            else if (localName.equalsIgnoreCase("ServerId"))
            {
                this.serverId = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ServerUrl"))
            {
                this.serverUrl = attributeValue;
            }
            else if (localName.equalsIgnoreCase("ScanComplete"))
            {
                this.scanComplete = XMLConvert.toBoolean(attributeValue);
            }

            // Ignore unknown attributes.
        }

        // This object uses no elements, so read until our element end
        XMLStreamReaderHelper.readUntilElementEnd(reader);
    }
}
