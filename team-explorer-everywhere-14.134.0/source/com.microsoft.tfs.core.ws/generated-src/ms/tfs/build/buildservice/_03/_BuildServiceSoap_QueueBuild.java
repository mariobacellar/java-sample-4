// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildservice._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildservice._03._BuildRequest2008;
import ms.tfs.build.buildservice._03._BuildServiceSoap_QueueBuild;
import ms.tfs.build.buildservice._03._GetOption;
import ms.tfs.build.buildservice._03._QueueOptions;
import ms.tfs.build.buildservice._03._QueuePriority;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _BuildServiceSoap_QueueBuild
    implements ElementSerializable
{
    // No attributes    

    // Elements
    protected _BuildRequest2008 buildRequest;
    protected _QueueOptions options;

    public _BuildServiceSoap_QueueBuild()
    {
        super();
    }

    public _BuildServiceSoap_QueueBuild(
        final _BuildRequest2008 buildRequest,
        final _QueueOptions options)
    {
        // TODO : Call super() instead of setting all fields directly?
        setBuildRequest(buildRequest);
        setOptions(options);
    }

    public _BuildRequest2008 getBuildRequest()
    {
        return this.buildRequest;
    }

    public void setBuildRequest(_BuildRequest2008 value)
    {
        this.buildRequest = value;
    }

    public _QueueOptions getOptions()
    {
        return this.options;
    }

    public void setOptions(_QueueOptions value)
    {
        if (value == null)
        {
            throw new IllegalArgumentException("'options' is a required element, its value cannot be null");
        }

        this.options = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        if (this.buildRequest != null)
        {
            this.buildRequest.writeAsElement(
                writer,
                "buildRequest");
        }

        this.options.writeAsElement(
            writer,
            "options");

        writer.writeEndElement();
    }
}
