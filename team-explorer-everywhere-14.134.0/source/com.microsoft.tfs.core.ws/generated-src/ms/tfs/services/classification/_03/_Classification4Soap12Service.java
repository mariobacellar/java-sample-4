// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /serviceImplementation.vm template.
 */
package ms.tfs.services.classification._03;

import com.microsoft.tfs.core.httpclient.HttpClient;
import com.microsoft.tfs.core.ws.runtime.client.*;
import com.microsoft.tfs.core.ws.runtime.exceptions.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.types.AnyContentType;

import ms.tfs.services.classification._03._Classification4Soap_CreateNode;
import ms.tfs.services.classification._03._Classification4Soap_CreateNodeResponse;
import ms.tfs.services.classification._03._Classification4Soap_CreateNodeWithDates;
import ms.tfs.services.classification._03._Classification4Soap_CreateNodeWithDatesResponse;
import ms.tfs.services.classification._03._Classification4Soap_CreateProject;
import ms.tfs.services.classification._03._Classification4Soap_CreateProjectResponse;
import ms.tfs.services.classification._03._Classification4Soap_DeleteBranches;
import ms.tfs.services.classification._03._Classification4Soap_DeleteBranchesResponse;
import ms.tfs.services.classification._03._Classification4Soap_DeleteProject;
import ms.tfs.services.classification._03._Classification4Soap_DeleteProjectResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetChangedNodes;
import ms.tfs.services.classification._03._Classification4Soap_GetChangedNodesAndProjects;
import ms.tfs.services.classification._03._Classification4Soap_GetChangedNodesAndProjectsResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetChangedNodesResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetDeletedNodesXml;
import ms.tfs.services.classification._03._Classification4Soap_GetDeletedNodesXmlResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetNode;
import ms.tfs.services.classification._03._Classification4Soap_GetNodeFromPath;
import ms.tfs.services.classification._03._Classification4Soap_GetNodeFromPathResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetNodeResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetNodesXml;
import ms.tfs.services.classification._03._Classification4Soap_GetNodesXmlResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetProject;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectFromName;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectFromNameResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectProperties;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectPropertiesResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectProperty;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectPropertyResponse;
import ms.tfs.services.classification._03._Classification4Soap_GetProjectResponse;
import ms.tfs.services.classification._03._Classification4Soap_ListAllProjects;
import ms.tfs.services.classification._03._Classification4Soap_ListAllProjectsResponse;
import ms.tfs.services.classification._03._Classification4Soap_ListProjects;
import ms.tfs.services.classification._03._Classification4Soap_ListProjectsResponse;
import ms.tfs.services.classification._03._Classification4Soap_ListStructures;
import ms.tfs.services.classification._03._Classification4Soap_ListStructuresResponse;
import ms.tfs.services.classification._03._Classification4Soap_MoveBranch;
import ms.tfs.services.classification._03._Classification4Soap_MoveBranchResponse;
import ms.tfs.services.classification._03._Classification4Soap_RenameNode;
import ms.tfs.services.classification._03._Classification4Soap_RenameNodeResponse;
import ms.tfs.services.classification._03._Classification4Soap_ReorderNode;
import ms.tfs.services.classification._03._Classification4Soap_ReorderNodeResponse;
import ms.tfs.services.classification._03._Classification4Soap_SetIterationDates;
import ms.tfs.services.classification._03._Classification4Soap_SetIterationDatesResponse;
import ms.tfs.services.classification._03._Classification4Soap_SetProjectProperty;
import ms.tfs.services.classification._03._Classification4Soap_SetProjectPropertyResponse;
import ms.tfs.services.classification._03._Classification4Soap_UpdateProjectProperties;
import ms.tfs.services.classification._03._Classification4Soap_UpdateProjectPropertiesResponse;
import ms.tfs.services.classification._03._NodeInfo;
import ms.tfs.services.classification._03._ProjectInfo;
import ms.tfs.services.classification._03._ProjectProperty;
import ms.tfs.services.classification._03._ProjectState;
import ms.tfs.services.classification._03._Property;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.lang.String;

import java.net.URI;

import java.util.Calendar;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated service interface.
 *
 * {http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Classification/03}Classification4Soap12Service
 */
public class _Classification4Soap12Service
    extends SOAP12Service
    implements _Classification4Soap
{
    private static final QName PORT_QNAME = new QName(
                "http://schemas.microsoft.com/TeamFoundation/2005/06/Services/Classification/03",
                "Classification4Soap12Service");
    private static final String ENDPOINT_PATH = "/tfs/DefaultCollection/Services/v4.0/CommonStructureService.asmx";

    public _Classification4Soap12Service(
        final URI endpoint,
        final QName port)
    {
        super(endpoint, port);
    }

    public _Classification4Soap12Service(
        final HttpClient client,
        URI endpoint,
        QName port)
    {
        super(client, endpoint, port);
    }

    /**
     * @return the qualified name of the WSDL port this service implementation can be used with
     */
    public static QName getPortQName()
    {
        return _Classification4Soap12Service.PORT_QNAME;
    }

    /**
     * @return the path part to use when constructing a URI to contact a host that provides this service
     */
    public static String getEndpointPath()
    {
        return _Classification4Soap12Service.ENDPOINT_PATH;
    }

    public String createNodeWithDates(
        final String nodeName,
        final String parentNodeUri,
        final Calendar startDate,
        final Calendar finishDate)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_CreateNodeWithDates requestData = new _Classification4Soap_CreateNodeWithDates(nodeName,
                parentNodeUri,
                startDate,
                finishDate);

        final SOAPRequest request = createSOAPRequest(
                "CreateNodeWithDates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateNodeWithDates");
                    }
                });

        final _Classification4Soap_CreateNodeWithDatesResponse responseData = new _Classification4Soap_CreateNodeWithDatesResponse();

        executeSOAPRequest(
            request,
            "CreateNodeWithDatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateNodeWithDatesResult();
    }

    public void setIterationDates(
        final String nodeUri,
        final Calendar startDate,
        final Calendar finishDate)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_SetIterationDates requestData = new _Classification4Soap_SetIterationDates(nodeUri,
                startDate, finishDate);

        final SOAPRequest request = createSOAPRequest(
                "SetIterationDates",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetIterationDates");
                    }
                });

        final _Classification4Soap_SetIterationDatesResponse responseData = new _Classification4Soap_SetIterationDatesResponse();

        executeSOAPRequest(
            request,
            "SetIterationDatesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ProjectProperty getProjectProperty(
        final String projectUri,
        final String name)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetProjectProperty requestData = new _Classification4Soap_GetProjectProperty(projectUri,
                name);

        final SOAPRequest request = createSOAPRequest(
                "GetProjectProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetProjectProperty");
                    }
                });

        final _Classification4Soap_GetProjectPropertyResponse responseData = new _Classification4Soap_GetProjectPropertyResponse();

        executeSOAPRequest(
            request,
            "GetProjectPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetProjectPropertyResult();
    }

    public void setProjectProperty(
        final String projectUri,
        final String name,
        final String value)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_SetProjectProperty requestData = new _Classification4Soap_SetProjectProperty(projectUri,
                name,
                value);

        final SOAPRequest request = createSOAPRequest(
                "SetProjectProperty",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "SetProjectProperty");
                    }
                });

        final _Classification4Soap_SetProjectPropertyResponse responseData = new _Classification4Soap_SetProjectPropertyResponse();

        executeSOAPRequest(
            request,
            "SetProjectPropertyResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public String getChangedNodesAndProjects(final int firstSequenceId)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetChangedNodesAndProjects requestData = new _Classification4Soap_GetChangedNodesAndProjects(
                    firstSequenceId);

        final SOAPRequest request = createSOAPRequest(
                "GetChangedNodesAndProjects",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetChangedNodesAndProjects");
                    }
                });

        final _Classification4Soap_GetChangedNodesAndProjectsResponse responseData = new _Classification4Soap_GetChangedNodesAndProjectsResponse();

        executeSOAPRequest(
            request,
            "GetChangedNodesAndProjectsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetChangedNodesAndProjectsResult();
    }

    public _ProjectInfo createProject(
        final String projectName,
        final AnyContentType structure)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_CreateProject requestData = new _Classification4Soap_CreateProject(projectName,
                structure);

        final SOAPRequest request = createSOAPRequest(
                "CreateProject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateProject");
                    }
                });

        final _Classification4Soap_CreateProjectResponse responseData = new _Classification4Soap_CreateProjectResponse();

        executeSOAPRequest(
            request,
            "CreateProjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateProjectResult();
    }

    public void deleteProject(final String projectUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_DeleteProject requestData = new _Classification4Soap_DeleteProject(projectUri);

        final SOAPRequest request = createSOAPRequest(
                "DeleteProject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteProject");
                    }
                });

        final _Classification4Soap_DeleteProjectResponse responseData = new _Classification4Soap_DeleteProjectResponse();

        executeSOAPRequest(
            request,
            "DeleteProjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _Classification4Soap_GetProjectPropertiesResponse getProjectProperties(final String projectUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetProjectProperties requestData = new _Classification4Soap_GetProjectProperties(
                    projectUri);

        final SOAPRequest request = createSOAPRequest(
                "GetProjectProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetProjectProperties");
                    }
                });

        final _Classification4Soap_GetProjectPropertiesResponse responseData = new _Classification4Soap_GetProjectPropertiesResponse();

        executeSOAPRequest(
            request,
            "GetProjectPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData;
    }

    public void updateProjectProperties(
        final String projectUri,
        final String state,
        final _ProjectProperty[] properties)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_UpdateProjectProperties requestData = new _Classification4Soap_UpdateProjectProperties(
                    projectUri,
                    state,
                    properties);

        final SOAPRequest request = createSOAPRequest(
                "UpdateProjectProperties",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "UpdateProjectProperties");
                    }
                });

        final _Classification4Soap_UpdateProjectPropertiesResponse responseData = new _Classification4Soap_UpdateProjectPropertiesResponse();

        executeSOAPRequest(
            request,
            "UpdateProjectPropertiesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public _ProjectInfo getProject(final String projectUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetProject requestData = new _Classification4Soap_GetProject(projectUri);

        final SOAPRequest request = createSOAPRequest(
                "GetProject",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetProject");
                    }
                });

        final _Classification4Soap_GetProjectResponse responseData = new _Classification4Soap_GetProjectResponse();

        executeSOAPRequest(
            request,
            "GetProjectResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetProjectResult();
    }

    public _ProjectInfo getProjectFromName(final String projectName)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetProjectFromName requestData = new _Classification4Soap_GetProjectFromName(
                    projectName);

        final SOAPRequest request = createSOAPRequest(
                "GetProjectFromName",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetProjectFromName");
                    }
                });

        final _Classification4Soap_GetProjectFromNameResponse responseData = new _Classification4Soap_GetProjectFromNameResponse();

        executeSOAPRequest(
            request,
            "GetProjectFromNameResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetProjectFromNameResult();
    }

    public _ProjectInfo[] listProjects()
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_ListProjects requestData = new _Classification4Soap_ListProjects();

        final SOAPRequest request = createSOAPRequest(
                "ListProjects",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListProjects");
                    }
                });

        final _Classification4Soap_ListProjectsResponse responseData = new _Classification4Soap_ListProjectsResponse();

        executeSOAPRequest(
            request,
            "ListProjectsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListProjectsResult();
    }

    public _ProjectInfo[] listAllProjects()
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_ListAllProjects requestData = new _Classification4Soap_ListAllProjects();

        final SOAPRequest request = createSOAPRequest(
                "ListAllProjects",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListAllProjects");
                    }
                });

        final _Classification4Soap_ListAllProjectsResponse responseData = new _Classification4Soap_ListAllProjectsResponse();

        executeSOAPRequest(
            request,
            "ListAllProjectsResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListAllProjectsResult();
    }

    public _NodeInfo[] listStructures(final String projectUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_ListStructures requestData = new _Classification4Soap_ListStructures(projectUri);

        final SOAPRequest request = createSOAPRequest(
                "ListStructures",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ListStructures");
                    }
                });

        final _Classification4Soap_ListStructuresResponse responseData = new _Classification4Soap_ListStructuresResponse();

        executeSOAPRequest(
            request,
            "ListStructuresResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getListStructuresResult();
    }

    public AnyContentType getNodesXml(
        final String[] nodeUris,
        final boolean childNodes,
        final AnyContentType _out_getNodesXmlResult)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetNodesXml requestData = new _Classification4Soap_GetNodesXml(nodeUris, childNodes);

        final SOAPRequest request = createSOAPRequest(
                "GetNodesXml",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetNodesXml");
                    }
                });

        final _Classification4Soap_GetNodesXmlResponse responseData = new _Classification4Soap_GetNodesXmlResponse();

        responseData.setGetNodesXmlResult(_out_getNodesXmlResult);

        executeSOAPRequest(
            request,
            "GetNodesXmlResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetNodesXmlResult();
    }

    public String createNode(
        final String nodeName,
        final String parentNodeUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_CreateNode requestData = new _Classification4Soap_CreateNode(nodeName, parentNodeUri);

        final SOAPRequest request = createSOAPRequest(
                "CreateNode",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "CreateNode");
                    }
                });

        final _Classification4Soap_CreateNodeResponse responseData = new _Classification4Soap_CreateNodeResponse();

        executeSOAPRequest(
            request,
            "CreateNodeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getCreateNodeResult();
    }

    public void renameNode(
        final String nodeUri,
        final String newNodeName)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_RenameNode requestData = new _Classification4Soap_RenameNode(nodeUri, newNodeName);

        final SOAPRequest request = createSOAPRequest(
                "RenameNode",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "RenameNode");
                    }
                });

        final _Classification4Soap_RenameNodeResponse responseData = new _Classification4Soap_RenameNodeResponse();

        executeSOAPRequest(
            request,
            "RenameNodeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void moveBranch(
        final String nodeUri,
        final String newParentNodeUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_MoveBranch requestData = new _Classification4Soap_MoveBranch(nodeUri,
                newParentNodeUri);

        final SOAPRequest request = createSOAPRequest(
                "MoveBranch",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "MoveBranch");
                    }
                });

        final _Classification4Soap_MoveBranchResponse responseData = new _Classification4Soap_MoveBranchResponse();

        executeSOAPRequest(
            request,
            "MoveBranchResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void reorderNode(
        final String nodeUri,
        final int moveBy)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_ReorderNode requestData = new _Classification4Soap_ReorderNode(nodeUri, moveBy);

        final SOAPRequest request = createSOAPRequest(
                "ReorderNode",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "ReorderNode");
                    }
                });

        final _Classification4Soap_ReorderNodeResponse responseData = new _Classification4Soap_ReorderNodeResponse();

        executeSOAPRequest(
            request,
            "ReorderNodeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public void deleteBranches(
        final String[] nodeUris,
        final String reclassifyUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_DeleteBranches requestData = new _Classification4Soap_DeleteBranches(nodeUris,
                reclassifyUri);

        final SOAPRequest request = createSOAPRequest(
                "DeleteBranches",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "DeleteBranches");
                    }
                });

        final _Classification4Soap_DeleteBranchesResponse responseData = new _Classification4Soap_DeleteBranchesResponse();

        executeSOAPRequest(
            request,
            "DeleteBranchesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });
    }

    public AnyContentType getDeletedNodesXml(
        final String projectUri,
        final Calendar since,
        final AnyContentType _out_getDeletedNodesXmlResult)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetDeletedNodesXml requestData = new _Classification4Soap_GetDeletedNodesXml(projectUri,
                since);

        final SOAPRequest request = createSOAPRequest(
                "GetDeletedNodesXml",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetDeletedNodesXml");
                    }
                });

        final _Classification4Soap_GetDeletedNodesXmlResponse responseData = new _Classification4Soap_GetDeletedNodesXmlResponse();

        responseData.setGetDeletedNodesXmlResult(_out_getDeletedNodesXmlResult);

        executeSOAPRequest(
            request,
            "GetDeletedNodesXmlResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetDeletedNodesXmlResult();
    }

    public _NodeInfo getNode(final String nodeUri)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetNode requestData = new _Classification4Soap_GetNode(nodeUri);

        final SOAPRequest request = createSOAPRequest(
                "GetNode",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetNode");
                    }
                });

        final _Classification4Soap_GetNodeResponse responseData = new _Classification4Soap_GetNodeResponse();

        executeSOAPRequest(
            request,
            "GetNodeResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetNodeResult();
    }

    public _NodeInfo getNodeFromPath(final String nodePath)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetNodeFromPath requestData = new _Classification4Soap_GetNodeFromPath(nodePath);

        final SOAPRequest request = createSOAPRequest(
                "GetNodeFromPath",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetNodeFromPath");
                    }
                });

        final _Classification4Soap_GetNodeFromPathResponse responseData = new _Classification4Soap_GetNodeFromPathResponse();

        executeSOAPRequest(
            request,
            "GetNodeFromPathResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetNodeFromPathResult();
    }

    public String getChangedNodes(final int firstSequenceId)
        throws TransportException, SOAPFault
    {
        final _Classification4Soap_GetChangedNodes requestData = new _Classification4Soap_GetChangedNodes(firstSequenceId);

        final SOAPRequest request = createSOAPRequest(
                "GetChangedNodes",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            "GetChangedNodes");
                    }
                });

        final _Classification4Soap_GetChangedNodesResponse responseData = new _Classification4Soap_GetChangedNodesResponse();

        executeSOAPRequest(
            request,
            "GetChangedNodesResponse",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getGetChangedNodesResult();
    }
}
