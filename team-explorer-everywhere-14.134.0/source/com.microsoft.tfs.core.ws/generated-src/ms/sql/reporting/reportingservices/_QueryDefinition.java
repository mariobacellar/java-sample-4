// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.sql.reporting.reportingservices;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.sql.reporting.reportingservices._QueryDefinition;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _QueryDefinition
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String commandType;
    protected String commandText;
    protected int timeout;

    public _QueryDefinition()
    {
        super();
    }

    public _QueryDefinition(
        final String commandType,
        final String commandText,
        final int timeout)
    {
        // TODO : Call super() instead of setting all fields directly?
        setCommandType(commandType);
        setCommandText(commandText);
        setTimeout(timeout);
    }

    public String getCommandType()
    {
        return this.commandType;
    }

    public void setCommandType(String value)
    {
        this.commandType = value;
    }

    public String getCommandText()
    {
        return this.commandText;
    }

    public void setCommandText(String value)
    {
        this.commandText = value;
    }

    public int getTimeout()
    {
        return this.timeout;
    }

    public void setTimeout(int value)
    {
        this.timeout = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "CommandType",
            this.commandType);
        XMLStreamWriterHelper.writeElement(
            writer,
            "CommandText",
            this.commandText);
        XMLStreamWriterHelper.writeElement(
            writer,
            "Timeout",
            this.timeout);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("CommandType"))
                {
                    this.commandType = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("CommandText"))
                {
                    this.commandText = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("Timeout"))
                {
                    this.timeout = XMLConvert.toInt(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
