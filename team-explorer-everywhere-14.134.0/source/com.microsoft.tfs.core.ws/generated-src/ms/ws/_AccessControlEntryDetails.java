// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.ws;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.ws._AccessControlEntryDetails;
import ms.ws._AceExtendedInformation;
import ms.ws._IdentityDescriptor;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _AccessControlEntryDetails
    extends _AccessControlEntry
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String token;

    // Elements
    protected _AceExtendedInformation extendedInformation;
    protected _IdentityDescriptor serializableDescriptor;

    public _AccessControlEntryDetails()
    {
        super();
    }

    public _AccessControlEntryDetails(
        final int allow,
        final int deny,
        final String token,
        final _AceExtendedInformation extendedInformation,
        final _IdentityDescriptor serializableDescriptor)
    {
        // TODO : Call super() instead of setting all fields directly?
        setAllow(allow);
        setDeny(deny);
        setToken(token);
        setExtendedInformation(extendedInformation);
        setSerializableDescriptor(serializableDescriptor);
    }

    public String getToken()
    {
        return this.token;
    }

    public void setToken(final String value)
    {
        this.token = value;
    }

    public _AceExtendedInformation getExtendedInformation()
    {
        return this.extendedInformation;
    }

    public void setExtendedInformation(_AceExtendedInformation value)
    {
        this.extendedInformation = value;
    }

    public _IdentityDescriptor getSerializableDescriptor()
    {
        return this.serializableDescriptor;
    }

    public void setSerializableDescriptor(_IdentityDescriptor value)
    {
        this.serializableDescriptor = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Declare our type
        writer.writeAttribute(
            "xsi",
            "http://www.w3.org/2001/XMLSchema-instance",
            "type",
            "AccessControlEntryDetails");

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Allow",
            this.allow);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Deny",
            this.deny);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "Token",
            this.token);

        // Elements
        if (this.extendedInformation != null)
        {
            this.extendedInformation.writeAsElement(
                writer,
                "ExtendedInformation");
        }

        if (this.serializableDescriptor != null)
        {
            this.serializableDescriptor.writeAsElement(
                writer,
                "SerializableDescriptor");
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("Allow"))
            {
                this.allow = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Deny"))
            {
                this.deny = XMLConvert.toInt(attributeValue);
            }
            else if (localName.equalsIgnoreCase("Token"))
            {
                this.token = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("ExtendedInformation"))
                {
                    this.extendedInformation = new _AceExtendedInformation();
                    this.extendedInformation.readFromElement(reader);
                }
                else if (localName.equalsIgnoreCase("SerializableDescriptor"))
                {
                    this.serializableDescriptor = new _IdentityDescriptor();
                    this.serializableDescriptor.readFromElement(reader);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
