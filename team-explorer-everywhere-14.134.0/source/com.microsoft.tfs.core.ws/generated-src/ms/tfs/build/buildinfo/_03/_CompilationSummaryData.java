// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.build.buildinfo._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.build.buildinfo._03._CompilationSummaryData;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _CompilationSummaryData
    implements ElementSerializable, ElementDeserializable
{
    // No attributes    

    // Elements
    protected String logFileName;
    protected long totalCompilerErrors;
    protected long totalCompilerWarnings;
    protected long totalCodeAnalysisErrors;
    protected long totalCodeAnalysisWarnings;

    public _CompilationSummaryData()
    {
        super();
    }

    public _CompilationSummaryData(
        final String logFileName,
        final long totalCompilerErrors,
        final long totalCompilerWarnings,
        final long totalCodeAnalysisErrors,
        final long totalCodeAnalysisWarnings)
    {
        // TODO : Call super() instead of setting all fields directly?
        setLogFileName(logFileName);
        setTotalCompilerErrors(totalCompilerErrors);
        setTotalCompilerWarnings(totalCompilerWarnings);
        setTotalCodeAnalysisErrors(totalCodeAnalysisErrors);
        setTotalCodeAnalysisWarnings(totalCodeAnalysisWarnings);
    }

    public String getLogFileName()
    {
        return this.logFileName;
    }

    public void setLogFileName(String value)
    {
        this.logFileName = value;
    }

    public long getTotalCompilerErrors()
    {
        return this.totalCompilerErrors;
    }

    public void setTotalCompilerErrors(long value)
    {
        this.totalCompilerErrors = value;
    }

    public long getTotalCompilerWarnings()
    {
        return this.totalCompilerWarnings;
    }

    public void setTotalCompilerWarnings(long value)
    {
        this.totalCompilerWarnings = value;
    }

    public long getTotalCodeAnalysisErrors()
    {
        return this.totalCodeAnalysisErrors;
    }

    public void setTotalCodeAnalysisErrors(long value)
    {
        this.totalCodeAnalysisErrors = value;
    }

    public long getTotalCodeAnalysisWarnings()
    {
        return this.totalCodeAnalysisWarnings;
    }

    public void setTotalCodeAnalysisWarnings(long value)
    {
        this.totalCodeAnalysisWarnings = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Elements
        XMLStreamWriterHelper.writeElement(
            writer,
            "LogFileName",
            this.logFileName);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TotalCompilerErrors",
            this.totalCompilerErrors);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TotalCompilerWarnings",
            this.totalCompilerWarnings);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TotalCodeAnalysisErrors",
            this.totalCodeAnalysisErrors);
        XMLStreamWriterHelper.writeElement(
            writer,
            "TotalCodeAnalysisWarnings",
            this.totalCodeAnalysisWarnings);

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // This object uses no attributes

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("LogFileName"))
                {
                    this.logFileName = reader.getElementText();
                }
                else if (localName.equalsIgnoreCase("TotalCompilerErrors"))
                {
                    this.totalCompilerErrors = XMLConvert.toLong(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("TotalCompilerWarnings"))
                {
                    this.totalCompilerWarnings = XMLConvert.toLong(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("TotalCodeAnalysisErrors"))
                {
                    this.totalCodeAnalysisErrors = XMLConvert.toLong(reader.getElementText());
                }
                else if (localName.equalsIgnoreCase("TotalCodeAnalysisWarnings"))
                {
                    this.totalCodeAnalysisWarnings = XMLConvert.toLong(reader.getElementText());
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
