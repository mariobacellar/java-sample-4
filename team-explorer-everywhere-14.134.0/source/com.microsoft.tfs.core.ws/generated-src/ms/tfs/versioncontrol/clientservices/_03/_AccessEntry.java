// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the repository root.

 /*
 * This file was automatically generated by com.microsoft.tfs.core.ws.generator.Generator
 * from the /complexType.vm template.
 */
package ms.tfs.versioncontrol.clientservices._03;

import com.microsoft.tfs.core.ws.runtime.*;
import com.microsoft.tfs.core.ws.runtime.serialization.*;
import com.microsoft.tfs.core.ws.runtime.types.*;
import com.microsoft.tfs.core.ws.runtime.util.*;
import com.microsoft.tfs.core.ws.runtime.xml.*;

import ms.tfs.versioncontrol.clientservices._03._AccessEntry;

import java.lang.String;

import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;

/**
 * Automatically generated complex type class.
 */
public class _AccessEntry
    implements ElementSerializable, ElementDeserializable
{
    // Attributes
    protected String ident;
    protected String disp;

    // Elements
    protected String[] allow;
    protected String[] deny;
    protected String[] allowInherited;
    protected String[] denyInherited;

    public _AccessEntry()
    {
        super();
    }

    public _AccessEntry(
        final String ident,
        final String disp,
        final String[] allow,
        final String[] deny,
        final String[] allowInherited,
        final String[] denyInherited)
    {
        // TODO : Call super() instead of setting all fields directly?
        setIdent(ident);
        setDisp(disp);
        setAllow(allow);
        setDeny(deny);
        setAllowInherited(allowInherited);
        setDenyInherited(denyInherited);
    }

    public String getIdent()
    {
        return this.ident;
    }

    public void setIdent(final String value)
    {
        this.ident = value;
    }

    public String getDisp()
    {
        return this.disp;
    }

    public void setDisp(final String value)
    {
        this.disp = value;
    }

    public String[] getAllow()
    {
        return this.allow;
    }

    public void setAllow(String[] value)
    {
        this.allow = value;
    }

    public String[] getDeny()
    {
        return this.deny;
    }

    public void setDeny(String[] value)
    {
        this.deny = value;
    }

    public String[] getAllowInherited()
    {
        return this.allowInherited;
    }

    public void setAllowInherited(String[] value)
    {
        this.allowInherited = value;
    }

    public String[] getDenyInherited()
    {
        return this.denyInherited;
    }

    public void setDenyInherited(String[] value)
    {
        this.denyInherited = value;
    }

    public void writeAsElement(
        final XMLStreamWriter writer,
        final String name)
        throws XMLStreamException
    {
        writer.writeStartElement(name);

        // Attributes
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "ident",
            this.ident);
        XMLStreamWriterHelper.writeAttribute(
            writer,
            "disp",
            this.disp);

        // Elements
        if (this.allow != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Allow");

            for (int iterator0 = 0; iterator0 < this.allow.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.allow[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.deny != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("Deny");

            for (int iterator0 = 0; iterator0 < this.deny.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.deny[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.allowInherited != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("AllowInherited");

            for (int iterator0 = 0; iterator0 < this.allowInherited.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.allowInherited[iterator0]);
            }

            writer.writeEndElement();
        }

        if (this.denyInherited != null)
        {
            /*
             * The element type is an array.
             */
            writer.writeStartElement("DenyInherited");

            for (int iterator0 = 0; iterator0 < this.denyInherited.length; iterator0++)
            {
                XMLStreamWriterHelper.writeElement(
                    writer,
                    "string",
                    this.denyInherited[iterator0]);
            }

            writer.writeEndElement();
        }

        writer.writeEndElement();
    }

    public void readFromElement(final XMLStreamReader reader)
        throws XMLStreamException
    {
        String localName;

        // Attributes
        final int attributeCount = reader.getAttributeCount();
        String attributeValue;

        for (int i = 0; i < attributeCount; i++)
        {
            localName = reader.getAttributeLocalName(i);
            attributeValue = reader.getAttributeValue(i);

            if (localName.equalsIgnoreCase("ident"))
            {
                this.ident = attributeValue;
            }
            else if (localName.equalsIgnoreCase("disp"))
            {
                this.disp = attributeValue;
            }

            // Ignore unknown attributes.
        }

        // Elements
        int event;

        do
        {
            event = reader.next();

            if (event == XMLStreamConstants.START_ELEMENT)
            {
                localName = reader.getLocalName();

                if (localName.equalsIgnoreCase("Allow"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.allow = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("Deny"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.deny = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("AllowInherited"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.allowInherited = (String[]) list0.toArray(new String[list0.size()]);
                }
                else if (localName.equalsIgnoreCase("DenyInherited"))
                {
                    /*
                     * The element type is an array.
                     */
                    int event0;
                    final List list0 = new ArrayList();

                    do
                    {
                        event0 = reader.nextTag();

                        if (event0 == XMLStreamConstants.START_ELEMENT)
                        {
                            list0.add(reader.getElementText());
                        }
                    }
                    while (event0 != XMLStreamConstants.END_ELEMENT);

                    this.denyInherited = (String[]) list0.toArray(new String[list0.size()]);
                }
                else
                {
                    // Read the unknown child element until its end
                    XMLStreamReaderHelper.readUntilElementEnd(reader);
                }
            }
        }
        while (event != XMLStreamConstants.END_ELEMENT);
    }
}
